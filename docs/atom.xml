<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V语言中文社区</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://vlanguage.cn/"/>
  <updated>2019-07-18T02:46:38.987Z</updated>
  <id>https://vlanguage.cn/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>循序渐进:V语言0.1.3版本更新,vlang命令介绍</title>
    <link href="https://vlanguage.cn/2019/07/18/vlang-command.html"/>
    <id>https://vlanguage.cn/2019/07/18/vlang-command.html</id>
    <published>2019-07-18T08:01:27.000Z</published>
    <updated>2019-07-18T02:46:38.987Z</updated>
    
    <content type="html"><![CDATA[<div class="content" style="max-width: 100%;">                                        <p>6月26日，vlang官网(<a href="https://vlang.io" target="_blank">https://vlang.io</a>)已更新版本到<code>0.1.3</code>,同时发布了linux平台及macOS平台编译好的二进制文件供下载，windows平台暂无，不久会发布。</p><p>该版本修复了vlang之前编译会报错的<code>+=</code>、<code>*=</code>等运算符，同时也更新了v命令，现整理v命令如下：</p><p>1.直接运行<kbd>v</kbd>，将进入交互式编程环境(<code>REPL</code>)</p><p><img src="https://image.v-lang.cn/MjAxOS8wNi8yNi9hMTIzNmM0NTVlODQ0YmY1OTVkZWVmYWMzMTNhNTIyYy5wbmc=" style="width: 100%;"></p><p>2.编译<code>.v</code>文件</p><p><kbd>v file.v</kbd></p><p>这里将<code>file.v</code>文件编译为二进制可执行文件<code>file</code>，如需运行，请在执行<code>./file</code>。</p><p>默认情况下，生成的可执行文件的名称和<code>.v</code>文件名相同，如果在编译时修改，可执行<kbd>v -o &lt;程序名&gt; file.v</kbd></p><p>3.编译并运行<code>.v</code>文件</p><p><kbd>v run file.v</kbd></p><p>4.细心的同学会发现，每次编译完<code>.v</code>文件后，不仅会生成二进制可执行文件，同时还会生成一个<code>file.dSYM</code>的文件夹，对于有洁癖的同学来说时难以忍受的，其实只要运行以下命令就会只生成纯粹的可执行文件，不会生成“烦人”的<code>file.dSYM</code>文件夹</p><p><kbd>v -prod file.v</kbd></p><p>P.S:以上<code>-o</code>、<code>-prod</code>参数可以混合使用������</p><p>以上内容若有不足之处，欢迎朋友们指正！</p>                                    </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div class=&quot;content&quot; style=&quot;max-width: 100%;&quot;&gt;

                    
                    &lt;p&gt;6月26日，vlang官网(&lt;a href=&quot;https://vlang.io&quot; target
      
    
    </summary>
    
      <category term="前沿资讯" scheme="https://vlanguage.cn/categories/%E5%89%8D%E6%B2%BF%E8%B5%84%E8%AE%AF/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>千呼万唤始出来:V语言终于开源上线啦</title>
    <link href="https://vlanguage.cn/2019/07/18/vlanguage-source.html"/>
    <id>https://vlanguage.cn/2019/07/18/vlanguage-source.html</id>
    <published>2019-07-18T07:01:27.000Z</published>
    <updated>2019-07-18T02:46:59.571Z</updated>
    
    <content type="html"><![CDATA[<div class="content" style="max-width: 100%;">                                        <p>V语言正式开源啦！</p><p>经过漫长的等待，Vlang终于开源，当前开源的版本是0.0.12。</p><p>目前还没有提供已经编译好的二进制版本供大家下载，只能通过源码编译的方式（其实作者在6月18号短暂上线了一会macos平台的vlang二进制文件）。</p><p>Vlang源码编译地址及编译方法可访问：<a href="https://github.com/vlang/v#installing-v-from-source" target="_blank" style="background-color: rgb(255, 255, 255);">https://github.com/vlang/v#installing-v-from-source</a>。</p><p>现摘抄编译步骤如下<b>(P.S:如果有的同学https://vlang.io/v.c 访问超时，可以替换为https://assets.v-lang.cn/downloads/v.c)</b>:</p><h3 style="margin-bottom: 16px; margin-top: 24px; font-size: 1.25em; font-weight: 600; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">Linux and macOS</h3><div class="highlight highlight-source-shell" style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;"><pre style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; margin-bottom: 0px; overflow-wrap: normal; background-color: rgb(246, 248, 250); border-radius: 3px; line-height: 1.45; padding: 16px; word-break: normal;">mkdir <span class="pl-k" style="color: rgb(215, 58, 73);">~</span>/code <span class="pl-k" style="color: rgb(215, 58, 73);">&amp;&amp;</span> <span class="pl-c1" style="color: rgb(0, 92, 197);">cd</span> <span class="pl-k" style="color: rgb(215, 58, 73);">~</span>/code  <span class="pl-c" style="color: rgb(106, 115, 125);"><span class="pl-c">#</span> ~/code directory has to be used (it's a temporary limitation)</span>git clone https://github.com/vlang/v<span class="pl-c1" style="color: rgb(0, 92, 197);">cd</span> v/compilermake<span class="pl-c" style="color: rgb(106, 115, 125);"><span class="pl-c">#</span> Or build without make:</span>wget https://vlang.io/v.c <span class="pl-c" style="color: rgb(106, 115, 125);"><span class="pl-c">#</span> Download the V compiler's source translated to C // 下载C实现的V编译器源码</span>cc -std=c11 -w -o vc v.c  <span class="pl-c" style="color: rgb(106, 115, 125);"><span class="pl-c">#</span> Build it with Clang or GCC  // 用Clang编译C实现的V编译器</span>./vc -o v <span class="pl-c1" style="color: rgb(0, 92, 197);">.</span> <span class="pl-k" style="color: rgb(215, 58, 73);">&amp;&amp;</span> rm vc      <span class="pl-c" style="color: rgb(106, 115, 125);"><span class="pl-c">#</span> Use the resulting V binary to build V from V source, delete the old compiler // 用C实现的V编译器编译V实现的V编译器</span></pre></div><p style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">That's it! Now you have a V executable at&nbsp;<code style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; background-color: rgba(27, 31, 35, 0.05); border-radius: 3px; margin: 0px; padding: 0.2em 0.4em;">~/code/v/compiler/v</code>.</p><p style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">Bootstrap the compiler to make sure it works:</p><pre style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; margin-bottom: 16px; overflow-wrap: normal; background-color: rgb(246, 248, 250); border-radius: 3px; line-height: 1.45; padding: 16px; color: rgb(36, 41, 46);"><code style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; background: transparent; border-radius: 3px; margin: 0px; padding: 0px; border: 0px; display: inline; line-height: inherit; overflow: visible; overflow-wrap: normal;">./v -o v .  <span style="color: rgb(106, 115, 125); font-size: 13.6px;"> # 用V实现的V编译器编译V编译器源码，所谓的语言自举</span></code></pre><p style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">You can create a symlink so that it's globally available:</p><pre style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; margin-bottom: 16px; overflow-wrap: normal; background-color: rgb(246, 248, 250); border-radius: 3px; line-height: 1.45; padding: 16px; color: rgb(36, 41, 46);"><code style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; background: transparent; border-radius: 3px; margin: 0px; padding: 0px; border: 0px; display: inline; line-height: inherit; overflow: visible; overflow-wrap: normal;">sudo ln -s ~/code/v/compiler/v /usr/local/bin/v</code></pre><h3 style="margin-top: 24px; margin-bottom: 16px; font-weight: 600; line-height: 1.25; font-size: 1.25em; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">Windows</h3><p style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">V works great on Windows Subsystem for Linux. The instructions are the same as above.</p><p style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">If you want to build v.exe on Windows without WSL, you will need Visual Studio. Microsoft doesn't make it easy for developers. Mingw-w64 could suffice, but if you plan to develop UI and graphical apps, VS is your only option.</p><p style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">V temporarily can't be compiled with Visual Studio. This will be fixed asap.</p><h3 style="margin-bottom: 16px; margin-top: 24px; font-size: 1.25em; font-weight: 600; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">Testing</h3><pre style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; margin-bottom: 16px; overflow-wrap: normal; background-color: rgb(246, 248, 250); border-radius: 3px; line-height: 1.45; padding: 16px; color: rgb(36, 41, 46);"><code style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; background: transparent; border-radius: 3px; margin: 0px; padding: 0px; border: 0px; display: inline; line-height: inherit; overflow: visible; overflow-wrap: normal;">$ vV 0.0.12Use Ctrl-D to exit&gt;&gt;&gt; println('hello world')hello world&gt;&gt;&gt;</code></pre><p style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">Now if you want, you can start tinkering with the compiler. If you introduce a breaking change and rebuild V, you will no longer be able to use V to build itself. So it's a good idea to make a backup copy of a working compiler executable.</p><h3 style="margin-bottom: 16px; margin-top: 24px; font-size: 1.25em; font-weight: 600; line-height: 1.25; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">Running the examples</h3><pre style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; margin-bottom: 16px; overflow-wrap: normal; background-color: rgb(246, 248, 250); border-radius: 3px; line-height: 1.45; padding: 16px; color: rgb(36, 41, 46);"><code style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; background: transparent; border-radius: 3px; margin: 0px; padding: 0px; border: 0px; display: inline; line-height: inherit; overflow: visible; overflow-wrap: normal;">v hello_world.v &amp;&amp; ./hello_world # or simplyv run hello_world.v              # This builds the program and runs it right awayv word_counter.v &amp;&amp; ./word_counter cinderella.txtv news_fetcher.v &amp;&amp; ./news_fetcherv tetris.v &amp;&amp; ./tetris</code></pre><p style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">In order to build Tetris and anything else using the graphics module, you will need to install glfw and freetype.</p><p style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">If you plan to use the http package, you also need to install libcurl.</p><p style="margin-bottom: 16px; color: rgb(36, 41, 46); font-family: -apple-system, system-ui, &quot;Segoe UI&quot;, Helvetica, Arial, sans-serif, &quot;Apple Color Emoji&quot;, &quot;Segoe UI Emoji&quot;, &quot;Segoe UI Symbol&quot;;">glfw and libcurl dependencies will be removed soon.</p><pre style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; overflow-wrap: normal; background-color: rgb(246, 248, 250); border-radius: 3px; line-height: 1.45; padding: 16px; color: rgb(36, 41, 46); margin-bottom: 0px !important;"><code style="font-family: SFMono-Regular, Consolas, &quot;Liberation Mono&quot;, Menlo, Courier, monospace; font-size: 13.6px; background: transparent; border-radius: 3px; margin: 0px; padding: 0px; border: 0px; display: inline; line-height: inherit; overflow: visible; overflow-wrap: normal;">Ubuntu:sudo apt install glfw libglfw3-dev libfreetype6-dev libcurl3-devmacOS:brew install glfw freetype curl</code></pre>                                    </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div class=&quot;content&quot; style=&quot;max-width: 100%;&quot;&gt;

                    
                    &lt;p&gt;V语言正式开源啦！&lt;/p&gt;&lt;p&gt;经过漫长的等待，Vlang终于开源，当前开源的版本是0.0.1
      
    
    </summary>
    
      <category term="前沿资讯" scheme="https://vlanguage.cn/categories/%E5%89%8D%E6%B2%BF%E8%B5%84%E8%AE%AF/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>【IT资讯】全新编程语言V发布</title>
    <link href="https://vlanguage.cn/2019/07/18/dengjin20104042056_96426213.html"/>
    <id>https://vlanguage.cn/2019/07/18/dengjin20104042056_96426213.html</id>
    <published>2019-07-18T00:00:00.000Z</published>
    <updated>2019-07-22T05:05:28.458Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/dengjin20104042056/article/details/96426213&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/dengjin20104042056/article/details/96426213&quot;}">   <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div id="content_views" class="markdown_views prism-atom-one-dark">   <!-- flowchart 箭头图标 勿删 -->   <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">    <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"/>   </svg>   <p>近日，一种开源的名为V的新的静态类型编程语言发布了。它被描述为一种简单，快速，编译的语言，用于创建可维护的软件。它的创造者Alex Medvednikov表示它与Go非常相似，并受到Oberon，Rust和Swift的启发。</p>   <p>开发者从来就不缺新语言。今天新智元为大家带来的，是一款最新推出的语言：V。目前处于很早期的阶段，暂时还没有在维基百科上拥有姓名。</p>   <p>V是一种静态编译型语言，用于构建可维护的软件。它与Go类似，也受到Oberon、Rust、Swift的影响。</p>   <p>这一语言主要特性是快速编译、安全且可以和C/C++转换。其编译器只有400KB，且没有第三方依赖。V语言官方推特账号还同时公布了V语言建立的macOS Demo。</p>   <p><img src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/2019071810543655.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9kZW5namluLmJsb2cuY3Nkbi5uZXQ=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>   <h4><a id="V_15"></a>从V编程语言中可以期待什么</h4>   <h5><a id="_17"></a>快速编译</h5>   <p>V每秒可以编译多达120万行代码。它通过直接的机器代码生成和强大的模块化实现了这一点。如果我们决定发出C代码，编译速度将下降到每CPU每秒大约100k的代码。</p>   <p>Medvednikov提到，直接生成机器码仍处于早期的阶段，目前只支持x64/Mach-O。他计划在今年年底之前使这个功能稳定下来。</p>   <h5><a id="_23"></a>安全</h5>   <p>它似乎是一种理想的语言，因为它没有null、全局变量、未定义的值、未定义的行为、变量阴影以及绑定检查。默认情况下，它支持不可变变量、纯函数和不可变结构。泛型目前正在研发中，计划在下个月推出。</p>   <h5><a id="_27"></a>性能</h5>   <p>根据该网站介绍，V与C一样快，需要最少量的分配，并且支持内置序列化而无需运行时反射。它编译为原生二进制文件而没有任何依赖。</p>   <h5><a id="04_MB_31"></a>只需一个0.4 MB的编译器</h5>   <p>与Go，Rust，GCC和Clang相比，V所需的空间和构建时间非常少。整个语言和标准库只有400 KB，您可以在0.4秒内构建它。到今年年底，作者的目标是将这个构建时间缩短到0.15秒。</p>   <h5><a id="CC_35"></a>C/C++转换</h5>   <p>V允许您将V代码转换为C或C++。但是，考虑到C和C++是一种非常复杂的语言，这个功能还处于初期阶段。创作者的目标是在今年年底之前使这个功能稳定下来。</p>   <h5><a id="_39"></a>开发人员如何看待这种语言?</h5>   <p>尽管开发人员喜欢使用一种优秀的语言来构建应用程序，但许多人认为V太好了，不可能成真。难以置信。看看网站上的声明，一些开发人员认为创建者要么对V的功能不诚实，要么在欺骗用户。</p>   <p>在我看来，Vlang是一个巨大的骗局和一堆虚假的承诺。如果我看到幕后黑手带着Patreon的钱跑了，我不会感到惊讶。— Ave. (@warnvod) April 1, 2019</p>   <h5><a id="Alex_MedvednikovV_45"></a>Alex Medvednikov谈为什么可以信任V编程</h5>   <p>在GitHub上报道的一个问题上，这位创作者评论道，“所以你要么相信我，要么不相信，我们将在6月看到谁是对的。”但请不要叫我骗子，骗子和散布错误信息。Medvednikov在不同的论坛上看到的回应和猜测可能让他不知所措。开发一门全新的语言需要大量的工作，也许他是雄心勃勃的。</p>   <p>有关更多详细信息，请访问V编程语言的官方网站。</p>   <p><strong>参考网址</strong>：</p>   <p><a href="https://vlang.io/" rel="noopener" data-token="2f344573a0f58a8a75893dd92797022a" target="_blank">https://vlang.io</a></p>   <p>Documentation: <a href="https://vlang.io/docs" rel="noopener" data-token="a06c055b132b761d7df7ffb914d958c3" target="_blank">https://vlang.io/docs</a></p>   <p>Twitter: <a href="https://twitter.com/v_language" rel="noopener" data-token="87cb15118c27f4cb9de7b95a71dc29ff" target="_blank">https://twitter.com/v_language</a></p>   <p>Discord (primary community): <a href="https://discord.gg/n7c74HM" rel="noopener" data-token="b36fc53b5a91277e617abf10b0ac6aff" target="_blank">https://discord.gg/n7c74HM</a></p>   <p>Installing V: <a href="https://github.com/vlang/v#installing-v-from-source" rel="noopener" data-token="85b3d1c4ff24838c47227382e831a8e2" target="_blank">https://github.com/vlang/v#installing-v-from-source</a></p>   <p>alling V: <a href="https://github.com/vlang/v#installing-v-from-source" rel="noopener" data-token="85b3d1c4ff24838c47227382e831a8e2" target="_blank">https://github.com/vlang/v#installing-v-from-source</a></p>   <p><strong>gitHub链接</strong>：<a href="https://github.com/vlang/v" rel="noopener" data-token="6575218e328947bf1bf487851e97e312" target="_blank">https://github.com/vlang/v</a></p>  </div>  <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e44c3c0e64.css" rel="stylesheet"> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>持续排名GITHUB榜首的V语言竟是C++的孪生兄弟-V版毁灭战士值得点赞</title>
    <link href="https://vlanguage.cn/2019/07/09/BEYONDMA_94978528.html"/>
    <id>https://vlanguage.cn/2019/07/09/BEYONDMA_94978528.html</id>
    <published>2019-07-09T00:00:00.000Z</published>
    <updated>2019-07-22T04:55:18.457Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/BEYONDMA/article/details/94978528&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/BEYONDMA/article/details/94978528&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <p>&nbsp; &nbsp; &nbsp; 最近V语言持续在GITHUB上霸屏，而笔者在上周介绍了V语言的一些基础，详见：<a href="https://blog.csdn.net/BEYONDMA/article/details/94349691" rel="noopener" data-token="326a52e5538deb422082decc16dd8332" target="_blank">GITHUB排行榜C位出道-手把手教你玩转V语言版的俄罗斯方块</a>，而这周我也持续关注了V语言的动态，这次带大家玩一下V语言版的毁灭战士。</p>   <p>&nbsp; &nbsp;&nbsp;</p>   <p style="text-align:center;"><img alt class="has" height="255" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190707124503670.gif" width="400"></p>   <h1>&nbsp; &nbsp;V语言 VS C/C++</h1>   <p>&nbsp; &nbsp; &nbsp; &nbsp;访问V语言的官网<a href="https://vlang.io/" rel="noopener" data-token="63a70f92273d0c34776f750d0036f826" target="_blank">https://vlang.io/</a>，可以看到其主打的特点就有</p>   <ul>   <li>C to V translation</li>   </ul>  <p>&nbsp; &nbsp; 在具体介绍时其声称可以用快400倍的速度来整译整个C或者C++语言的工程。</p>   <p>&nbsp; &nbsp;而且还举出了使用V语言使用vector例子</p>   <pre class="has"><code class="language-cpp">#这是C++使用vector的版本std::vector&lt;std::string&gt; s;s.push_back("V is ");s.push_back("awesome");std::cout &lt;&lt; s.size(); </code></pre>   <pre class="has"><code>#这是V语言的版本mut s := []s &lt;&lt; 'V is 's &lt;&lt; 'awesome'println(s.len)</code></pre>   <pre><code class="language-html hljs">    我看可以看到V语言在语法上与JAVA、.NET等纯面向对象的语言比较接近语法甜点很多，API的调用也不像C++那么刻板，但是其内核其实是C/C++，这就让我们这种金融IT的人士非常的开心，因为纯的面向对象语言都有垃圾回收的问题，延时的不确定性使JAVA不太适合做为量化交易的主要编程语言，而Rust虽然也没有延时，但是他还没有像V一样在不进行改造的情况下，直接完整编译C语言工程的能力。&nbsp;  所以V语言不但具备了C的高效率还能能与C兼容、最关键的是语法掌握起来比较简单，这也是V的核心优势。</code></pre>   <h1>&nbsp; &nbsp;V语言版的DOOM</h1>   <p>&nbsp; &nbsp; 在V语言的官网上提到马上有一篇将毁灭战士（DOOM）翻译为V语言的博客PO出，不过使用V语言编译、执行DOOM也能让我们进一步了解V调用C、C++的机制，其Github的地址在<a href="https://github.com/vlang/doom" rel="noopener" data-token="1e73f8dd1480e433e21b9be11b21e4f1" target="_blank">github.com/vlang/doom</a>。</p>   <p>&nbsp; &nbsp;下面我来给带大家整理一下ubantu下的安装过程（V语言的安装过程请参考<a href="https://blog.csdn.net/BEYONDMA/article/details/94349691" rel="noopener" data-token="326a52e5538deb422082decc16dd8332" target="_blank">https://blog.csdn.net/BEYONDMA/article/details/94349691</a>，这里假设读者已经装好不再赘述)</p>   <p>&nbsp; &nbsp; 1.安装sdl库</p>   <pre class="has"><code>sudo apt install libsdl2-devsudo apt install libsdl2-mixer-dev</code></pre>   <p><strong>&nbsp; &nbsp;注意这步在官网上并未说明，如果不装后面在MAKE的阶段会报sdl::mixer库missing</strong></p>   <p>2.编译doom代码</p>   <pre class="has"><code>git clone https://github.com/chocolate-doom/chocolate-doomcd chocolate-doomcmake .make chocolate-doom</code></pre>   <p>3.下载V的调用DOOM工程的代码</p>   <pre class="has"><code>wget https://raw.githubusercontent.com/vlang/doom/master/p_enemy.vv -lib translated p_enemy.vcp p_enemy.o src/doom/CMakeFiles/doom.dir/p_enemy.c.o</code></pre>   <p>4.运行程序</p>   <pre class="has"><code>make chocolate-doomsrc/chocolate-doom -width 640 #640是指程序运行界面的宽度</code></pre>   <p>5.p_enemy.v调用C的机制</p>   <p>&nbsp; 下面我再给大家展示一下p_enemy.v,我们可以看到如果想调用C的函数，只需要在声明加上fn C.函数名（函数签名） 返回类型，即可完成，另外调用__global标签就能调用全局变量了。可以说是非常方便啊。</p>   <pre class="has"><code>struct C.FILE{} fn C.memcpy(voidptr, voidptr, int)#调用C的函数 fn C.memmove(voidptr, voidptr, int) fn C.memset(voidptr, voidptr, int) fn C.puts(voidptr) fn C.printf(voidptr, ..) fn C.sscanf(voidptr,voidptr, ..) voidptr fn C.strcasecmp(voidptr, voidptr) int fn C.strncasecmp(voidptr, voidptr, int) int fn C.strcmp(voidptr, voidptr) int  fn C.strncmp(voidptr, voidptr, int) int  fn C.fopen(byteptr, byteptr) *C.FILE fn C.fclose(*C.FILE)  fn C.ftell(*C.FILE) int fn C.remove (byteptr) fn C.rename ( byteptr, byteptr)  fn C.isspace(byte) int fn C.atoi(byteptr) int __global video_driver byteptr#调用全局变量 __global screenvisible bool __global vanilla_keyboard_mapping int __global screensaver_mode bool __global usegamma int </code></pre>   <p>具体效果是这样的，虽然只是DOOM一代的画质，但是笔者还是很喜欢，玩了一下午。纯V语言版DOOM出炉笔者会在第一时间向大家分享。</p>   <p style="text-align:center;"><img alt class="has" height="255" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190707140810404.gif" width="400"></p>   <p>&nbsp;</p>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V 语言中文文档</title>
    <link href="https://vlanguage.cn/2019/07/04/u013604145_94598562.html"/>
    <id>https://vlanguage.cn/2019/07/04/u013604145_94598562.html</id>
    <published>2019-07-04T00:00:00.000Z</published>
    <updated>2019-07-22T04:55:19.545Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/u013604145/article/details/94598562&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/u013604145/article/details/94598562&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div id="content_views" class="markdown_views prism-atom-one-dark">   <!-- flowchart 箭头图标 勿删 -->   <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">    <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"/>   </svg>   <p></p>  <div class="toc">   <h3>文章目录</h3>   <ul>    <li><a href="#_1" rel="nofollow"></a></li>    <ul>     <li><a href="#_2" rel="nofollow" data-token="87f13e6aa1b7b9c71df1a65e26f2a432">介绍</a></li>     <li><a href="#Hello_World_8" rel="nofollow" data-token="50cb00260261b26a649e3825533b9788">Hello World</a></li>     <li><a href="#_24" rel="nofollow" data-token="ecfa37c7d6d79f3ef6d1e64190b628a1">注释</a></li>     <li><a href="#_Functions_34" rel="nofollow" data-token="2650537426f3b5a7c58352ad82d85925">函数 Functions</a></li>     <li><a href="#_55" rel="nofollow" data-token="3dae51b816980e22fc0aa4078b39ee53">变量</a></li>     <li><a href="#_101" rel="nofollow" data-token="c27917fcb99f7ba0545bd620cedf4b9f">基本类型</a></li>     <ul>      <li><a href="#_Strings_114" rel="nofollow" data-token="20411eb9ef1538affc0d28a0bd68ecf5">字符串 Strings</a></li>     </ul>     <li><a href="#_Arrays_139" rel="nofollow" data-token="545af3e14ec1c6411d9a761d3dc398d6">数组 Arrays</a></li>     <li><a href="#Map_165" rel="nofollow" data-token="5c5657dae8b7393aae164469db7907da">Map</a></li>     <li><a href="#IF__179" rel="nofollow" data-token="0f0a4fd17bd16d8b558df95d028f9086">IF 用法</a></li>     <li><a href="#_in_198" rel="nofollow" data-token="77e6cb1401ae5b9b2a64607a94a74db5">运算符 in</a></li>     <li><a href="#_FOR_220" rel="nofollow" data-token="8deb75bf484ce8a530e93d37e5982933">循环语句 FOR</a></li>     <li><a href="#Switch_273" rel="nofollow" data-token="1d1c88e788b73d42cf29fa37cd301888">Switch</a></li>     <li><a href="#Structs__291" rel="nofollow" data-token="8d01d5b9c9481c5c70c69d022b40f948">Structs 结构体</a></li>     <ul>      <li><a href="#_326" rel="nofollow" data-token="e49022c1bdf3ce6f82e9cd8e0a14a8e4">结构体-访问修饰符</a></li>      <li><a href="#_364" rel="nofollow" data-token="ac10870120c0c65a24bc50447af6513c">结构体-方法</a></li>     </ul>     <li><a href="#_386" rel="nofollow" data-token="6c9962a4c6eec40939cf20d89a7c8935">纯函数</a></li>     <li><a href="#_Constants_433" rel="nofollow" data-token="e879afbbe269761acadb342f9e6d4e30">常量 Constants</a></li>     <li><a href="#_Modules_478" rel="nofollow" data-token="dafea3b9fdc58bfdf540b0f7448fe423">模块 Modules</a></li>     <li><a href="#_Interfaces_519" rel="nofollow" data-token="009c8e52aae2f4db40c94f486b7e7a63">接口 Interfaces</a></li>     <li><a href="#_549" rel="nofollow" data-token="c170328485d084fd76571b7bd87c91bd">枚举</a></li>     <li><a href="#___562" rel="nofollow" data-token="5dfbf42dad928888b10655bcc420f0da">可选类型 和 错误处理</a></li>     <li><a href="#_Generics_7_620" rel="nofollow" data-token="17703ff9f1bf51a4f6ef925c2d62660e">范型 Generics （预计7月上线）</a></li>     <li><a href="#_645" rel="nofollow" data-token="d847f466e9d826d697d20a100c574633">并发</a></li>     <li><a href="#JSON__650" rel="nofollow" data-token="da00932e06afc687cc79ed71a07e13b6">JSON 解析</a></li>     <li><a href="#_671" rel="nofollow" data-token="b107cea520769a57c6318d8b828509c2">单元测试</a></li>     <li><a href="#_686" rel="nofollow" data-token="5e3c5acca0acf93f9ba614c07fe766f2">内存管理</a></li>     <li><a href="#_Defer_714" rel="nofollow" data-token="3bc0e3c976a55b0a8c3ac975e226aa1d">延迟 Defer</a></li>     <li><a href="#vfmt_717" rel="nofollow" data-token="ed787db1ad7ef95fb5b9815d113e491a">vfmt</a></li>    </ul>    <li><a href="#_720" rel="nofollow" data-token="1bb87e96062f0160c924e76d86416b42">进阶内容</a></li>    <ul>     <li><a href="#VC__722" rel="nofollow" data-token="f530af5a6ef429e3d8bd35c3d17c8d97">V语言中调用C 函数</a></li>     <li><a href="#if_750" rel="nofollow" data-token="6f22610e6d5f97eea475b422fb995bec">预编译if语句</a></li>     <li><a href="#_764" rel="nofollow" data-token="00b687219a1c61617c1475a2dc57069a">代码反射</a></li>     <li><a href="#_790" rel="nofollow" data-token="f8aed8b85eaaef98447a2f0eca93b712">有限的运算符重载</a></li>     <li><a href="#_831" rel="nofollow" data-token="7d032554666b0eea6f4dfd7a11e98c42">内联汇编</a></li>     <li><a href="#_CCV_844" rel="nofollow" data-token="2e72d7c0581bef829ac663f8a9ca4d30">将 C/C++翻译成V</a></li>     <li><a href="#_881" rel="nofollow" data-token="6368ad2a9467c20c05009e81e63a9da5">热门代码重加载</a></li>     <li><a href="#_mac__win_883" rel="nofollow" data-token="2580dc837daf3391b418900e1e079d29">交叉编译 (mac 编译打包 win程序)</a></li>     <li><a href="#Vshell_6_894" rel="nofollow" data-token="6f542e996f7d1dc9b1aceca27004bb55">V中的跨平台shell脚本 (6月下旬)</a></li>     <li><a href="#1_922" rel="nofollow" data-token="f359ff1b05aba7534a55ce8953285d53">附录1：关键字</a></li>     <li><a href="#2_949" rel="nofollow" data-token="c6e47496ee58e4866e0231c956451eb6">附录2：运算符</a></li>    </ul>   </ul>  </div>  <p></p>   <h1><a id="_1"></a></h1>   <h2><a id="_2"></a>介绍</h2>   <p>V是一种静态类型的编译编程语言，用于构建可维护的软件。<br> 它与Go类似，也受到Oberon，Rust，Swift的影响。<br> V是一种非常简单的语言。通过这个文档将花费你大约半个小时，到最后你将学习几乎整个语言。<br> 尽管很简单，但它为开发人员提供了很多动力。你可以用其他语言做任何事情，你可以用V做。（官方文档入口：<a href="https://vlang.io/docs#option%EF%BC%89" rel="noopener" data-token="853c8cad40633813625281a9e2d68ea1" target="_blank">https://vlang.io/docs#option）</a></p>   <h2><a id="Hello_World_8"></a>Hello World</h2>   <pre><code>    //hello.v    fn main() {        println('hello world')    }</code></pre>   <ul>    <li>和 c语言一样，main 为程序入口函数</li>    <li>fn 声明函数，函数的返回值类型在 名称() 的后面，此处不返回任何内容所以忽略；</li>    <li>println 是为数不多的内置函数之一，作为标准输出;</li>    <li>fn main()函数也可以被忽略，方便在编写小程序应用中，或者脚本，或者学习语言时带来方便；这样代表’Hello World’可以这么写</li>   </ul>   <pre><code>    //hello.v    println('hello world')</code></pre>   <h2><a id="_24"></a>注释</h2>   <pre><code>    // 单行注释        /*         这是多行注释        /* 它可以嵌套 */    */</code></pre>   <h2><a id="_Functions_34"></a>函数 Functions</h2>   <pre><code>fn main() {println(add(77, 33))println(sub(100, 50))}fn add(x int, y int) int {return x + y}fn sub(x, y int) int {return x - y}</code></pre>   <ul>    <li>再次声明，返回值的类型在 名称的后面,</li>    <li>和Go 和 C 一样，函数不能重载，这也简化了代码，提高了可维护性和可读性</li>    <li>函数的使用可以在声明之前：例如上面， add 和 sub 在main 之后声明，也可以被 main 调用。对于 V 语言，所有声明都是如此，并且不需要头文件或考虑文件和声明的顺序。</li>   </ul>   <h2><a id="_55"></a>变量</h2>   <pre><code>    name := 'Bob'     age := 20    large_number := i64(9999999999)    println(name)    println(age)    println(large_number)     </code></pre>   <ul>    <li>变量的声明和初始化 使用 := ;这是V语言声明变量的唯一方式，这也意味着变量的初始化始终具有初始值。</li>    <li>变量的类型是右侧的值推断出来的。要强制使用其他类型，请使用强制类型转换；表达式 T(v) 将值 v 转换为 T类型</li>    <li>与大多数语言不同，V 只允许在函数中定义变量，不允许使用全局（模块级别）变量，没有全局状态。</li>   </ul>   <pre><code>    mut age := 20    println(age)    age = 21    println(age)</code></pre>   <ul>    <li>【mut】改变变量的值，使用 = 符号。在V语言中，默认情况下变量是不可改变的，为了得到一个允许被修改的变量，你必须在声明时，用 mut来修饰。     <ul>      <li>您可以将上面例子的 mut 删除过后编译试试。</li>      <li>请注意 := 和 =之间的区别；:=用于声明和初始化，=用于赋值</li>      <li>请看如下3例错误示例</li>     </ul> </li>   </ul>   <pre><code>    fn main() {    age = 21 //这段代码在V语言中是编译不通过的，因为age未声明变量。    }</code></pre>   <pre><code>    fn main() {    age := 21 //此段代码也不会被编译通过，因为未使用的变量会导致编译错误    }</code></pre>   <pre><code>    fn main() {    a := 10     if true {    a := 20 //与大多数语言不同，不允许使用已被声明的变量在局部变量。    //声明已在父作用域中使用的变量名，将导致编译错误。    }     }</code></pre>   <h2><a id="_101"></a>基本类型</h2>   <ul>    <li>bool 布尔类型</li>    <li>string 字符串类型</li>    <li>i8 i16 i32 i64 i128 (soon)</li>    <li>u8 u16 u32 u64 u128 (soon)</li>    <li>byte // 是 u8 的别名</li>    <li>int // 是 i32 的别名,与C,Go不同，int 始终为 32字节</li>    <li>rune // 是 i32 的别名,表示Unicode代码点</li>    <li>f32 f64</li>    <li>byteptr</li>    <li>voidptr</li>   </ul>   <h3><a id="_Strings_114"></a>字符串 Strings</h3>   <pre><code>   name := 'Bob'    println('Hello, $name!')  // `$` 用与字符串内引入变量   println(name.len) //字符串长度      bobby := name + 'by' // 通过 + 拼接字符串   println(bobby) // ==&gt; "Bobby"        println(bobby.substr(1, 3)) // 字符串截取 ==&gt; "ob"     // println(bobby[1:3]) // 这种写法很可能会替换 substr 方法 </code></pre>   <ul>    <li>V语言中，字符串是只读字节数组，字符串数据使用UTF-8编码。</li>    <li>单引号和双引号都可以用于表示字符串（TODO：暂时不支持双引号）。为了保持一致，vfmt 请将双引号转换为单引号，除非字符串包含单引号。</li>    <li>字符串是不可变的，这代表 substring 函数非常有影响：不执行复制，不需要额外的分配。</li>    <li>V语言中，所有运算符必须在两侧都具有相同类型的值。如果有一个int 类型的变量 age:</li>   </ul>   <pre><code>    println('age = ' + age) //此段代码将无法编译通过，需改为如下        println('age = ' + age.str()) //将 age 转换为 string ,或者使用        println('age = $age') //字符串引入变量的方式</code></pre>   <h2><a id="_Arrays_139"></a>数组 Arrays</h2>   <pre><code>nums := [1, 2, 3]println(nums)println(nums[1]) // ==&gt; "2" mut names := ['John']names &lt;&lt; 'Peter' //数组中添加元素names &lt;&lt; 'Sam' // names &lt;&lt; 10  //这里将编译不通过，因为 names 是一个字符串数组println(names.len) // ==&gt; "3"  println('Alex' in names) // ==&gt; "false" 判断变量是否在数组中// 我们也可以预先分配一定数量的元素nr_ids := 50mut ids := [0 ; nr_ids] // 这里将创建 包含50个0的数组</code></pre>   <ul>    <li>数组的类型由第一个元素决定     <ul>      <li>[1,2,3] 是int数组 ([]int)。</li>      <li>[‘a’,‘b’] 是一个字符串数组 ([]string)</li>      <li>所有元素必须相同类型，[1,‘a’] 将编译不通过</li>     </ul> </li>    <li>数组的追加， &lt;&lt; 将一个值附加到数组末尾的运算符</li>    <li>数组长度，arr.len 字段。注意：len是一个只读字段，用户无法修改。</li>    <li>是否包含：val in arr ；如果arr包含val返回 true。</li>   </ul>   <h2><a id="Map_165"></a>Map</h2>   <pre><code>mut m := map[string]int{} // 现在 map的键值只能为 string 类型， m['one'] = 1 //设置值println(m['one']) // ==&gt; "1"  //获取值println(m['bad_key']) // ==&gt; "0"  //不包含返回 0 // TODO: 这是实现 key 是否存在的方法numbers := { // TODO: 这种语法暂时没有实现'one': 1,'two': 2,} </code></pre>   <h2><a id="IF__179"></a>IF 用法</h2>   <p>if 语句非常简单，与大多数其他语言类似。</p>   <p>与其他类C语言不同，条件周围没有括号，并且始终需要大括号。</p>   <ul>    <li>if 可以用作表达式(类似3位运算符)：</li>   </ul>   <pre><code>num := 777s := if num % 2 == 0 {'even'}else {'odd'}println(s) // ==&gt; "odd"</code></pre>   <h2><a id="_in_198"></a>运算符 in</h2>   <ul>    <li>in 用于检测 数组中是否包含 某元素</li>   </ul>   <pre><code>    nums := [1, 2, 3]    println(1 in nums) // ==&gt; true </code></pre>   <ul>    <li>in 拓展用法，可以编写更清晰的布尔判断逻辑</li>   </ul>   <pre><code>//标准写法if parser.token == .plus || parser.token == .minus || parser.token == .div || parser.token == .mult {... } //优化后写法if parser.token in [.plus, .minus, .div, .mult] {... } // V 语言在这样的表达式中有做优化，上面两个语句会生成相同的机器码，不会创建任何数组</code></pre>   <h2><a id="_FOR_220"></a>循环语句 FOR</h2>   <p>V 语言只有一种循环方法：for</p>   <ul>    <li>数组的循环： 使用 for value in arr 的方式循环取数组中的元素；如果需要索引，可以使用 for index,value in arr的方式代替</li>   </ul>   <pre><code>numbers := [1, 2, 3, 4, 5]for num in numbers {println(num)}names := ['Sam', 'Peter']for i, name in names {println('$i) $name')  // Output: 0) Sam}                             //         1) Peter</code></pre>   <ul>    <li>数组循环时，value是只读的，如果要在循环时修改数组，必须使用索引：</li>   </ul>   <pre><code>mut numbers := [1, 2, 3, 4, 5]for i, num in numbers {println(num)numbers[i] = 0}</code></pre>   <ul>    <li>类似while的循环方式实现:这种循环方式类似其他语言的 while 循环。一但条件不满足，循环停止，同样，条件周围不需要使用(),代码块总需要{}</li>   </ul>   <pre><code>mut sum := 0mut i := 0for i &lt;= 100 {sum += ii++}println(sum) // ==&gt; "5050" </code></pre>   <ul>    <li>循环的条件可以省去，这样循环会出现无限循环</li>   </ul>   <pre><code>    mut num := 0    for {    num++    if num &gt;= 10 {    break     }     }    println(num) // ==&gt; "10" </code></pre>   <ul>    <li>传统的 for i 循环:同其他语言风格一样。他比 while形式更安全，因为后者很容易忘记更新计数器并陷入无限循环     <ul>      <li>这里的 i 无需 mut 修饰，因为在这里 默认会被定义为 mut 类型的</li>     </ul> </li>   </ul>   <pre><code>    for i := 0; i &lt; 10; i++ {    println(i)    }</code></pre>   <h2><a id="Switch_273"></a>Switch</h2>   <pre><code>    os := 'windows'     print('V is running on ')    switch os {    case 'darwin':    println('macOS.')    case 'linux':    println('Linux.')    default:    println(os)     }    // TODO: replace with match expressions | 用匹配表达式替换</code></pre>   <p>switch语句是编写if - else语句序列的较短方式。它运行第一种情况，其值等于条件表达式。</p>   <blockquote>    <p>注意：与C不同，每个代码块的末尾都不需要 break。</p>   </blockquote>   <h2><a id="Structs__291"></a>Structs 结构体</h2>   <ul>    <li>简单使用</li>   </ul>   <pre><code>    struct Point {    x int    y int     }         p := Point{    x: 10     y: 20     }     println(p.x) // 访问结构体对象的某字段</code></pre>   <ul>    <li>结构体的内存是在堆上分配，需要获取结构体指针，使用 &amp;前缀:</li>   </ul>   <pre><code>    pointer := &amp;Point{10, 10}  // 字段少于3的结构体的简化初始化方式    println(pointer.x) // 指针访问结构体属性方式与默认的方式相同 </code></pre>   <ul>    <li>V 语言没有子类，但它支持嵌入式结构：</li>   </ul>   <pre><code>    // TODO: 这个功能将与6月末实施    struct Button {    Widget    title string    }        button := new_button('Click me')    button.set_pos(x, y)        // 没有潜入式，我们需要这么做    button.widget.set_pos(x,y)</code></pre>   <h3><a id="_326"></a>结构体-访问修饰符</h3>   <p>结构字段默认是私有的和不可变的（使结构也是不可变的）。<br> 他们可以被 pub(可被访问的)和mut(可被修改的) 修饰。总共有5种可能的选择：</p>   <pre><code>    struct Foo {    a int     // 私有的 不可变的 (default)     mut:     b int     // 私有的 可变的    c int     // (你可以一次列出，相同访问修饰符的字段)       pub:     d int     // 公开的，不可变的    pub mut:     e int     // 公开的，但仅在父模块中可变     pub mut mut:     f int   // 公开的，父模块内部和外部都可变     }                 // (不建议使用，这就是为什么它如此冗长的原因) </code></pre>   <ul>    <li>例子，string 在 builtin 模块中定义的类型：</li>   </ul>   <pre><code>struct string {str byteptrpub:len int}// 很容易看出 string 内容是不可变的</code></pre>   <ul>    <li>错误示例：</li>   </ul>   <pre><code>fn main() {str := 'hello' len := str.len // OK  str.len++      // 编译出错}//具有字符串数据的字节指针根本无法在外部builtin访问。 len字段是公开的，但不是可变的。</code></pre>   <h3><a id="_364"></a>结构体-方法</h3>   <p>V 没有 class概念，但是我们可以在结构体上定义方法。<br> 方法是具有特殊行参的函数。特殊行参 放在 fn关键字 和方法名之间的参数列表中。</p>   <ul>    <li>简单示例（can_register 方法具有 User 类型的 特殊行参 u）：     <ul>      <li>不和其他语言一样，使用 self 或 this ，而是使用短名称，当然最好一个字母长</li>     </ul> </li>   </ul>   <pre><code>struct User {age int } fn (u User) can_register() bool {return u.age &gt; 16 } user := User{age: 10} println(user.can_register()) // ==&gt; "false"  user2 := User{age: 20} println(user2.can_register()) // ==&gt; "true"  </code></pre>   <h2><a id="_386"></a>纯函数</h2>   <p>V语言的函数默认是纯函数，也就是函数的输出结果只依赖输入的参数，并且没有其它的影响。<br> 因为V语言没有全局变量，且所有的参数默认都是只读的，即使传入的引用也是默认只读的。<br> 然后V语言并不纯的函数式语言。我们可以通过mut来修饰行参数，使得可以被修改：</p>   <pre><code>struct User {mut:is_registered bool } fn (u mut User) register() {u.is_registered = true } mut user := User{} println(user.is_registered) // ==&gt; "false"  user.register() println(user.is_registered) // ==&gt; "true" </code></pre>   <ul>    <li>如上示例：特殊行参(这里被修饰了第一个参数) 被mut 修饰，为可变的。因此 register() 可以更改用户对象。     <ul>      <li>当然也适用于函数的普通参数,示例如下:</li>     </ul> </li>   </ul>   <pre><code>fn multiply_by_2(arr mut []int) {for i := 0; i &lt; arr.len; i++ {arr[i] *= 2}}mut nums := [1, 2, 3]multiply_by_2(mut nums)println(nums) // ==&gt; "[2, 4, 6]"</code></pre>   <blockquote>    <p>注意1：您必须在执行函数之前 声明一个 mut 的nums 变量。这清楚的表明被调用的函数将要修改该值！</p>   </blockquote>   <ul>    <li>最好使用返回值而不是修改参数。修改参数只应在应用程序的性能关键部分中完成，以减少分配和复制。     <ul>      <li>使用user.register()或user = register(user) 代替register(mut user)</li>     </ul> </li>   </ul>   <pre><code>fn register(u User) User { return { u | is_registered: true } }user = register(user) </code></pre>   <h2><a id="_Constants_433"></a>常量 Constants</h2>   <p>常量声明为const。它们只能在模块级别上（函数body外）定义。<br> 常量名称必须大写。这有助于将它们与变量区分开来<br> 永远不能改变常量值。</p>   <ul>    <li>简单使用</li>   </ul>   <pre><code>        const (    PI    = 3.14    World = '世界'    )         println(PI)    println(World)</code></pre>   <ul>    <li>复杂类型的常量定义(这相对大多数语言更灵活)</li>   </ul>   <pre><code>    struct Color {            r int            g int            b int    }        fn (c Color) str() string { return '{$c.r, $c.g, $c.b}' } //重写 str方法        fn rgb(r, g, b int) Color { return Color{r: r, g: g, b: b} }        const (            Numbers = [1, 2, 3]                Red  = Color{r: 255, g: 0, b: 0} //结构体常量            Blue = rgb(0, 0, 255)//结构体常量    )        println(Numbers)    println(Red)    println(Blue)</code></pre>   <blockquote>    <p>不支持使用全局变量，因此这种方式显得非常有必要</p>   </blockquote>   <h2><a id="_Modules_478"></a>模块 Modules</h2>   <p>V 语言是一个模块化的语言。鼓励创建可重用的模块，而且创建模块也非常简单。</p>   <ul>    <li>新模块创建，请创建一个包含你模块名的目录 和 .v 代码文件：</li>   </ul>   <pre><code>cd ~/code/modulesmkdir mymodulevim mymodule/mymodule.v</code></pre>   <pre><code>// mymodule.vmodule mymodule// 要用 pub修饰符修饰，外部才能访问该 模块函数pub fn say_hi() {println('hello from mymodule!')}</code></pre>   <ul>    <li> <p>模块的编译：</p>     <ul>      <li>您可以在 你定义好的 模块目录下创建 更多的 .v模块文件</li>      <li>构建命令 v -lib ~/code/modules/mymodule ，然后就可以在代码中使用它</li>     </ul> </li>    <li> <p>模块的使用：</p> </li>   </ul>   <pre><code>    module main        import mymodule        fn main() {    mymodule.say_hi()    }</code></pre>   <pre><code>请注意，每次调用外部函数时都必须指定模块。这看起来似乎很冗长，但它使代码更易读，更容易理解，因为它始终清楚的表达出从哪个模块调用哪个函数。特别是在大型代码库中。模块名称应短，不超过10个字符。模块不允许循环依赖。您可以在任何地方创建模块 ,所有的模块都将静态编译到单一的可执行程序中。</code></pre>   <h2><a id="_Interfaces_519"></a>接口 Interfaces</h2>   <ul>    <li>简单使用：     <blockquote>      <p>类型通过实现接口同名的方法（注意返回值也相同类型）。和Go语言一样,V语言也是隐式接口，类型不需要显式实现接口，没有“implements”关键字。</p>     </blockquote> </li>   </ul>   <pre><code>    struct Dog {}    struct Cat {}        fn (d Dog) speak() string {     return 'woof'    }         fn (c Cat) speak() string {     return 'meow'     }         interface Speaker {    speak() string    }        fn perform(s Speaker) {     println(s.speak())    }         dog := Dog{}     cat := Cat{}     perform(dog) // ==&gt; "woof"     perform(cat) // ==&gt; "meow"     </code></pre>   <h2><a id="_549"></a>枚举</h2>   <pre><code>enum Color {red green blue } mut color := Color.red// 下面的写法要注意了，V语言知道 color的类型为Color，所以这个地方不需要使用 Color.greencolor = .green println(color) // ==&gt; "1"  TODO: print "green"?  </code></pre>   <h2><a id="___562"></a>可选类型 和 错误处理</h2>   <p>V语言针对函数返回值增加了一个可选的属性，这样可以用于处理失败的情况</p>   <ul>    <li>可以用最小工作量来升级一个可选类型返回的函数：只需要在 返回值类型声明的前面添加一个 ?,这样就可以区别错误和真正的返回值。     <ul>      <li>当然如果你不需要返回错误，可以简单的使用 return None;（TODO：None尚未实现）</li>     </ul> </li>   </ul>   <blockquote>    <p>这是处理V中错误的主要手段。函数的返回值依然是值，但是错误处理要简洁很多。</p>   </blockquote>   <pre><code>struct User {id int name string} struct Repo {users []User } fn new_repo() Repo {return Repo {users: [User{1, 'Andrew'}, User {2, 'Bob'}, User {10, 'Charles'}]}} fn (r Repo) find_user_by_id(id int) ?User { for user in r.users {if user.id == id {// V 自动将其包装为 Option 类型  return user } } return error('User $id not found') } fn main() {repo := new_repo() user := repo.find_user_by_id(10) or { // Option类型必须使用 `or` 的代码块hold住；return  // `or` 代码块必须以， return ,break,或 continue 关键字结束 } println(user.id) // ==&gt; "10"  println(user.name) // ==&gt; 'Charles'}</code></pre>   <ul>    <li>当然，错误还可以继续传播：</li>   </ul>   <pre><code>resp := http.get(url)?println(resp.body)</code></pre>   <blockquote>    <p>上面例子中，http.get return ?http.Response 的可选类型，如果错误发生，将传播到调用函数，这里是导致main函数抛出异常。<br> 上面代码是下面代码的简写：</p>   </blockquote>   <pre><code>resp := http.get(url) or {panic(err)}println(resp.body)</code></pre>   <h2><a id="_Generics_7_620"></a>范型 Generics （预计7月上线）</h2>   <p>为了方便阅读, 允许使用 ⟨⟩ 来代替 &lt;&gt;. vfmt 自动替换 ⟨⟩ 为&lt;&gt; .</p>   <pre><code>struct Repo⟨T⟩ {db DB}fn new_repo⟨T⟩(db DB) Repo⟨T⟩ {return Repo⟨T⟩{db: db}}// 这是一个范型函数. V 语言可以使用任意类型的范型  fn (r Repo⟨T⟩) find_by_id(id int) ?T {  table_name := T.name // 在此示例中，获取类型的名称会得到表明 return r.db.query_one⟨T⟩('select * from $table_name where id = ?', id)}db := new_db()users_repo := new_repo⟨User⟩(db)posts_repo := new_repo⟨Post⟩(db)user := users_repo.find_by_id(1)? post := posts_repo.find_by_id(1)? </code></pre>   <h2><a id="_645"></a>并发</h2>   <p>并发模型与Go非常相似。要foo()同时运行，只需调用它go foo()，便会在新的系统线程执行该函数 .<br> 很快 将实现 goroutines 和 scheduler 。</p>   <h2><a id="JSON__650"></a>JSON 解析</h2>   <p>JSON 在今天已经非常流行，这也是为什么要内置json支持的原因。</p>   <ul>    <li>json.decode 函数的第一个参数是要解码的类型，第二个参数是 json字符串。</li>    <li>json 用于生成json 编码和解码的代码，不使用运行时反射，这也会带来更好的性能。</li>   </ul>   <pre><code>struct User {name stringage  int foo  Foo    [skip]  //使用 skip 来跳过某些字段} data := '{ "name": "Frodo", "age": 25 }'user := json.decode(User, data) or {eprintln('Failed to decode json')return } println(user.name)println(user.age) </code></pre>   <h2><a id="_671"></a>单元测试</h2>   <p>所有的单元测试都必须放在 *<em>test.v 文件中，并且测试函数必须使用 test</em> 开头方式命名。</p>   <ul>    <li>若要运行 测试文件 hello_test.v 用来测试某整个模块，请执行命令 v test mymodule</li>   </ul>   <pre><code>// hello.v fn hello() string {return 'Hello world'} // hello_test.v fn test_hello() {    assert hello() == 'Hello world'} </code></pre>   <h2><a id="_686"></a>内存管理</h2>   <p>V语言没有自动内存回收（GC）和引用计数，V语言会在编译阶段完成必要的清理工作。例如：</p>   <pre><code>fn draw_text(s string, x, y int) {...}fn draw_scene() {... draw_text('hello $name1', 10, 10)draw_text('hello $name2', 100, 10)draw_text(strings.repeat('X', 10000), 10, 50)... }</code></pre>   <blockquote>    <p>字符串 string 生命周期不会超出 draw_text 函数，因此当函数执行完时，它们将会被清除。实际上,前面两次调用根本不会导致任何分配，因为这两个字符串很小，V语言会使用提前准备好的缓冲区构造字符串。</p>   </blockquote>   <ul>    <li> <p>对于更复杂的情况，需要手动内存管理，我们将很快实现解决。</p> </li>    <li> <p>V 将在运行时检测并报告内存泄露，例如：要清除数组，请使用 free() 方法：</p> </li>   </ul>   <pre><code>   numbers := [0; 1000000]    ...   numbers.free() </code></pre>   <h2><a id="_Defer_714"></a>延迟 Defer</h2>   <ul>    <li>TODO</li>   </ul>   <h2><a id="vfmt_717"></a>vfmt</h2>   <ul>    <li>TODO</li>   </ul>   <h1><a id="_720"></a>进阶内容</h1>   <h2><a id="VC__722"></a>V语言中调用C 函数</h2>   <pre><code>#flag -lsqlite3#include "sqlite3.h"struct C.sqlite3 struct C.sqlite3_stmt fn C.sqlite3_column_int(C.sqlite_stmt, int) int fn main() {path := 'sqlite3_users.db' db := &amp;C.sqlite3{} C.sqlite3_open(path.cstr(), &amp;db)query := 'select count(*) from users' stmt := &amp;C.sqlite3_stmt{} C.sqlite3_prepare_v2(db, query.cstr(), - 1, &amp;stmt, 0)C.sqlite3_step(stmt) nr_users := C.sqlite3_column_int(res, 0)C.sqlite3_finalize(res)println(nr_users) } </code></pre>   <ul>    <li>C strings 可以转换为 “string（cstring）”的V字符串</li>   </ul>   <h2><a id="if_750"></a>预编译if语句</h2>   <p>预编译 使用 $if 。现在它只能用于检测操作系统。</p>   <pre><code>$if windows {println('Windows')  }  $if linux {println('Linux') } $if mac {println('macOS') }</code></pre>   <h2><a id="_764"></a>代码反射</h2>   <p>有内置的 json支持已经是很不错的选择，但是V还允许使用者为任意添加高效的序列化程序。</p>   <pre><code>// TODO: 计划6月上线fn decode&lt;T&gt;(data string) T {        mut result := T{}        for field in T.fields {                if field.typ == 'string' {                        result.$field = get_string(data, field.name)                } else if field.typ == 'int' {                        result.$field = get_int(data, field.name)                }        }        return result}// 生成:fn decode_User(data string) User {        mut result := User{}        result.name = get_string(data, 'name')        result.age = get_int(data, 'age')        return result}</code></pre>   <h2><a id="_790"></a>有限的运算符重载</h2>   <p>运算符重载违背了V的简单性和可预测性的理念。但由于科学和图形应用程序属于V域，因此为了提高可读性，运算符重载非常重要:</p>   <blockquote>    <p>a.add(b).add(c.mul(d))比 a + b + c * d 可读性差得多了。</p>   </blockquote>   <pre><code>struct Vec {x inty int}fn (a Vec) str() string { return '{$a.x, $a.y}' }fn (a Vec) + (b Vec) Vec {return Vec {a.x + b.x, a.y + b.y }}fn (a Vec) - (b Vec) Vec {return Vec {a.x - b.x, a.y - b.y}}fn main() { a := Vec{2, 3}b := Vec{4, 5}println(a + b) // ==&gt; "{6, 8}"  println(a - b) // ==&gt; "{-2, -2}"  } </code></pre>   <ul>    <li>为了提高安全性和可维护性，运算符重载 有几个局限性：     <ul>      <li>只能使用 +,=,* ,/ 运算符的重载</li>      <li>不允许运算符重载函数内调用其他函数</li>      <li>运算符重载函数无法修改其参数</li>      <li>运算符函数的两个参数必须具有相同类型，（同V中所有运算符一样,str+num =&gt; error）</li>     </ul> </li>   </ul>   <h2><a id="_831"></a>内联汇编</h2>   <p>TODO 尚未实现</p>   <pre><code>fn main() {a := 10asm x64 {mov eax, [a]add eax, 10mov [a], eax}}</code></pre>   <h2><a id="_CCV_844"></a>将 C/C++翻译成V</h2>   <p>TODO: 将C翻译为V将于6月上市。C ++到V将于今年晚些时候推出</p>   <blockquote>    <p>V可以将您的C / C ++代码转换为可读的V代码。让我们先创建一个简单的程序test.cpp</p>   </blockquote>   <pre><code>#include &lt;vector&gt;#include &lt;string&gt;#include &lt;iostream&gt;int main() {        std::vector&lt;std::string&gt; s;        s.push_back("V is ");        s.push_back("awesome");        std::cout &lt;&lt; s.size() &lt;&lt; std::endl;        return 0;}</code></pre>   <blockquote>    <p>允许命令 v translate test.cpp 将会得到 test.v:</p>   </blockquote>   <pre><code>fn main {        mut s := []s &lt;&lt; 'V is 's &lt;&lt; 'awesome'println(s.len) } </code></pre>   <blockquote>    <p>一个在线C / C ++到V的翻译即将推出.</p>   </blockquote>   <ul>    <li>什么时候应该翻译C代码，什么时候应该从V调用C代码？     <ul>      <li>如果您有经过良好编写且经过良好测试的C代码，那么您当然可以直接从V调用此C代码</li>      <li>将其翻译为V有以下几个优点：       <ul>        <li>如果您计划开发该代码库，那么现在您可以使用一种语言编写所有内容，这样可以更安全，更容易开发</li>        <li>交叉编译(mac 编译打包 win程序)变得更加容易。您根本不必担心它。</li>        <li>没有更多的构建标志和包含文件。</li>       </ul> </li>     </ul> </li>   </ul>   <h2><a id="_881"></a>热门代码重加载</h2>   <p>TODO</p>   <h2><a id="_mac__win_883"></a>交叉编译 (mac 编译打包 win程序)</h2>   <ul>    <li> <p>要交叉编译项目，只需简单执行命令:</p>     <ul>      <li>v -os windows .</li>      <li>v -os linux .</li>     </ul>     <blockquote>      <p>（暂时无法对macOS进行交叉编译。）</p>     </blockquote> </li>    <li> <p>如果您没有任何C依赖项，那就是您需要做的。即使在使用ui模块或图形应用程序编译GUI应用程序时也可以使用 gg。</p> </li>    <li> <p>您需要安装Clang，LLD链接器，并下载包含库和包含Windows和Linux文件的zip文件。V将为您提供链接。</p> </li>   </ul>   <h2><a id="Vshell_6_894"></a>V中的跨平台shell脚本 (6月下旬)</h2>   <ul>    <li> <p>V可以用作Bash的替代方案来编写部署脚本，构建脚本等。</p> </li>    <li> <p>使用V的优势在于语言的简单性和可预测性以及跨平台支持。“V脚本”在类Unix系统和Windows上运行。</p> </li>    <li> <p>使用#v指令启动程序。它将使os 模块中的所有函数全局化（您可以使用ls() <a href="http://xn--os-bf3ck82gsoa.ls" rel="noopener" data-token="d255ec55d1df311d40165029587148a4" target="_blank">来代替os.ls</a>() ）例如：</p> </li>   </ul>   <pre><code>    #v         rm('build/*')     // 效果同:      for file in ls('build/') {    rm(file)     }         mv('*.v', 'build/')     // 效果同:      for file in ls('.') {    if file.ends_with('.v') {     mv(file, 'build/')     }     } </code></pre>   <blockquote>    <p>现在您可以像普通的V程序一样编译它，并获得可以在任何地方部署和运行的可执行文件： v deploy.v &amp;&amp; ./deploy<br> (当然也可以使用传统脚本运行方式来允许它： v run deploy.v)</p>   </blockquote>   <h2><a id="1_922"></a>附录1：关键字</h2>   <p>V 拥有22个关键字</p>   <pre><code>break const  continue defer else enum fnforgogotoifimportin interface match module mut or pub returnstructtype </code></pre>   <h2><a id="2_949"></a>附录2：运算符</h2>   <ul>    <li> <p>运算符</p>     <table>      <thead>       <tr>        <th>运算符</th>        <th align="right">含义</th>        <th align="center">支持类型</th>       </tr>      </thead>      <tbody>       <tr>        <td>+</td>        <td align="right">sum</td>        <td align="center">integers, floats, strings</td>       </tr>       <tr>        <td>-</td>        <td align="right">difference</td>        <td align="center">integers, floats</td>       </tr>       <tr>        <td>*</td>        <td align="right">product</td>        <td align="center">integers, floats</td>       </tr>       <tr>        <td>/</td>        <td align="right">quotient</td>        <td align="center">integers, floats</td>       </tr>       <tr>        <td>%</td>        <td align="right">remainder</td>        <td align="center">integers</td>       </tr>       <tr>        <td>&amp;</td>        <td align="right">bitwise AND</td>        <td align="center">integers</td>       </tr>       <tr>        <td>｜</td>        <td align="right">bitwise OR</td>        <td align="center">integers, floats</td>       </tr>       <tr>        <td>^</td>        <td align="right">bitwise XOR</td>        <td align="center">integers</td>       </tr>       <tr>        <td>&lt;&lt;</td>        <td align="right">left shift</td>        <td align="center">integer &lt;&lt; unsigned integer</td>       </tr>       <tr>        <td>&gt;&gt;</td>        <td align="right">right shift</td>        <td align="center">integer &gt;&gt; unsigned integer</td>       </tr>      </tbody>     </table></li>    <li> <p>运算符优先级</p> </li>   </ul>   <table>    <thead>     <tr>      <th>优先级</th>      <th align="center">运算符</th>     </tr>    </thead>    <tbody>     <tr>      <td>5</td>      <td align="center">* / % &lt;&lt; &gt;&gt; &amp;</td>     </tr>     <tr>      <td>4</td>      <td align="center">+ - ｜ ^</td>     </tr>     <tr>      <td>3</td>      <td align="center">== != &lt; &lt;= &gt; &gt;=</td>     </tr>     <tr>      <td>2</td>      <td align="center">&amp;&amp;</td>     </tr>     <tr>      <td>1</td>      <td align="center">｜｜</td>     </tr>    </tbody>   </table>  <ul>    <li>赋值运算符     <blockquote>      <p>+=   -=   *=   /=   %=   &amp;=   |=   ^=   &gt;&gt;=   &lt;&lt;=</p>     </blockquote> </li>   </ul>  </div>  <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e44c3c0e64.css" rel="stylesheet"> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Centos下安装vlang运行环境-新手必看</title>
    <link href="https://vlanguage.cn/2019/07/03/weixin_42512337_94554250.html"/>
    <id>https://vlanguage.cn/2019/07/03/weixin_42512337_94554250.html</id>
    <published>2019-07-03T00:00:00.000Z</published>
    <updated>2019-07-22T05:05:31.033Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/weixin_42512337/article/details/94554250&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/weixin_42512337/article/details/94554250&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div id="content_views" class="markdown_views prism-atom-one-dark">   <!-- flowchart 箭头图标 勿删 -->   <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">    <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"/>   </svg>   <h2><a id="vlang_2"></a>磨刀霍霍向vlang</h2>   <p>工欲善其事必先利其器。在开始v语言相关语法知识学习之前，我们首先需要部署好vlang的运行环境。目前vlang语言只支持linux和mac系统，笔者本人选择使用Centos，下面是基本的安装部署步骤：</p>   <ul>    <li>安装clang编译器</li>    <li>下载v语言源码</li>    <li>修改默认编译器</li>    <li>编译源码</li>    <li>建立软链接</li>    <li>测试安装结果</li>    <li>源码更新</li>   </ul>   <p>现在我们对上述安装步骤展开具体介绍。</p>   <h4><a id="1_clang_16"></a>1. 安装clang编译器</h4>   <p>为了能编译v语言，需要先安装对应的编译器，目前比较流行的编译器有clang或者GCC，笔者这里选择使用clang。Clang是一个支持C语言、C++、Objective-C语言的轻量级编译器。</p>   <ul>    <li>首先检查当前Centos环境是否有安装clang编译器</li>   </ul>   <pre><code class="prism language-javascript"><span class="token punctuation">[</span>root@localhost iris<span class="token punctuation">]</span># which clang<span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span>which<span class="token punctuation">:</span> no clang <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>sbin<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>sbin<span class="token punctuation">:</span><span class="token operator">/</span>bin<span class="token punctuation">:</span><span class="token operator">/</span>sbin<span class="token punctuation">:</span><span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>go<span class="token operator">/</span>bin<span class="token punctuation">:</span><span class="token operator">/</span>mnt<span class="token operator">/</span>hgfs<span class="token operator">/</span>go<span class="token operator">/</span>bin<span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>iris<span class="token operator">/</span><span class="token punctuation">.</span>local<span class="token operator">/</span>bin<span class="token punctuation">:</span><span class="token operator">/</span>home<span class="token operator">/</span>iris<span class="token operator">/</span>bin<span class="token punctuation">)</span></code></pre>   <ul>    <li>如上表示没有安装clang编译器，可通过yum进行安装</li>   </ul>   <pre><code class="prism language-javascript"><span class="token punctuation">[</span>root@localhost iris<span class="token punctuation">]</span># yum install <span class="token operator">-</span>y clang已加载插件：fastestmirror<span class="token punctuation">,</span> langpacksLoading mirror speeds <span class="token keyword">from</span> cached hostfile <span class="token operator">*</span> base<span class="token punctuation">:</span> mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com <span class="token operator">*</span> extras<span class="token punctuation">:</span> mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com <span class="token operator">*</span> updates<span class="token punctuation">:</span> mirrors<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com软件包 clang<span class="token operator">-</span><span class="token number">3.4</span><span class="token number">.2</span><span class="token operator">-</span><span class="token number">9.</span>el7<span class="token punctuation">.</span>x86_64 已安装并且是最新版本无须任何处理</code></pre>   <ul>    <li>查看clang版本</li>   </ul>   <pre><code class="prism language-javascript"><span class="token punctuation">[</span>root@localhost iris<span class="token punctuation">]</span># clang <span class="token operator">-</span>vclang version <span class="token number">3.4</span><span class="token number">.2</span> <span class="token punctuation">(</span>tags<span class="token operator">/</span><span class="token constant">RELEASE_34</span><span class="token operator">/</span>dot2<span class="token operator">-</span>final<span class="token punctuation">)</span>Target<span class="token punctuation">:</span> x86_64<span class="token operator">-</span>redhat<span class="token operator">-</span>linux<span class="token operator">-</span>gnuThread model<span class="token punctuation">:</span> posixFound candidate <span class="token constant">GCC</span> installation<span class="token punctuation">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>lib<span class="token operator">/</span>gcc<span class="token operator">/</span>x86_64<span class="token operator">-</span>redhat<span class="token operator">-</span>linux<span class="token operator">/</span><span class="token number">4.8</span><span class="token number">.2</span>Found candidate <span class="token constant">GCC</span> installation<span class="token punctuation">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>lib<span class="token operator">/</span>gcc<span class="token operator">/</span>x86_64<span class="token operator">-</span>redhat<span class="token operator">-</span>linux<span class="token operator">/</span><span class="token number">4.8</span><span class="token number">.5</span>Found candidate <span class="token constant">GCC</span> installation<span class="token punctuation">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>gcc<span class="token operator">/</span>x86_64<span class="token operator">-</span>redhat<span class="token operator">-</span>linux<span class="token operator">/</span><span class="token number">4.8</span><span class="token number">.2</span>Found candidate <span class="token constant">GCC</span> installation<span class="token punctuation">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>lib<span class="token operator">/</span>gcc<span class="token operator">/</span>x86_64<span class="token operator">-</span>redhat<span class="token operator">-</span>linux<span class="token operator">/</span><span class="token number">4.8</span><span class="token number">.5</span>Selected <span class="token constant">GCC</span> installation<span class="token punctuation">:</span> <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>lib<span class="token operator">/</span>gcc<span class="token operator">/</span>x86_64<span class="token operator">-</span>redhat<span class="token operator">-</span>linux<span class="token operator">/</span><span class="token number">4.8</span><span class="token number">.5</span></code></pre>   <h4><a id="2_V_47"></a>2. 下载V语言源码</h4>   <pre><code class="prism language-javascript"><span class="token punctuation">[</span>root@localhost iris<span class="token punctuation">]</span># git clone https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>vlang<span class="token operator">/</span>v正克隆到 <span class="token string">'V'</span><span class="token operator">...</span>remote<span class="token punctuation">:</span> Enumerating objects<span class="token punctuation">:</span> <span class="token number">39</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>remote<span class="token punctuation">:</span> Counting objects<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">39</span><span class="token operator">/</span><span class="token number">39</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>remote<span class="token punctuation">:</span> Compressing objects<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">28</span><span class="token operator">/</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span>remote<span class="token punctuation">:</span> Total <span class="token number">1924</span> <span class="token punctuation">(</span>delta <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> reused <span class="token number">29</span> <span class="token punctuation">(</span>delta <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pack<span class="token operator">-</span>reused <span class="token number">1885</span>接收对象中<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1924</span><span class="token operator">/</span><span class="token number">1924</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1.23</span>MiB <span class="token operator">|</span> <span class="token number">247.00</span> KiB<span class="token operator">/</span>s<span class="token punctuation">,</span> done<span class="token punctuation">.</span>处理 delta 中<span class="token punctuation">:</span> <span class="token number">100</span><span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">1115</span><span class="token operator">/</span><span class="token number">1115</span><span class="token punctuation">)</span><span class="token punctuation">,</span> done<span class="token punctuation">.</span></code></pre>   <h4><a id="3__58"></a>3. 修改默认编译器</h4>   <p>这里先修改编译器为clang，否则后面编译源码的时候可能会出错。</p>   <pre><code class="prism language-javascript"><span class="token punctuation">[</span>root@localhost iris<span class="token punctuation">]</span># cd <span class="token operator">/</span>usr<span class="token operator">/</span>bin<span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span># rm ccrm<span class="token punctuation">:</span> 是否删除符号链接 <span class="token string">"cc"</span><span class="token operator">?</span> y<span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span># ln <span class="token operator">-</span>s clang cc</code></pre>   <h4><a id="4__66"></a>4. 编译源码</h4>   <p>进入到vlang语言对应的下载目录下，通过make命令编译源码。</p>   <pre><code class="prism language-javascript"><span class="token punctuation">[</span>root@localhost iris<span class="token punctuation">]</span># cd v<span class="token punctuation">[</span>root@localhost v<span class="token punctuation">]</span># makerm <span class="token operator">-</span>f v<span class="token punctuation">.</span>c v vprodcurl <span class="token operator">-</span>Os https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com<span class="token operator">/</span>vlang<span class="token operator">/</span>vc<span class="token operator">/</span>master<span class="token operator">/</span>v<span class="token punctuation">.</span>ccc <span class="token operator">-</span>march<span class="token operator">=</span>native <span class="token operator">-</span>std<span class="token operator">=</span>gnu11 <span class="token operator">-</span>w <span class="token operator">-</span>o v v<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token operator">/</span>v <span class="token operator">-</span>o v compilerrm v<span class="token punctuation">.</span>c<span class="token constant">V</span> has been successfully built</code></pre>   <h4><a id="5__78"></a>5. 建立软链接</h4>   <p>软链接ln是Linux中的一个重要命令，作用是为某一个文件在另外一个位置建立一个不同的链接，其本质是实现文件的共享。通过软链接，当我们需要在其他目录使相同的文件时，不需要在每一个需要的目录下都放一个相同的文件，只需要在某个固定的目录放上该文件，然后在其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间。</p>   <pre><code class="prism language-javascript"><span class="token punctuation">[</span>root@localhost iris<span class="token punctuation">]</span># ln <span class="token operator">-</span>s <span class="token operator">/</span>home<span class="token operator">/</span>iris<span class="token operator">/</span>v<span class="token operator">/</span>v <span class="token operator">/</span>usr<span class="token operator">/</span>local<span class="token operator">/</span>bin<span class="token operator">/</span>v</code></pre>   <p>这里 /home/iris/v/v 表示步骤 5 中编译成功后生成v.exe文件，/usr/local/bin/v 为我们需要使用v.exe 的共享位置。</p>   <h4><a id="6__84"></a>6. 测试安装结果</h4>   <pre><code class="prism language-javascript"><span class="token punctuation">[</span>root@localhost v<span class="token punctuation">]</span># cd examples<span class="token punctuation">[</span>root@localhost examples<span class="token punctuation">]</span># lsgame_of_life   json<span class="token punctuation">.</span>v           news_fetcher<span class="token punctuation">.</span>v      tetrishello_world    links_scraper<span class="token punctuation">.</span>v  rune<span class="token punctuation">.</span>v              VCasinohello_world<span class="token punctuation">.</span>v  log<span class="token punctuation">.</span>v            terminal_control<span class="token punctuation">.</span>v  word_counter<span class="token punctuation">[</span>root@localhost examples<span class="token punctuation">]</span># v run hello_world<span class="token punctuation">.</span>v<span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span> running hello_world <span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span><span class="token operator">===</span>Hello<span class="token punctuation">,</span> World<span class="token operator">!</span></code></pre>   <h4><a id="7__95"></a>7. 更新源码</h4>   <pre><code class="prism language-javascript"><span class="token punctuation">[</span>root@localhost v<span class="token punctuation">]</span># git pull origin master来自 https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>vlang<span class="token operator">/</span>v <span class="token operator">*</span> branch            master     <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token constant">FETCH_HEAD</span>Already up<span class="token operator">-</span>to<span class="token operator">-</span>date<span class="token punctuation">.</span><span class="token punctuation">[</span>root@localhost v<span class="token punctuation">]</span># makerm <span class="token operator">-</span>f v<span class="token punctuation">.</span>c v vprodcurl <span class="token operator">-</span>Os https<span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span>raw<span class="token punctuation">.</span>githubusercontent<span class="token punctuation">.</span>com<span class="token operator">/</span>vlang<span class="token operator">/</span>vc<span class="token operator">/</span>master<span class="token operator">/</span>v<span class="token punctuation">.</span>ccc <span class="token operator">-</span>march<span class="token operator">=</span>native <span class="token operator">-</span>std<span class="token operator">=</span>gnu11 <span class="token operator">-</span>w <span class="token operator">-</span>o v v<span class="token punctuation">.</span>c<span class="token punctuation">.</span><span class="token operator">/</span>v <span class="token operator">-</span>o v compilerrm v<span class="token punctuation">.</span>c<span class="token constant">V</span> has been successfully built</code></pre>   <h2><a id="_109"></a>后记</h2>   <p>以上就是vlang运行环境全部的安装配置过程。笔者发现在安装过程中有时候执行make命令会报错，除了没有修改默认编译器这个原因之外，有时候可能是源码本身的问题，通过更新源码步骤后重新make就能成功。下一章开始我们将正式开始进入vlang语言的语法学习，一起来感受vlang的魅力吧！</p>  </div>  <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e44c3c0e64.css" rel="stylesheet"> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 排行榜 C 位出道：手把手教你玩转 V 语言版的俄罗斯方块！｜CSDN 博文精选...</title>
    <link href="https://vlanguage.cn/2019/07/02/csdnnews_94508510.html"/>
    <id>https://vlanguage.cn/2019/07/02/csdnnews_94508510.html</id>
    <published>2019-07-02T00:00:00.000Z</published>
    <updated>2019-07-22T05:05:28.136Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/csdnnews/article/details/94508510&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/csdnnews/article/details/94508510&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <p style="margin-left:8px;"><img alt="640?wx_fmt=gif" class="__bg_gif rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAujHRSdcX3IznHduusnhVrSgibxlHEaKkBO8A7UcDdDzAnMIA2ZLfuoUKKJrwSA8HPTejcSLotzprZw/640?wx_fmt=gif"></p>   <p style="margin-left:8px;"><span style="color:#888888;"><img alt="640?wx_fmt=jpeg" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAujMxHQBNG282I1Lbn9HMWVwQUdx0tA9mW8LiaFl35NadjFAweOVMmQiaic81kcDwGnQh471MMgYWzcGg/640?wx_fmt=jpeg"></span></p>   <p style="margin-left:8px;"><span style="color:#888888;">作者 |&nbsp;beyondma</span></p>   <p style="margin-left:8px;"><span style="color:#888888;">本文精选自 CSDN 博客，已获作者授权</span></p>   <p style="margin-left:8px;">最近 V 语言在千呼万唤之后，终于迎来开源，并<a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650723182&amp;idx=1&amp;sn=2199db14010879e83508b2ec56445527&amp;chksm=bea6a2bd89d12bab3be59896aa1ef13ef82bc9daa71205d4c7a290edd4c67e7f16dd8ac5ddd6&amp;scene=21#wechat_redirect" rel="noopener" data-token="e6ea66ea149e0d454a50258aca1f2adb" target="_blank">正式发布了首个可用版本</a>。其一经推出，便强势登顶GitHub的榜首，引来各方热议。目前V已经可以实现自我编译迭代，笔者大致了解了一下V语言，主要有如下一些特性：</p>   <p>&nbsp;</p>   <ul>   <li> <p style="margin-left:8px;">快速编译：V的CPU核心每秒编译约120万行代码；V也可以调用C，编译速度下降到≈100k行/秒/CPU；</p> </li>    <li> <p style="margin-left:8px;">安全策略：没有空；没有全局变量（意味着变量都是在函数体中声明）；没有未定义的行为；</p> </li>    <li> <p style="margin-left:8px;">性能：和C一样快，操作C没有任何成本，不支持运行时反射，编译器只有400K，整个语言及其标准库都小于400kb；V目前是用V写的，你可以在0.4秒内完成（到今年年底，这个数字将降至≈0.15秒）；</p> </li>    <li> <p style="margin-left:8px;">强大的图形能力：支持在GDI+/Cocoa绘图之上的跨平台绘图库，以及一个基于OpenGL的图形库，以支持加载复杂的三维对象与纹理。</p> </li>   </ul>  <p>&nbsp;</p>   <p style="margin-left:8px;">由于曾经做过一段时间的DIRECTX的开发，V语言对于图形能力的特性宣传最吸引笔者的注意。所以我到其官网及Github上学习了一下相关内容，按照编译运行了一下俄罗斯方块的例程，接下来向大家做一下分享。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="text-align:center;"><img alt="640?wx_fmt=gif" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAugntDr35hRZcXrBpiadmEJsQU4A5A6mwu4hFrJdSaMx9zf7No6YXVSkZC6cZdUh4xRkZlLa02dIPAA/640?wx_fmt=gif"></p>   <p style="margin-left:8px;">&nbsp;</p>   <p>&nbsp;</p>   <p>&nbsp;</p>   <p><strong><img alt="640?wx_fmt=png" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugo5SicrbBWhBdrvsmIrWNwHklazcTAqHwNiakxwcrlNUFmx9RjNGxR0ghGKMoO9ubibCib9CHYkkT2HA/640?wx_fmt=png"></strong></p>   <p style="margin-left:8px;"><strong>安装V语言</strong></p>   <p>&nbsp;</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">如果只是HELLO WORLD程序是非常简单的，只需要按照https://vlang.io官网的标准步骤来执行即可。而如果使用其图形处理能力笔者目前只在UBANTU平台测试成功——下面均是以UBANTU为例来说明。</p>   <p>&nbsp;</p>   <p style="margin-left:8px;">首先将整个项目克隆下来，再make即可：</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">&nbsp;git&nbsp;clone&nbsp;https://github.com/vlang/v&nbsp;cd&nbsp;v&nbsp;make&nbsp;<span style="color:#f82375;">cd</span>&nbsp;v&nbsp;make</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">如果报curl command not found，则执行以下命令安装curl：</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">sudo&nbsp;apt&nbsp;install&nbsp;curl</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">接下来再建立软链接：</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">sudo&nbsp;ln&nbsp;-s&nbsp;/home/machao/v/v&nbsp;/usr/local/bin/v</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">然后运行v就能进到v语言的命令行了。而如果要运行俄罗斯方块还需要以下这些库的支持：</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">sudo&nbsp;apt&nbsp;install&nbsp;libglfw3&nbsp;libglfw3-dev&nbsp;libfreetype6-dev&nbsp;libcurl3-dev</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">&nbsp;</p>   <p><strong><img alt="640?wx_fmt=png" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAugo5SicrbBWhBdrvsmIrWNwH79IdgwBuCldKPGDicPyLfzel3DBo8Odgd8VbbYiaUZG3qBz5DRhEbmgg/640?wx_fmt=png"></strong></p>   <p style="margin-left:8px;"><strong>运行俄罗斯方块</strong></p>   <p style="margin-left:8px;">&nbsp; &nbsp; &nbsp;</p>   <p>&nbsp;</p>   <p style="margin-left:8px;">接下来cd tetris，进入到俄罗斯方块的目录，先使用gedit tetris.v。来看一下v语言的代码样例，其主要部分如下：</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;glfw.init()//实始化类&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;game&nbsp;:=&nbsp;&amp;Game{gg:&nbsp;0}&nbsp;//&nbsp;TODO&nbsp;&nbsp;&nbsp;&nbsp;game.parse_tetros()&nbsp;&nbsp;&nbsp;&nbsp;game.init_game()&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;window&nbsp;:=&nbsp;glfw.create_window(glfw.WinCfg&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;WinWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;WinHeight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;'V&nbsp;Tetris'&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr:&nbsp;game&nbsp;//&nbsp;glfw&nbsp;user&nbsp;pointer&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;&nbsp;&nbsp;&nbsp;window.make_context_current()&nbsp;&nbsp;&nbsp;&nbsp;window.onkeydown(key_down)//注册事件&nbsp;&nbsp;&nbsp;&nbsp;gg.init()&nbsp;&nbsp;&nbsp;&nbsp;game.gg&nbsp;=&nbsp;gg.new_context(gg.Cfg&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;WinWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;WinHeight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use_ortho:&nbsp;true&nbsp;//&nbsp;This&nbsp;is&nbsp;needed&nbsp;for&nbsp;2D&nbsp;drawing&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;&nbsp;&nbsp;&nbsp;go&nbsp;game.run()&nbsp;//&nbsp;Run&nbsp;the&nbsp;game&nbsp;loop&nbsp;in&nbsp;a&nbsp;new&nbsp;thread&nbsp;&nbsp;&nbsp;&nbsp;gl.clear()&nbsp;//&nbsp;For&nbsp;some&nbsp;reason&nbsp;this&nbsp;is&nbsp;necessary&nbsp;to&nbsp;avoid&nbsp;an&nbsp;intial&nbsp;flickering&nbsp;&nbsp;&nbsp;&nbsp;gl.clear_color(255,&nbsp;255,&nbsp;255,&nbsp;255)&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.clear()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.clear_color(255,&nbsp;255,&nbsp;255,&nbsp;255)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.draw_scene()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.swap_buffers()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glfw.wait_events()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;window.should_close()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.destroy()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glfw.terminate()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(0)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}}fn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;move_right(dx&nbsp;int)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Reached&nbsp;left/right&nbsp;edge&nbsp;or&nbsp;another&nbsp;tetro?&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;:=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;TetroSize;&nbsp;i++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tetro&nbsp;:=&nbsp;g.tetro[i]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;:=&nbsp;tetro.y&nbsp;+&nbsp;g.pos_y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;:=&nbsp;tetro.x&nbsp;+&nbsp;g.pos_x&nbsp;+&nbsp;dx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row&nbsp;:=&nbsp;g.field[y]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;row[x]&nbsp;!=&nbsp;0&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Do&nbsp;not&nbsp;move&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;g.pos_x&nbsp;+=&nbsp;dx}fn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;delete_completed_lines()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;y&nbsp;:=&nbsp;FieldHeight;&nbsp;y&nbsp;&gt;=&nbsp;1;&nbsp;y--&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.delete_completed_line(y)&nbsp;&nbsp;&nbsp;&nbsp;}}fn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;delete_completed_line(y&nbsp;int)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;x&nbsp;:=&nbsp;1;&nbsp;x&nbsp;&lt;=&nbsp;FieldWidth;&nbsp;x++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;:=&nbsp;g.field[y]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;f[x]&nbsp;==&nbsp;0&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Move&nbsp;everything&nbsp;down&nbsp;by&nbsp;1&nbsp;position&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;yy&nbsp;:=&nbsp;y&nbsp;-&nbsp;1;&nbsp;yy&nbsp;&gt;=&nbsp;1;&nbsp;yy--&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;x&nbsp;:=&nbsp;1;&nbsp;x&nbsp;&lt;=&nbsp;FieldWidth;&nbsp;x++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;a&nbsp;:=&nbsp;g.field[yy&nbsp;+&nbsp;1]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;b&nbsp;:=&nbsp;g.field[yy]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[x]&nbsp;=&nbsp;b[x]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}}//&nbsp;Place&nbsp;a&nbsp;new&nbsp;tetro&nbsp;on&nbsp;topfn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;generate_tetro()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;g.pos_y&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;g.pos_x&nbsp;=&nbsp;FieldWidth&nbsp;/&nbsp;2&nbsp;-&nbsp;TetroSize&nbsp;/&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;g.tetro_idx&nbsp;=&nbsp;rand.next(BTetros.len)&nbsp;&nbsp;&nbsp;&nbsp;g.rotation_idx&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;g.get_tetro()}//&nbsp;Get&nbsp;the&nbsp;right&nbsp;tetro&nbsp;from&nbsp;cachefn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;get_tetro()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;idx&nbsp;:=&nbsp;g.tetro_idx&nbsp;*&nbsp;TetroSize&nbsp;*&nbsp;TetroSize&nbsp;+&nbsp;g.rotation_idx&nbsp;*&nbsp;TetroSize&nbsp;&nbsp;&nbsp;&nbsp;g.tetro&nbsp;=&nbsp;g.tetros_cache.slice(idx,&nbsp;idx&nbsp;+&nbsp;TetroSize)}fn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;drop_tetro()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;:=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;TetroSize;&nbsp;i++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tetro&nbsp;:=&nbsp;g.tetro[i]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;:=&nbsp;tetro.x&nbsp;+&nbsp;g.pos_x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;:=&nbsp;tetro.y&nbsp;+&nbsp;g.pos_y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Remember&nbsp;the&nbsp;color&nbsp;of&nbsp;each&nbsp;block&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO:&nbsp;g.field[y][x]&nbsp;=&nbsp;g.tetro_idx&nbsp;+&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;row&nbsp;:=&nbsp;g.field[y]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[x]&nbsp;=&nbsp;g.tetro_idx&nbsp;+&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;}}fn&nbsp;(g&nbsp;&amp;Game)&nbsp;draw_tetro()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;:=&nbsp;0;&nbsp;i&nbsp;&lt;&nbsp;TetroSize;&nbsp;i++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tetro&nbsp;:=&nbsp;g.tetro[i]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.draw_block(g.pos_y&nbsp;+&nbsp;tetro.y,&nbsp;g.pos_x&nbsp;+&nbsp;tetro.x,&nbsp;g.tetro_idx&nbsp;+&nbsp;1)&nbsp;&nbsp;&nbsp;&nbsp;}}fn&nbsp;(g&nbsp;&amp;Game)&nbsp;draw_block(i,&nbsp;j,&nbsp;color_idx&nbsp;int)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;g.gg.draw_rect((j&nbsp;-&nbsp;1)&nbsp;*&nbsp;BlockSize,&nbsp;(i&nbsp;-&nbsp;1)&nbsp;*&nbsp;BlockSize,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockSize&nbsp;-&nbsp;1,&nbsp;BlockSize&nbsp;-&nbsp;1,&nbsp;Colors[color_idx])}fn&nbsp;(g&nbsp;&amp;Game)&nbsp;draw_field()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;:=&nbsp;1;&nbsp;i&nbsp;&lt;&nbsp;FieldHeight&nbsp;+&nbsp;1;&nbsp;i++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;:=&nbsp;1;&nbsp;j&nbsp;&lt;&nbsp;FieldWidth&nbsp;+&nbsp;1;&nbsp;j++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;:=&nbsp;g.field[i]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;f[j]&nbsp;&gt;&nbsp;0&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.draw_block(i,&nbsp;j,&nbsp;f[j])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}}fn&nbsp;(g&nbsp;&amp;Game)&nbsp;draw_scene()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;g.draw_tetro()&nbsp;&nbsp;&nbsp;&nbsp;g.draw_field()}fn&nbsp;parse_binary_tetro(t&nbsp;int)&nbsp;[]Block&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;:=&nbsp;[Block{}&nbsp;;&nbsp;4]&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cnt&nbsp;:=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;horizontal&nbsp;:=&nbsp;t&nbsp;==&nbsp;9//&nbsp;special&nbsp;case&nbsp;for&nbsp;the&nbsp;horizontal&nbsp;line&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;i&nbsp;:=&nbsp;0;&nbsp;i&nbsp;&lt;=&nbsp;3;&nbsp;i++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Get&nbsp;ith&nbsp;digit&nbsp;of&nbsp;t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;:=&nbsp;int(math.pow(10,&nbsp;3&nbsp;-&nbsp;i))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;digit&nbsp;:=&nbsp;int(t&nbsp;/&nbsp;p)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;%=&nbsp;p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Convert&nbsp;the&nbsp;digit&nbsp;to&nbsp;binary&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;j&nbsp;:=&nbsp;3;&nbsp;j&nbsp;&gt;=&nbsp;0;&nbsp;j--&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bin&nbsp;:=&nbsp;digit&nbsp;%&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;digit&nbsp;/=&nbsp;2&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;bin&nbsp;==&nbsp;1&nbsp;||&nbsp;(horizontal&nbsp;&amp;&amp;&nbsp;i&nbsp;==&nbsp;TetroSize&nbsp;-&nbsp;1)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;TODO:&nbsp;res[cnt].x&nbsp;=&nbsp;j&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;res[cnt].y&nbsp;=&nbsp;i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;point&nbsp;:=&nbsp;&amp;res[cnt]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point.x&nbsp;=&nbsp;j&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point.y&nbsp;=&nbsp;i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnt++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;res}//&nbsp;TODO:&nbsp;this&nbsp;exposes&nbsp;the&nbsp;unsafe&nbsp;C&nbsp;interface,&nbsp;clean&nbsp;upfn&nbsp;key_down(wnd&nbsp;voidptr,&nbsp;key,&nbsp;code,&nbsp;action,&nbsp;mods&nbsp;int)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;action&nbsp;!=&nbsp;2&nbsp;&amp;&amp;&nbsp;action&nbsp;!=&nbsp;1&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Fetch&nbsp;the&nbsp;game&nbsp;object&nbsp;stored&nbsp;in&nbsp;the&nbsp;user&nbsp;pointer&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;game&nbsp;:=&nbsp;&amp;Game(glfw.get_window_user_pointer(wnd))&nbsp;&nbsp;&nbsp;&nbsp;switch&nbsp;key&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;glfw.KEY_ESCAPE:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glfw.set_should_close(wnd,&nbsp;true)&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;glfw.KeyUp:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//&nbsp;Rotate&nbsp;the&nbsp;tetro&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.rotation_idx++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;game.rotation_idx&nbsp;==&nbsp;TetroSize&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.rotation_idx&nbsp;=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.get_tetro()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;game.pos_x&nbsp;&lt;&nbsp;0&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.pos_x&nbsp;=&nbsp;1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;glfw.KeyLeft:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.move_right(-1)&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;glfw.KeyRight:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.move_right(1)&nbsp;&nbsp;&nbsp;&nbsp;case&nbsp;glfw.KeyDown:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.move_tetro()&nbsp;//&nbsp;drop&nbsp;faster&nbsp;when&nbsp;the&nbsp;player&nbsp;presses&nbsp;&lt;down&gt;&nbsp;&nbsp;&nbsp;&nbsp;}}<span style="color:#808080;">//实始化类</span>&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;game&nbsp;:=&nbsp;&amp;Game{gg:&nbsp;<span style="color:#ae87fa;">0</span>}&nbsp;<span style="color:#808080;">//&nbsp;TODO</span>&nbsp;&nbsp;&nbsp;&nbsp;game.parse_tetros()&nbsp;&nbsp;&nbsp;&nbsp;game.init_game()&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;window&nbsp;:=&nbsp;glfw.create_window(glfw.WinCfg&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;WinWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;WinHeight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title:&nbsp;<span style="color:#eedc70;">'V&nbsp;Tetris'</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ptr:&nbsp;game&nbsp;<span style="color:#808080;">//&nbsp;glfw&nbsp;user&nbsp;pointer</span>&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;&nbsp;&nbsp;&nbsp;window.make_context_current()&nbsp;&nbsp;&nbsp;&nbsp;window.onkeydown(key_down)<span style="color:#808080;">//注册事件</span>&nbsp;&nbsp;&nbsp;&nbsp;gg.init()&nbsp;&nbsp;&nbsp;&nbsp;game.gg&nbsp;=&nbsp;gg.new_context(gg.Cfg&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;width:&nbsp;WinWidth&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;height:&nbsp;WinHeight&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;use_ortho:&nbsp;<span style="color:#ae87fa;">true</span>&nbsp;<span style="color:#808080;">//&nbsp;This&nbsp;is&nbsp;needed&nbsp;for&nbsp;2D&nbsp;drawing</span>&nbsp;&nbsp;&nbsp;&nbsp;})&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">go</span>&nbsp;game.run()&nbsp;<span style="color:#808080;">//&nbsp;Run&nbsp;the&nbsp;game&nbsp;loop&nbsp;in&nbsp;a&nbsp;new&nbsp;thread</span>&nbsp;&nbsp;&nbsp;&nbsp;gl.clear()&nbsp;<span style="color:#808080;">//&nbsp;For&nbsp;some&nbsp;reason&nbsp;this&nbsp;is&nbsp;necessary&nbsp;to&nbsp;avoid&nbsp;an&nbsp;intial&nbsp;flickering</span>&nbsp;&nbsp;&nbsp;&nbsp;gl.clear_color(<span style="color:#ae87fa;">255</span>,&nbsp;<span style="color:#ae87fa;">255</span>,&nbsp;<span style="color:#ae87fa;">255</span>,&nbsp;<span style="color:#ae87fa;">255</span>)&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.clear()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gl.clear_color(<span style="color:#ae87fa;">255</span>,&nbsp;<span style="color:#ae87fa;">255</span>,&nbsp;<span style="color:#ae87fa;">255</span>,&nbsp;<span style="color:#ae87fa;">255</span>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.draw_scene()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.swap_buffers()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glfw.wait_events()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">if</span>&nbsp;window.should_close()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;window.destroy()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glfw.terminate()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exit(<span style="color:#ae87fa;">0</span>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}}fn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;move_right(dx&nbsp;<span style="color:#f82375;">int</span>)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;Reached&nbsp;left/right&nbsp;edge&nbsp;or&nbsp;another&nbsp;tetro?</span>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;i&nbsp;:=&nbsp;<span style="color:#ae87fa;">0</span>;&nbsp;i&nbsp;&lt;&nbsp;TetroSize;&nbsp;i++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tetro&nbsp;:=&nbsp;g.tetro[i]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;:=&nbsp;tetro.y&nbsp;+&nbsp;g.pos_y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;:=&nbsp;tetro.x&nbsp;+&nbsp;g.pos_x&nbsp;+&nbsp;dx&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row&nbsp;:=&nbsp;g.field[y]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">if</span>&nbsp;row[x]&nbsp;!=&nbsp;<span style="color:#ae87fa;">0</span>&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;Do&nbsp;not&nbsp;move</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;g.pos_x&nbsp;+=&nbsp;dx}fn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;delete_completed_lines()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;y&nbsp;:=&nbsp;FieldHeight;&nbsp;y&nbsp;&gt;=&nbsp;<span style="color:#ae87fa;">1</span>;&nbsp;y--&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.delete_completed_line(y)&nbsp;&nbsp;&nbsp;&nbsp;}}fn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;delete_completed_line(y&nbsp;<span style="color:#f82375;">int</span>)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;x&nbsp;:=&nbsp;<span style="color:#ae87fa;">1</span>;&nbsp;x&nbsp;&lt;=&nbsp;FieldWidth;&nbsp;x++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;:=&nbsp;g.field[y]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">if</span>&nbsp;f[x]&nbsp;==&nbsp;<span style="color:#ae87fa;">0</span>&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;Move&nbsp;everything&nbsp;down&nbsp;by&nbsp;1&nbsp;position</span>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;yy&nbsp;:=&nbsp;y&nbsp;-&nbsp;<span style="color:#ae87fa;">1</span>;&nbsp;yy&nbsp;&gt;=&nbsp;<span style="color:#ae87fa;">1</span>;&nbsp;yy--&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;x&nbsp;:=&nbsp;<span style="color:#ae87fa;">1</span>;&nbsp;x&nbsp;&lt;=&nbsp;FieldWidth;&nbsp;x++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;a&nbsp;:=&nbsp;g.field[yy&nbsp;+&nbsp;<span style="color:#ae87fa;">1</span>]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;b&nbsp;:=&nbsp;g.field[yy]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a[x]&nbsp;=&nbsp;b[x]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}}<span style="color:#808080;">//&nbsp;Place&nbsp;a&nbsp;new&nbsp;tetro&nbsp;on&nbsp;top</span>fn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;generate_tetro()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;g.pos_y&nbsp;=&nbsp;<span style="color:#ae87fa;">0</span>&nbsp;&nbsp;&nbsp;&nbsp;g.pos_x&nbsp;=&nbsp;FieldWidth&nbsp;/&nbsp;<span style="color:#ae87fa;">2</span>&nbsp;-&nbsp;TetroSize&nbsp;/&nbsp;<span style="color:#ae87fa;">2</span>&nbsp;&nbsp;&nbsp;&nbsp;g.tetro_idx&nbsp;=&nbsp;rand.next(BTetros.<span style="color:#f82375;">len</span>)&nbsp;&nbsp;&nbsp;&nbsp;g.rotation_idx&nbsp;=&nbsp;<span style="color:#ae87fa;">0</span>&nbsp;&nbsp;&nbsp;&nbsp;g.get_tetro()}<span style="color:#808080;">//&nbsp;Get&nbsp;the&nbsp;right&nbsp;tetro&nbsp;from&nbsp;cache</span>fn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;get_tetro()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;idx&nbsp;:=&nbsp;g.tetro_idx&nbsp;*&nbsp;TetroSize&nbsp;*&nbsp;TetroSize&nbsp;+&nbsp;g.rotation_idx&nbsp;*&nbsp;TetroSize&nbsp;&nbsp;&nbsp;&nbsp;g.tetro&nbsp;=&nbsp;g.tetros_cache.slice(idx,&nbsp;idx&nbsp;+&nbsp;TetroSize)}fn&nbsp;(g&nbsp;mut&nbsp;Game)&nbsp;drop_tetro()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;i&nbsp;:=&nbsp;<span style="color:#ae87fa;">0</span>;&nbsp;i&nbsp;&lt;&nbsp;TetroSize;&nbsp;i++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tetro&nbsp;:=&nbsp;g.tetro[i]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;x&nbsp;:=&nbsp;tetro.x&nbsp;+&nbsp;g.pos_x&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;y&nbsp;:=&nbsp;tetro.y&nbsp;+&nbsp;g.pos_y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;Remember&nbsp;the&nbsp;color&nbsp;of&nbsp;each&nbsp;block</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;<span style="color:inherit;">TODO:</span>&nbsp;g.field[y][x]&nbsp;=&nbsp;g.tetro_idx&nbsp;+&nbsp;1</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;row&nbsp;:=&nbsp;g.field[y]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;row[x]&nbsp;=&nbsp;g.tetro_idx&nbsp;+&nbsp;<span style="color:#ae87fa;">1</span>&nbsp;&nbsp;&nbsp;&nbsp;}}fn&nbsp;(g&nbsp;&amp;Game)&nbsp;draw_tetro()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;i&nbsp;:=&nbsp;<span style="color:#ae87fa;">0</span>;&nbsp;i&nbsp;&lt;&nbsp;TetroSize;&nbsp;i++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tetro&nbsp;:=&nbsp;g.tetro[i]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.draw_block(g.pos_y&nbsp;+&nbsp;tetro.y,&nbsp;g.pos_x&nbsp;+&nbsp;tetro.x,&nbsp;g.tetro_idx&nbsp;+&nbsp;<span style="color:#ae87fa;">1</span>)&nbsp;&nbsp;&nbsp;&nbsp;}}fn&nbsp;(g&nbsp;&amp;Game)&nbsp;draw_block(i,&nbsp;j,&nbsp;color_idx&nbsp;<span style="color:#f82375;">int</span>)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;g.gg.draw_rect((j&nbsp;-&nbsp;<span style="color:#ae87fa;">1</span>)&nbsp;*&nbsp;BlockSize,&nbsp;(i&nbsp;-&nbsp;<span style="color:#ae87fa;">1</span>)&nbsp;*&nbsp;BlockSize,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;BlockSize&nbsp;-&nbsp;<span style="color:#ae87fa;">1</span>,&nbsp;BlockSize&nbsp;-&nbsp;<span style="color:#ae87fa;">1</span>,&nbsp;Colors[color_idx])}fn&nbsp;(g&nbsp;&amp;Game)&nbsp;draw_field()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;i&nbsp;:=&nbsp;<span style="color:#ae87fa;">1</span>;&nbsp;i&nbsp;&lt;&nbsp;FieldHeight&nbsp;+&nbsp;<span style="color:#ae87fa;">1</span>;&nbsp;i++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;j&nbsp;:=&nbsp;<span style="color:#ae87fa;">1</span>;&nbsp;j&nbsp;&lt;&nbsp;FieldWidth&nbsp;+&nbsp;<span style="color:#ae87fa;">1</span>;&nbsp;j++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;f&nbsp;:=&nbsp;g.field[i]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">if</span>&nbsp;f[j]&nbsp;&gt;&nbsp;<span style="color:#ae87fa;">0</span>&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;g.draw_block(i,&nbsp;j,&nbsp;f[j])&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}}fn&nbsp;(g&nbsp;&amp;Game)&nbsp;draw_scene()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;g.draw_tetro()&nbsp;&nbsp;&nbsp;&nbsp;g.draw_field()}fn&nbsp;parse_binary_tetro(t&nbsp;<span style="color:#f82375;">int</span>)&nbsp;[]Block&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;res&nbsp;:=&nbsp;[Block{}&nbsp;;&nbsp;<span style="color:#ae87fa;">4</span>]&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cnt&nbsp;:=&nbsp;<span style="color:#ae87fa;">0</span>&nbsp;&nbsp;&nbsp;&nbsp;horizontal&nbsp;:=&nbsp;t&nbsp;==&nbsp;<span style="color:#ae87fa;">9</span><span style="color:#808080;">//&nbsp;special&nbsp;case&nbsp;for&nbsp;the&nbsp;horizontal&nbsp;line</span>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;i&nbsp;:=&nbsp;<span style="color:#ae87fa;">0</span>;&nbsp;i&nbsp;&lt;=&nbsp;<span style="color:#ae87fa;">3</span>;&nbsp;i++&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;Get&nbsp;ith&nbsp;digit&nbsp;of&nbsp;t</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p&nbsp;:=&nbsp;<span style="color:#f82375;">int</span>(math.pow(<span style="color:#ae87fa;">10</span>,&nbsp;<span style="color:#ae87fa;">3</span>&nbsp;-&nbsp;i))&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;digit&nbsp;:=&nbsp;<span style="color:#f82375;">int</span>(t&nbsp;/&nbsp;p)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t&nbsp;%=&nbsp;p&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;Convert&nbsp;the&nbsp;digit&nbsp;to&nbsp;binary</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;j&nbsp;:=&nbsp;<span style="color:#ae87fa;">3</span>;&nbsp;j&nbsp;&gt;=&nbsp;<span style="color:#ae87fa;">0</span>;&nbsp;j--&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bin&nbsp;:=&nbsp;digit&nbsp;%&nbsp;<span style="color:#ae87fa;">2</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;digit&nbsp;/=&nbsp;<span style="color:#ae87fa;">2</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">if</span>&nbsp;bin&nbsp;==&nbsp;<span style="color:#ae87fa;">1</span>&nbsp;||&nbsp;(horizontal&nbsp;&amp;&amp;&nbsp;i&nbsp;==&nbsp;TetroSize&nbsp;-&nbsp;<span style="color:#ae87fa;">1</span>)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;<span style="color:inherit;">TODO:</span>&nbsp;res[cnt].x&nbsp;=&nbsp;j</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;res[cnt].y&nbsp;=&nbsp;i</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;point&nbsp;:=&nbsp;&amp;res[cnt]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point.x&nbsp;=&nbsp;j&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;point.y&nbsp;=&nbsp;i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cnt++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;res}<span style="color:#808080;">//&nbsp;<span style="color:inherit;">TODO:</span>&nbsp;this&nbsp;exposes&nbsp;the&nbsp;unsafe&nbsp;C&nbsp;interface,&nbsp;clean&nbsp;up</span>fn&nbsp;key_down(wnd&nbsp;voidptr,&nbsp;key,&nbsp;code,&nbsp;action,&nbsp;mods&nbsp;<span style="color:#f82375;">int</span>)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">if</span>&nbsp;action&nbsp;!=&nbsp;<span style="color:#ae87fa;">2</span>&nbsp;&amp;&amp;&nbsp;action&nbsp;!=&nbsp;<span style="color:#ae87fa;">1</span>&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;Fetch&nbsp;the&nbsp;game&nbsp;object&nbsp;stored&nbsp;in&nbsp;the&nbsp;user&nbsp;pointer</span>&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;game&nbsp;:=&nbsp;&amp;Game(glfw.get_window_user_pointer(wnd))&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">switch</span>&nbsp;key&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">case</span>&nbsp;glfw.KEY_ESCAPE:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;glfw.set_should_close(wnd,&nbsp;<span style="color:#ae87fa;">true</span>)&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">case</span>&nbsp;glfw.KeyUp:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#808080;">//&nbsp;Rotate&nbsp;the&nbsp;tetro</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.rotation_idx++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">if</span>&nbsp;game.rotation_idx&nbsp;==&nbsp;TetroSize&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.rotation_idx&nbsp;=&nbsp;<span style="color:#ae87fa;">0</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.get_tetro()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">if</span>&nbsp;game.pos_x&nbsp;&lt;&nbsp;<span style="color:#ae87fa;">0</span>&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.pos_x&nbsp;=&nbsp;<span style="color:#ae87fa;">1</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">case</span>&nbsp;glfw.KeyLeft:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.move_right(<span style="color:#ae87fa;">-1</span>)&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">case</span>&nbsp;glfw.KeyRight:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.move_right(<span style="color:#ae87fa;">1</span>)&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">case</span>&nbsp;glfw.KeyDown:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;game.move_tetro()&nbsp;<span style="color:#808080;">//&nbsp;drop&nbsp;faster&nbsp;when&nbsp;the&nbsp;player&nbsp;presses&nbsp;&lt;down&gt;</span>&nbsp;&nbsp;&nbsp;&nbsp;}}</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">我们看到这个程序是在这行代码window.onkeydown(key_down)来进行事件注册的，其渲染是在draw_scene函数进行渲染的。</p>   <p>&nbsp;</p>   <p style="margin-left:8px;">使用v run tetris.v命令就能看到以下的效果了。左边是debug窗口，右边是程序效果：</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;text-align:center;"><img alt="640?wx_fmt=gif" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAugntDr35hRZcXrBpiadmEJsQU3ribTm0KVMrEDtVMrvdOXY6icNoLyZVEpNptLcP9JcAJ59PhdmlpLsg/640?wx_fmt=gif"></p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">后面笔者还会继续关注V语言的发展，为大家带来第一手的教程分享。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;"><span style="color:#888888;">CSDN博客原文：https://blog.csdn.net/BEYONDMA/article/details/94349691，欢迎大家入驻 CSDN 博客。</span></p>   <blockquote>    <p style="margin-left:0pt;"><span style="color:#f33b45;"><strong>国家认证的Python工程师有哪些能力要求？</strong></span></p>    <p style="margin-left:0pt;"><strong><a href="https://edu.csdn.net/topic/python115?utm_source=csdn_bw" rel="noopener" target="_blank"><span style="color:#f33b45;"><u><u>https://edu.csdn.net/topic/python115?utm_source=csdn_bw</u></u></span></a></strong></p>   </blockquote>   <p style="margin-left:8px;"><span style="color:#888888;">【END】</span></p>   <p style="margin-left:8px;text-align:center;"><img alt="640?wx_fmt=jpeg" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhUdTAica5phfXw2KUETyn15wswg9nGJu7qc63ib3hEy4NKdsDTEOP4fG3a726nVeQsDicWhjN8owP0A/640?wx_fmt=jpeg"></p>   <p style="margin-left:8px;"><strong><strong>&nbsp;热 文</strong>&nbsp;推 荐&nbsp;</strong></p>   <p style="margin-left:8px;"><span style="color:#0052ff;"><a target="_blank" href="https://blog.csdn.net/csdnnews/article/details/94417433" rel="nofollow" data-token="d169ebfa19538eec3fc52f04e83da188">微软为何痛失移动操作系统？</a></span></p>   <p style="margin-left:8px;"><span style="color:#0052ff;"><a target="_blank" href="https://blog.csdn.net/csdnsevenn/article/details/94416768" rel="nofollow" data-token="c14c249b9ab6cbab729e5a537520b2cc">漫画：一文学会面试中常问的 IO 问题！</a></span></p>   <p style="margin-left:8px;"><span style="color:#0052ff;"><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650723456&amp;idx=1&amp;sn=f21e22e044acd9df1357ef63dc009a66&amp;chksm=bea6a55389d12c45d2ef844a846d232f587feba86b9aac4d036c14657a98ea844a2df4f71dce&amp;scene=21#wechat_redirect" rel="noopener" data-token="145dc1e77471a68e3fedaba74335c6b2" target="_blank">☞</a></span><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650723609&amp;idx=1&amp;sn=fc70f1ad309d5160d77cc7d2e081fdeb&amp;chksm=bea6a4ca89d12ddc0811748fee08e54980155ef65c2b646e4e012715286eca77ed491a2c70fd&amp;scene=21#wechat_redirect" rel="noopener" data-token="defe7c12c34ae08d381e0cb1422e910b" target="_blank">库克回应乔纳森离职；微信新版本取消“语音转文字”功能；Mac Pro生产迁至中国 | 极客头条</a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;"><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650723456&amp;idx=1&amp;sn=f21e22e044acd9df1357ef63dc009a66&amp;chksm=bea6a55389d12c45d2ef844a846d232f587feba86b9aac4d036c14657a98ea844a2df4f71dce&amp;scene=21#wechat_redirect" rel="noopener" data-token="145dc1e77471a68e3fedaba74335c6b2" target="_blank">☞</a></span><a target="_blank" href="https://blog.csdn.net/csdnnews/article/details/94508471" rel="nofollow" data-token="5325c27f6e6e8ac752cf65c8d9a43b3b">程序员们如何破局 5G？</a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;"><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650723456&amp;idx=1&amp;sn=f21e22e044acd9df1357ef63dc009a66&amp;chksm=bea6a55389d12c45d2ef844a846d232f587feba86b9aac4d036c14657a98ea844a2df4f71dce&amp;scene=21#wechat_redirect" rel="noopener" data-token="145dc1e77471a68e3fedaba74335c6b2" target="_blank">☞</a></span><a target="_blank" href="https://blog.csdn.net/csdnnews/article/details/94508491" rel="nofollow" data-token="7790b8a24b019b756c337f6213b1c4b4">软件为什么会沦为遗留系统？</a></p>   <p style="margin-left:8px;"><a target="_blank" href="https://blog.csdn.net/csdnsevenn/article/details/94416761" rel="nofollow" data-token="47f7f439c223522c275a3dae1acb5a03">因为有了 TA，搞定行业应用开发，不怕不怕啦！</a></p>   <p style="margin-left:8px;"><a target="_blank" href="https://blog.csdn.net/Blockchain_lemon/article/details/94367338" rel="nofollow" data-token="61a57061a97c95598c6cf9a3f24d08a9">除了V神,17个以太坊大会讲师的演讲精华都在这儿了！</a></p>   <p style="margin-left:8px;"><a href="http://mp.weixin.qq.com/s?__biz=MzA3MjY1MTQwNQ==&amp;mid=2649828695&amp;idx=1&amp;sn=a86005ef27736f551db95850e64bbe37&amp;chksm=871e8ab5b06903a3329401d0cfeb4a7bdc145af3ba5551d9f6158fbc6432fa1e4e5179ca9934&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">☞2019年技术盘点容器篇（二）：听腾讯云讲讲踏入成熟期的容器技术&nbsp;| 程序员硬核评测</span></a></p>   <p style="margin-left:8px;"><a href="http://mp.weixin.qq.com/s?__biz=MzU5MjEwMTE2OQ==&amp;mid=2247487042&amp;idx=1&amp;sn=0895bbae4223e44742b231a07db2e167&amp;chksm=fe25a41cc9522d0aece05262f46b5b09c8c8d9cd53f2f7a247f98a738b8f9cfde5b8274090f0&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">☞50行Python代码，获取公众号全部文章</span></a></p>   <p style="margin-left:8px;"><a target="_blank" href="https://blog.csdn.net/dQCFKyQDXYm3F8rB0/article/details/94415665" rel="nofollow" data-token="72949a0b5f98400fc4e3b898954ad67e">不写一行代码，也能玩转Kaggle竞赛？</a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;"><span style="color:#0052ff;"><a href="http://mp.weixin.qq.com/s?__biz=MzA5MjcxNjc2Ng==&amp;mid=2650560337&amp;idx=1&amp;sn=437c83704bbdb18d3a522aadd606e981&amp;chksm=88601ce0bf1795f6d519b968f9448d34d7b5a7fc48e09aabcb32e079d9bda4413936a605b4eb&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">☞马云曾经偶像，终于把阿里留下的1400亿败光了！</span></a></span></span></p>   <p style="margin-left:8px;"><img alt="640?wx_fmt=gif" class="__bg_gif" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAujr9dOtwUGfl03zJzLBRXbZs8g1RcNcLr7qm5qEy419tofZ8dq1sIW75xZwq2K4zIzcTtaDOy4OTg/640?wx_fmt=gif" width="45"><strong><strong>点击阅读原文，输入关键词，即可搜索您想要的 CSDN 文章。</strong></strong></p>   <p><img alt="640?wx_fmt=png" class="has" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpplm16ibb8iaib7RoGQ5iaHEdvAd0o9e1LlUGA2k0Yib222agOxzweXhahA9GuzJcGBg0dA4DzlibxRqw/640?wx_fmt=png">你点的每个“在看”，我都认真当成了喜欢</p>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V 语言 -- 数据结构.Map</title>
    <link href="https://vlanguage.cn/2019/07/02/liaodong2010_94438815.html"/>
    <id>https://vlanguage.cn/2019/07/02/liaodong2010_94438815.html</id>
    <published>2019-07-02T00:00:00.000Z</published>
    <updated>2019-07-22T05:05:28.954Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/liaodong2010/article/details/94438815&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/liaodong2010/article/details/94438815&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div id="content_views" class="markdown_views prism-atom-one-dark">   <!-- flowchart 箭头图标 勿删 -->   <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">    <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"/>   </svg>   <h1><a id="V____Map_0"></a>V 语言 – 数据结构.Map</h1>   <p>V语言现在还在开发阶段，所以还有很多不成熟的地方。比如其中的map，还只是一个原型。下面我做一个简单的分析。</p>   <h2><a id="_4"></a>结构体定义</h2>   <pre><code class="prism language-go">module builtin<span class="token keyword">struct</span> <span class="token keyword">map</span> <span class="token punctuation">{</span><span class="token comment">// cap int</span><span class="token comment">// keys []string</span><span class="token comment">// table byteptr</span><span class="token comment">// keys_table *string</span><span class="token comment">// table *Entry</span>element_size <span class="token builtin">int</span><span class="token comment">// collisions []Entry</span>pub<span class="token punctuation">:</span>entries      <span class="token punctuation">[</span><span class="token punctuation">]</span>Entryis_sorted    <span class="token builtin">bool</span><span class="token punctuation">}</span><span class="token keyword">struct</span> Entry <span class="token punctuation">{</span>pub<span class="token punctuation">:</span>key <span class="token builtin">string</span>val voidptr<span class="token comment">// linked list for collisions</span><span class="token comment">// next *Entry</span><span class="token punctuation">}</span></code></pre>   <p>可以看到，map的结构十分简单，只包含三个成员</p>   <ul>    <li>element_size: 元素大小</li>    <li>entries: 实体集合</li>    <li>is_sorted: 是否排序</li>   </ul>   <p>其中的is_sorted这个属性比较有意思，说明在方法里面会排序，用到排序则很有可能与提高查找效率有关。</p>   <p>下面再来看方法。</p>   <h2><a id="_41"></a>方法</h2>   <p>对于一个map来说，用的最多的无非是插入元素和获取元素。</p>   <h3><a id="_44"></a>插入元素</h3>   <pre><code class="prism language-go"><span class="token comment">// 插入一个元素</span>fn <span class="token punctuation">(</span>m mut <span class="token keyword">map</span><span class="token punctuation">)</span> <span class="token function">_set</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> val voidptr<span class="token punctuation">)</span> <span class="token punctuation">{</span>e <span class="token operator">:=</span> m<span class="token punctuation">.</span><span class="token function">new_entry</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>entry <span class="token operator">:=</span> m<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">if</span> entry<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span><span class="token comment">// e := Entry2{key: key, val: val}</span>m<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token keyword">return</span><span class="token punctuation">}</span><span class="token punctuation">}</span>m<span class="token punctuation">.</span>entries <span class="token operator">&lt;&lt;</span> e<span class="token comment">// m.new_entry(key, val)</span>m<span class="token punctuation">.</span>is_sorted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre>   <p>插入元素的过程可以描述为：</p>   <ol>    <li>创建一个元素</li>    <li>遍历查找键是否重复</li>    <li>如果重复，则赋值</li>    <li>如果没重复，则添加到末尾</li>   </ol>   <p>不难看出，插入用到了遍历，其时间复杂度为O(n)，是一种很低效的算法。在后续有很大的优化空间。</p>   <h3><a id="_72"></a>查找元素</h3>   <pre><code class="prism language-go"><span class="token comment">// 获取元素</span>fn <span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">)</span> <span class="token function">get</span><span class="token punctuation">(</span>key <span class="token builtin">string</span><span class="token punctuation">,</span> out voidptr<span class="token punctuation">)</span> <span class="token builtin">bool</span> <span class="token punctuation">{</span><span class="token keyword">if</span> m<span class="token punctuation">.</span>is_sorted <span class="token punctuation">{</span><span class="token comment">// println('\n\nget "$key" sorted')</span>m<span class="token punctuation">.</span><span class="token function">bs</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> m<span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token builtin">len</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>entry <span class="token operator">:=</span> m<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">if</span> entry<span class="token punctuation">.</span>key <span class="token operator">==</span> key <span class="token punctuation">{</span>C<span class="token punctuation">.</span><span class="token function">memcpy</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> entry<span class="token punctuation">.</span>val<span class="token punctuation">,</span> m<span class="token punctuation">.</span>element_size<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment">// 二分查找</span>fn <span class="token punctuation">(</span>m <span class="token keyword">map</span><span class="token punctuation">)</span> <span class="token function">bs</span><span class="token punctuation">(</span>query <span class="token builtin">string</span><span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token builtin">int</span><span class="token punctuation">,</span> out voidptr<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">// println('bs "$query" $start -&gt; $end')</span>mid <span class="token operator">:=</span> start <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> end <span class="token operator">-</span> start <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">{</span>last <span class="token operator">:=</span> m<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>end<span class="token punctuation">]</span>C<span class="token punctuation">.</span><span class="token function">memcpy</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> last<span class="token punctuation">.</span>val<span class="token punctuation">,</span> m<span class="token punctuation">.</span>element_size<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> end <span class="token operator">-</span> start <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">{</span>first <span class="token operator">:=</span> m<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>start<span class="token punctuation">]</span>C<span class="token punctuation">.</span><span class="token function">memcpy</span><span class="token punctuation">(</span>out<span class="token punctuation">,</span> first<span class="token punctuation">.</span>val<span class="token punctuation">,</span> m<span class="token punctuation">.</span>element_size<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span><span class="token keyword">if</span> mid <span class="token operator">&gt;=</span> m<span class="token punctuation">.</span>entries<span class="token punctuation">.</span><span class="token builtin">len</span> <span class="token punctuation">{</span><span class="token keyword">return</span><span class="token punctuation">}</span>mid_msg <span class="token operator">:=</span> m<span class="token punctuation">.</span>entries<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token comment">// println('mid.key=$mid_msg.key')</span><span class="token keyword">if</span> query <span class="token operator">&lt;</span> mid_msg<span class="token punctuation">.</span>key <span class="token punctuation">{</span>m<span class="token punctuation">.</span><span class="token function">bs</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> start<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token keyword">return</span><span class="token punctuation">}</span>m<span class="token punctuation">.</span><span class="token function">bs</span><span class="token punctuation">(</span>query<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> end<span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre>   <p>查找的流程可以描述为：</p>   <ul>    <li>判断是否已经排序</li>    <li>如果未排序则遍历查找</li>    <li>如果已排序则二分查找(排序方法需要显式调用)</li>   </ul>   <p>查找过程用到了二分查找(O(lgn))，和遍历(O(n))，但是大部分时候，开发者不会对map显式排序，所以真正起作用的是遍历操作，也是十分低效。</p>   <h2><a id="_127"></a>改进及评价</h2>   <ol>    <li>map模块显然很不成熟，其结构和算法有很大改进空间。</li>    <li>如果采用数组作为存储容器，则至少也可以达到查找： O(lgn) -&gt; 排序O(lgn) + 二分查找 O(lgn)， 插入O(lgn) -&gt; 查重O(lgn) + 插入O(1)。否则数据量稍大会非常慢。</li>    <li>如果采用Hash实现，则可达到O(1) + O(1)的速度，不过这要看v语言的开发者如何取舍。</li>    <li>v语言当前还无法用于生产环境，尝鲜可以，但正式环境还不可用。其语言特性很有吸引力，但现在的完成度还不高，到稳定可用估计还需要些时日。</li>   </ol>  </div>  <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e44c3c0e64.css" rel="stylesheet"> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>GITHUB排行榜C位出道-手把手教你玩转V语言版的俄罗斯方块</title>
    <link href="https://vlanguage.cn/2019/07/01/BEYONDMA_94349691.html"/>
    <id>https://vlanguage.cn/2019/07/01/BEYONDMA_94349691.html</id>
    <published>2019-07-01T00:00:00.000Z</published>
    <updated>2019-07-22T04:55:18.400Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/BEYONDMA/article/details/94349691&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/BEYONDMA/article/details/94349691&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <p>&nbsp; &nbsp; 最近&nbsp;V 语言-一个GO语言最吸晴的项目，在千呼万唤之后，终于迎来开源，并正式发布了首个可用版本，其一经推出，便强势登顶&nbsp;GitHub的榜首，引来各方热议。目前V已经可以实现自我编译迭代，笔者大致了解了一下V语言，主要有如下一些特性。</p>   <p>&nbsp; &nbsp; 1.<strong>快速编译</strong>：&nbsp; V每CPU核心每秒编译约120万行代码。&nbsp; V也可以调用C，编译速度下降到≈100k行/秒/CPU。安全<br> &nbsp; &nbsp; 2.<strong>安全策略</strong>：没有空；没有全局变量(意味着变量都是在函数体中声明)&nbsp;没有未定义的行为&nbsp;<br> &nbsp; &nbsp; <strong>3.性能：</strong>和C一样快，操作C没有任何成本，不支持运行时反射，编译器只有400K,整个语言及其标准库都小于400kb。V目前是用V写的，你可以在0。4秒内完成。(到今年年底，这个数字将降至≈0.15秒。)</p>   <p>&nbsp; &nbsp; <strong>4.强大的图形能力:</strong>支持在GDI+/Cocoa绘图之上的跨平台绘图库，以及一个基于OpenGL的图形库，以支持加载复杂的三维对象与纹理</p>   <p>&nbsp; &nbsp;由于曾经做过一段时间的DIRECTX的开发，V语言对于图形能力的特性宣传最吸引笔者的注意。所以我到其官网及Github上学习了一下相关内容，按照编译运行了一下俄罗斯 方块的例程，接下来向大家做一下分享。</p>   <p style="text-align:center;"><img alt class="has" height="326" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190630204304439.gif" width="164"></p>   <h3>&nbsp; &nbsp;安装V语言</h3>   <p>&nbsp; &nbsp; 如果只是HELLO WORLD程序是非常简单的，只需要按照<a href="https://vlang.io/" rel="noopener" data-token="107e37084de697409ebce5fc3cf714fa" target="_blank">https://vlang.io</a>官网的标准步骤来执行即可。而如果使用其图形处理能力笔者目前只在UBANTU平台测试成功。下面均是以UBANTU为例来说明</p>   <p>&nbsp; &nbsp;首先将整个项目克隆下来，再make即可</p>   <pre class="has"><code> git clone https://github.com/vlang/v cd v make</code></pre>   <p>&nbsp; &nbsp; 如果报curl command not found，则执行以下命令安装curl</p>   <pre class="has"><code>sudo apt install curl</code></pre>   <p>&nbsp; &nbsp; 接下来在建立软链接</p>   <pre class="has"><code>sudo ln -s /home/machao/v/v /usr/local/bin/v</code></pre>   <p>&nbsp; 然后运行v就能进到v语言的命令行了。而如果要运行俄罗斯方块还需要以下这些库的支持，</p>   <pre class="has"><code> sudo apt install libglfw3 libglfw3-dev libfreetype6-dev libcurl3-dev</code></pre>   <h3>&nbsp; &nbsp; &nbsp; &nbsp; 运行俄罗斯方块<br> &nbsp; &nbsp;&nbsp;</h3>   <p>&nbsp; &nbsp; &nbsp; 接下来cd tetris,进入到俄罗斯方块的目录，先使用gedit tetris.v,来看一下v语言的代码样例，其主要部分如下：</p>   <p>&nbsp; &nbsp;&nbsp;</p>   <pre class="has"><code>fn main() {glfw.init()//实始化类mut game := &amp;Game{gg: 0} // TODOgame.parse_tetros()game.init_game()mut window := glfw.create_window(glfw.WinCfg {width: WinWidthheight: WinHeighttitle: 'V Tetris'ptr: game // glfw user pointer})window.make_context_current()window.onkeydown(key_down)//注册事件gg.init()game.gg = gg.new_context(gg.Cfg {width: WinWidthheight: WinHeightuse_ortho: true // This is needed for 2D drawing})go game.run() // Run the game loop in a new threadgl.clear() // For some reason this is necessary to avoid an intial flickeringgl.clear_color(255, 255, 255, 255)for {gl.clear()gl.clear_color(255, 255, 255, 255)game.draw_scene()window.swap_buffers()glfw.wait_events()if window.should_close() {window.destroy()glfw.terminate()exit(0)}}}fn (g mut Game) move_right(dx int) {// Reached left/right edge or another tetro?for i := 0; i &lt; TetroSize; i++ {tetro := g.tetro[i]y := tetro.y + g.pos_yx := tetro.x + g.pos_x + dxrow := g.field[y]if row[x] != 0 {// Do not movereturn}}g.pos_x += dx}fn (g mut Game) delete_completed_lines() {for y := FieldHeight; y &gt;= 1; y-- {g.delete_completed_line(y)}}fn (g mut Game) delete_completed_line(y int) {for x := 1; x &lt;= FieldWidth; x++ {f := g.field[y]if f[x] == 0 {return}}// Move everything down by 1 positionfor yy := y - 1; yy &gt;= 1; yy-- {for x := 1; x &lt;= FieldWidth; x++ {mut a := g.field[yy + 1]mut b := g.field[yy]a[x] = b[x]}}}// Place a new tetro on topfn (g mut Game) generate_tetro() {g.pos_y = 0g.pos_x = FieldWidth / 2 - TetroSize / 2g.tetro_idx = rand.next(BTetros.len)g.rotation_idx = 0g.get_tetro()}// Get the right tetro from cachefn (g mut Game) get_tetro() {idx := g.tetro_idx * TetroSize * TetroSize + g.rotation_idx * TetroSizeg.tetro = g.tetros_cache.slice(idx, idx + TetroSize)}fn (g mut Game) drop_tetro() {for i := 0; i &lt; TetroSize; i++ {tetro := g.tetro[i]x := tetro.x + g.pos_xy := tetro.y + g.pos_y// Remember the color of each block// TODO: g.field[y][x] = g.tetro_idx + 1mut row := g.field[y]row[x] = g.tetro_idx + 1}}fn (g &amp;Game) draw_tetro() {for i := 0; i &lt; TetroSize; i++ {tetro := g.tetro[i]g.draw_block(g.pos_y + tetro.y, g.pos_x + tetro.x, g.tetro_idx + 1)}}fn (g &amp;Game) draw_block(i, j, color_idx int) {g.gg.draw_rect((j - 1) * BlockSize, (i - 1) * BlockSize,BlockSize - 1, BlockSize - 1, Colors[color_idx])}fn (g &amp;Game) draw_field() {for i := 1; i &lt; FieldHeight + 1; i++ {for j := 1; j &lt; FieldWidth + 1; j++ {f := g.field[i]if f[j] &gt; 0 {g.draw_block(i, j, f[j])}}}}fn (g &amp;Game) draw_scene() {g.draw_tetro()g.draw_field()}fn parse_binary_tetro(t int) []Block {res := [Block{} ; 4]mut cnt := 0horizontal := t == 9// special case for the horizontal linefor i := 0; i &lt;= 3; i++ {// Get ith digit of tp := int(math.pow(10, 3 - i))mut digit := int(t / p)t %= p// Convert the digit to binaryfor j := 3; j &gt;= 0; j-- {bin := digit % 2digit /= 2if bin == 1 || (horizontal &amp;&amp; i == TetroSize - 1) {// TODO: res[cnt].x = j// res[cnt].y = imut point := &amp;res[cnt]point.x = jpoint.y = icnt++}}}return res}// TODO: this exposes the unsafe C interface, clean upfn key_down(wnd voidptr, key, code, action, mods int) {if action != 2 &amp;&amp; action != 1 {return}// Fetch the game object stored in the user pointermut game := &amp;Game(glfw.get_window_user_pointer(wnd))switch key {case glfw.KEY_ESCAPE:glfw.set_should_close(wnd, true)case glfw.KeyUp:// Rotate the tetrogame.rotation_idx++if game.rotation_idx == TetroSize {game.rotation_idx = 0}game.get_tetro()if game.pos_x &lt; 0 {game.pos_x = 1}case glfw.KeyLeft:game.move_right(-1)case glfw.KeyRight:game.move_right(1)case glfw.KeyDown:game.move_tetro() // drop faster when the player presses &lt;down&gt;}}</code></pre>   <p>&nbsp; &nbsp;我们看到这个程序是在这行代码<strong>window.onkeydown(key_down)来进行事件注册的，其渲染是在draw_scene函数进行渲染的。</strong></p>   <p>使用v run tetris.v命令就能看到以下的效果了。左边是debug窗口，右边是程序效果。</p>   <p style="text-align:center;"><img alt class="has" height="326" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190630205432121.gif" width="793"></p>   <p>&nbsp;</p>   <p>&nbsp; &nbsp; &nbsp;后面笔者还会继续关注V语言的发展，为大家带来第一手的教程分享。</p>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V语言环境部署教程-linux</title>
    <link href="https://vlanguage.cn/2019/06/28/qq_32394351_93966947.html"/>
    <id>https://vlanguage.cn/2019/06/28/qq_32394351_93966947.html</id>
    <published>2019-06-28T00:00:00.000Z</published>
    <updated>2019-07-22T04:55:19.225Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_32394351/article/details/93966947&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_32394351/article/details/93966947&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <h2>在linux系统上，目前有两种搭建V语言环境的方法:</h2>   <p>&nbsp;</p>   <h3>一:git 下载源码并编译出可执行文件，然后创建软链接</h3>   <h3>二:直接下载别人编译好的可执行文件v&nbsp; ，然后改权限为可执行文件，再创建软链接</h3>   <p>&nbsp;</p>   <p>下面用ubuntu为例来讲解。centos类似操作。</p>   <p>&nbsp;</p>   <h1>方法一:</h1>   <p>先请求临时管理员权限吧，后面懒得输sudo前缀</p>   <pre class="has"><code>sudo -s su</code></pre>   <p>&nbsp;等会儿，然后输入当前用户的密码，那么就会发现路径用户名有了root前缀了</p>   <p><img alt class="has" height="58" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628090716909.png" width="317"></p>   <p>好了，接下来按步骤操作&nbsp;</p>   <p>1.如果是ubuntu desktop系统。那么先得安装git。命令:</p>   <pre class="has"><code>apt install git</code></pre>   <p>也许还没有gcc,还得安装</p>   <pre class="has"><code>apt install gcc</code></pre>   <p>如果是ubuntu server 系统，什么也不用安，直接干。</p>   <p>好了，默认你已经把git和gcc安装好了。然后随便到一个路径克隆一下源码</p>   <p>比如我在当前用户的根目录创建一个v目录,然后切换到里面再git</p>   <pre class="has"><code>mkdir vcd vgit clone https://github.com/vlang/v</code></pre>   <p>等克隆完毕，然后输入&nbsp; ls&nbsp;&nbsp;发现路径里面躺着一个v路径了</p>   <p><img alt class="has" height="79" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628091735774.png" width="522"></p>   <p>那么接着进这个目录看看</p>   <pre class="has"><code>cd vls -alt</code></pre>   <p>&nbsp;<img alt class="has" height="551" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628091903129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyMzk0MzUx,size_16,color_FFFFFF,t_70" width="490"></p>   <p>&nbsp;可以看到这个完整的项目结构了，现在我们需要进去编译一下源码:</p>   <pre class="has"><code>cd compilermakels</code></pre>   <p>&nbsp;<img alt class="has" height="160" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628092112895.png" width="710"></p>   <p>弄完发现已经有一个编译好的绿色的可执行文件躺在这路径里面了。</p>   <p>接着在当前路径执行一下这个文件试试:</p>   <pre class="has"><code>./v</code></pre>   <p><img alt class="has" height="152" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628092245812.png" width="703"></p>   <p>发现进入这个解释器了。我这刚编译的0.1.7版本</p>   <p>接着退出这个编译环境，按ctrl-d然后回车</p>   <p><img alt class="has" height="54" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628092353283.png" width="398"></p>   <p>&nbsp;接着创建一个软链接。首先看下当前目录的绝对路径</p>   <pre class="has"><code>pwd</code></pre>   <p><img alt class="has" height="63" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628092445119.png" width="415"></p>   <p>看出来绝对路径是/home/dashen/cp/v/compiler,那么创建软链接的命令是:</p>   <pre class="has"><code>ln -s /home/dashen/cp/v/compiler/v /usr/local/bin/v</code></pre>   <p><img alt class="has" height="51" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628092703402.png" width="745"></p>   <p>我这里是因为之前创建过了，我先删除之前那个文件再来</p>   <pre class="has"><code>rm /usr/local/bin/vln -s /home/dashen/cp/v/compiler/v /usr/local/bin/v</code></pre>   <p>&nbsp;弄完了再输入一个v看看</p>   <p><img alt class="has" height="140" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628092925739.png" width="779"></p>   <p>&nbsp;ok。成功了。这里需要注意的是，创建软链接的命令是</p>   <p>ln -s 你的可执行文件路径 /usr/local/bin/v</p>   <p>注意空格，然后不要那么死板敲成我的路径了，敲你们自己的。哈哈。方法一到此结束。</p>   <p>&nbsp;</p>   <h1>方法二：</h1>   <p>直接下载别人编译好了的可执行文件v。比如你现在在windows下载好了v文件，然后要把windows里的v文件搞到linux里面去</p>   <p>&nbsp;</p>   <p>默认你用xshell通过ssh连接的linux主机。然后需要安装一个上传下载的包</p>   <pre class="has"><code>apt install lrzsz</code></pre>   <p><img alt class="has" height="287" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/2019062809392553.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyMzk0MzUx,size_16,color_FFFFFF,t_70" width="560"></p>   <p>然后弄完了，因为是现在是root用户，直接从windows上把文件拖到xshell里面就能上传到linux主机当前路径了</p>   <p>&nbsp;然后输入ls查看一下路径:</p>   <p><img alt class="has" height="36" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628094056462.png" width="313"></p>   <p>发现有个白色的v文件躺在路径里面了。接下来很关键，我们要把它变成绿色的可执行文件</p>   <p>&nbsp;执行以下命令:</p>   <pre class="has"><code>chmod +x vls</code></pre>   <p><img alt class="has" height="51" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628094232933.png" width="377"></p>   <p>一个绿色的可执行文件已经躺在这儿了。</p>   <p>然后输入:</p>   <pre class="has"><code>./v</code></pre>   <p>&nbsp;<img alt class="has" height="145" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628094314328.png" width="587"></p>   <p>&nbsp;没毛病。已经进去了。接着返回第一种方法，然后创建软链接。就完了。。</p>   <p>&nbsp;</p>   <p>最后写在这儿，新手可能在windows与linux之间传输文件比较麻烦，可以不用命令，用可视化的工具，他的名字叫做:</p>   <p>&nbsp;</p>   <p>FileZilla</p>   <p>在电脑管家软件中心就能下载安装了，完了起来看起来长这样的:</p>   <p><img alt class="has" height="843" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628094541998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyMzk0MzUx,size_16,color_FFFFFF,t_70" width="1187"></p>   <p>左边windows，右边linux，然后自己随便玩玩就会了。最后我再演示一下怎么在刚弄好的v环境编写个程序测试一下:</p>   <p>&nbsp;</p>   <p>在linux下找到一个干净的路径创建一个c.v文件，千万别弄在v源码里面，具体代码看图参考:</p>   <p><img alt class="has" height="136" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628094840495.png" width="428"></p>   <p>&nbsp;然后就进入了vim编辑器里面了，咱们编译一下c.v文件。先按字母键i,让vim编辑器处于insert状态</p>   <p><img alt class="has" height="80" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628094931641.png" width="194"></p>   <p>&nbsp;然后在里面写代码:</p>   <p><img alt class="has" height="252" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628095536678.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzMyMzk0MzUx,size_16,color_FFFFFF,t_70" width="465"></p>   <p>完了按ESC键，再按冒号（shift+分号键），输入wq,回车</p>   <p><img alt class="has" height="78" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628095322146.png" width="163"></p>   <p>&nbsp;这是保存并退出的意思。然后再输入v run c.v</p>   <p><img alt class="has" height="81" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190628095557261.png" width="406"></p>   <p>成功了，随便happy吧，这里只是演示了一下mut的用法，用了mut申明的变量，后面就能够直接通过=改变它的值</p>   <p>如果不用mut申明的变量，初始化完了后面就不能再用=改变它的值了。&nbsp;</p>   <p>&nbsp;</p>   <p>附录:<a href rel="nofollow" data-token="8039543bbed82e65f5d6a5a2b4938ff6">&nbsp;</a><a href="https://www.cnblogs.com/zj233/p/5888325.html" rel="noopener" data-token="f6bfab12ef8e81340c9c3a45aa706bb5" target="_blank">Linux常用的50个命令</a></p>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V语言关键字解读</title>
    <link href="https://vlanguage.cn/2019/06/27/qq_32394351_93883296.html"/>
    <id>https://vlanguage.cn/2019/06/27/qq_32394351_93883296.html</id>
    <published>2019-06-27T00:00:00.000Z</published>
    <updated>2019-07-22T04:55:19.178Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_32394351/article/details/93883296&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_32394351/article/details/93883296&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <p>官方文档:<a href="https://vlang.io/docs#keywords" rel="noopener" data-token="b649e7f363006f36f442e2dc649ea8f1" target="_blank">https://vlang.io/docs#keywords</a></p>   <p>V has 22 keywords:</p>   <pre><code class="language-html hljs">break const  continue defer else enum fnforgogotoifimportin interface match module mut  用于申明可变变量，申明并初始化后的变量在后面可以直接用=赋值，不用mut申明的变量后面不可改变。例如:</code></pre>   <pre class="has"><code class="language-Go">mut name:='dashen'println(name)name='dada'println(name)</code></pre>   <pre><code class="language-html hljs">or pub returnstructtype </code></pre>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V语言初探</title>
    <link href="https://vlanguage.cn/2019/06/27/huangruifeng_93908166.html"/>
    <id>https://vlanguage.cn/2019/06/27/huangruifeng_93908166.html</id>
    <published>2019-06-27T00:00:00.000Z</published>
    <updated>2019-07-22T04:55:18.900Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/huangruifeng/article/details/93908166&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/huangruifeng/article/details/93908166&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div id="content_views" class="markdown_views prism-atom-one-dark">   <!-- flowchart 箭头图标 勿删 -->   <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">    <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"/>   </svg>   <p>V语言，感觉厉害。。。。。。<br> 人家的Helloworld只需这样</p>   <pre><code>fn main() {println('hello world')}</code></pre>   <p>就是短小精悍。</p>   <p>居然还有泛型，这个可是连我们可以到处GO的都没有。</p>   <pre><code>struct Repo &lt;T&gt; {db DB} fn new_repo&lt;T&gt;(db DB) Repo&lt;T&gt; {return Repo&lt;T&gt;{db: db}} // This is a generic function. V will generate it for every type it's used with. fn (r Repo&lt;T&gt;) find_by_id(id int) T? {table_name := T.name // in this example getting the name of the type gives us the table name return r.db.query_one&lt;T&gt;('select * from $table_name where id = ?', id)} fn main() {db := new_db()users_repo := new_repo&lt;User&gt;(db)posts_repo := new_repo&lt;Post&gt;(db)user := users_repo.find_by_id(1)?post := posts_repo.find_by_id(1)?} </code></pre>   <p>V语言官网地址:<a href="https://vlang.io" rel="noopener" data-token="5a1a25ff6964d7fce3d79c8f3b3530af" target="_blank">https://vlang.io</a><br> V语言Github地址:<a href="https://github.com/vlang/v" rel="noopener" data-token="5d135131d3331ac6394cc0eb88022933" target="_blank">https://github.com/vlang/v</a></p>  </div>  <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e44c3c0e64.css" rel="stylesheet"> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V 语言强势登顶 GitHub TOP1，难道要取 Go 而代之？</title>
    <link href="https://vlanguage.cn/2019/06/27/yihuliunian_93874487.html"/>
    <id>https://vlanguage.cn/2019/06/27/yihuliunian_93874487.html</id>
    <published>2019-06-27T00:00:00.000Z</published>
    <updated>2019-07-22T04:55:19.842Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/yihuliunian/article/details/93874487&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/yihuliunian/article/details/93874487&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <blockquote>    <p>这个结合了 Go 和 Rust 特性的新语言 V，正式发布了首个可用版本。</p>   </blockquote>   <p><img alt class="has" src="http://mmbiz-qpic-cn.weituibao.com/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOb3Afa2VnVAxJZIHdMTqfJl9TlkiaAjeicg8NzgIYbm1kHfclXBgCuVQA/640.jpeg"></p>   <p>整理 | 郭芮</p>   <p>长久以来，编程语言在语法、语义和标准库等方面都存在着千差万别，使得程序员在选择时不得不面临着差异化等难题。自然选择下，就会有旧语言的淘汰（PHP 是个意外，至今还存在）和新语言的诞生。在&nbsp;JetBrains 最新发布的《2019 开发人员生态系统现状》报告中，Java、Python、C/C#、JavaScript 等主流的编程语言在历经实践考验后依然是开发者们的心头好。</p>   <p>而本文的主角 V 语言，在千呼万唤之后，终于于近日开源了，并正式发布了首个可用版本（预构建的二进制文件也即将推出）！其一经发布，便强势登顶&nbsp;GitHub TOP1，引来开发者们的热议围观。</p>   <p>&nbsp;</p>   <p><strong><img alt class="has" src="http://mmbiz-qpic-cn.weituibao.com/mmbiz_png/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOO3Txr8XE1qohTtMKPod6eraORoTPTKbC6qDLvnGFM3bc9NECknSaLWg/640.png"></strong></p>   <p>&nbsp;</p>   <p><strong>（https://github.com/vlang/v/releases/tag/v0.0.12）</strong></p>   <p>根据介绍，V 是一种新型的静态编译型语言，可以“快速编译、安全且和 C/C++ 转换”，其提供了方便、快捷、安全的编程语言和工具包，还能够很好地服务于区块链技术。</p>   <p><img alt class="has" src="http://mmbiz-qpic-cn.weituibao.com/mmbiz_gif/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOSKm6GkWFHwKvFduiatDdH6Jibryib5cMGmexoibmAOXtpdhaM4L6Ol7ftQ/640.gif"></p>   <p>V 语言作者 Reishi Saza 就表示，它是一种非常简单的语言，看官方文档 30 分钟就能完全掌握。而且，其编译器只有 400KB，无任何第三方依赖。</p>   <p><img alt class="has" src="http://mmbiz-qpic-cn.weituibao.com/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOEe2tX3vJxCXlGuZibXNabKCNxic7pq6wWN5bXooAiaPy9phjoJicWIUreg/640.jpeg"></p>   <p>（作者展示的应用示例：V 语言建立的 macOS Demo）</p>   <p>V 的核心 CPU 每秒可以编译大约 120 万行代码，这种速度是通过生成的机器代码和强大的模块化来实现的，但是目前仅支持 x64/Mach-O，预计到今年年底才能足够稳定。而在性能表现上，V 可以做到和 C 一样快，且能够翻译整个 C 或 C++ 项目，实现高达 400x 的编译速度。</p>   <pre class="has"><code>std::vector&lt;std::string&gt;&nbsp;s;s.push_back("V&nbsp;is&nbsp;");s.push_back("awesome");std::cout&nbsp;&lt;&lt;&nbsp;s.size();mut&nbsp;s&nbsp;:=&nbsp;[]s&nbsp;&lt;&lt;&nbsp;"V&nbsp;is&nbsp;"s&nbsp;&lt;&lt;&nbsp;"awesome"println(s.len)</code></pre>   <p>&nbsp;</p>   <p>目前，整个 V 语言及其标准库小于 400 KB，开发者在 0.4 秒内就可以构建它。并且到今年年底，这个数字还将下降到大约 0.15 秒。</p>   <p>此外，开发者们还在官网上放出了部分示例代码。更多编译器函数介绍可参见官方网站：https://vlang.io/。</p>   <p>1、数据库访问：</p>   <pre class="has"><code>struct&nbsp;User&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;Post&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;DB&nbsp;&nbsp;&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;Repo&nbsp;&lt;T&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;DB}fn&nbsp;new_repo&lt;T&gt;(db&nbsp;DB)&nbsp;Repo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Repo&lt;T&gt;{db:&nbsp;db}}fn&nbsp;(r&nbsp;Repo)&nbsp;find_by_id(id&nbsp;int)&nbsp;T?&nbsp;{&nbsp;//&nbsp;`?`&nbsp;means&nbsp;the&nbsp;function&nbsp;returns&nbsp;an&nbsp;optional&nbsp;&nbsp;&nbsp;&nbsp;table_name&nbsp;:=&nbsp;T.name&nbsp;//&nbsp;in&nbsp;this&nbsp;example&nbsp;getting&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;type&nbsp;gives&nbsp;us&nbsp;the&nbsp;table&nbsp;name&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;r.db.query_one&lt;T&gt;("select&nbsp;*&nbsp;from&nbsp;$table_name&nbsp;where&nbsp;id&nbsp;=&nbsp;?",&nbsp;id)}fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;:=&nbsp;new_db()&nbsp;&nbsp;&nbsp;&nbsp;users_repo&nbsp;:=&nbsp;new_repo&lt;User&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;posts_repo&nbsp;:=&nbsp;new_repo&lt;Post&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;:=&nbsp;users_repo.find_by_id(1)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln("User&nbsp;not&nbsp;found")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;:=&nbsp;posts_repo.find_by_id(1)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln("Post&nbsp;not&nbsp;found")&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;</code></pre>   <p>&nbsp;</p>   <p>2、网络开发：</p>   <pre class="has"><code>struct&nbsp;Story&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;string}//&nbsp;Fetches&nbsp;top&nbsp;HN&nbsp;stories&nbsp;in&nbsp;8&nbsp;coroutines&nbsp;fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get("https://hacker-news.firebaseio.com/v0/topstories.json")?&nbsp;&nbsp;&nbsp;&nbsp;ids&nbsp;:=&nbsp;json.decode([]int,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cursor&nbsp;:=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;_&nbsp;in&nbsp;0..8&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;go&nbsp;fn()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock&nbsp;{&nbsp;//&nbsp;Without&nbsp;this&nbsp;lock&nbsp;the&nbsp;program&nbsp;will&nbsp;not&nbsp;compile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;cursor&nbsp;&gt;=&nbsp;ids.len&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;:=&nbsp;ids[cursor]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get("https://hacker-news.firebaseio.com/v0/item/$id.json")?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;story&nbsp;:=&nbsp;json.decode(Story,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(story.title)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}()&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;runtime.wait()&nbsp;//&nbsp;Waits&nbsp;for&nbsp;all&nbsp;coroutines&nbsp;to&nbsp;finish&nbsp;}&nbsp;</code></pre>   <p>&nbsp;</p>   <p>当然，目前V 语言的开发仍处于早期阶段，很多方面还不够完善，尤其是内存管理上还面临着与 Go 和 Rust 同样繁琐的生命期管理问题，但对比 C++ 等手动和半自动的管理方式还是更省心一些的。</p>   <p>那么开发者们怎么看？</p>   <blockquote>    <p>@三川走刀口：还是要得到开发者认可，但是对于安卓开发好像没用？</p>    <p>@淡定的龙哥：Go语言同父异母的弟弟？</p>    <p>@Heisenber哥：语言特性只是一方面，生态也很重要。</p>    <p>@王的凝视：这个新语言提出来是为了解决什么问题？每种语言都有适合场景，如果没有合适场景迟早也要被淘汰。</p>    <p>@楚小欢：执行效率比C高应该不可能，C现在都被认为是汇编语言，本身语义也十分接近汇编。别的语言只要有高级点的特性，效率就不可能超过C。</p>   </blockquote>   <p>&nbsp;</p>   <p>总之，这个新生的 V 语言还是需要不断的发展，得到开发者的广泛应用才能焕发生机，也才能有望助力程序员做到真正的“人剑合一”。</p>   <p><span style="color:#000000;"><span style="color:#ffffff;">品略图书馆</span></span> <span style="color:#000000;"><span style="color:#ffffff;">http://www.pinlue.com/</span></span></p>   <p><img alt class="has" src="http://mmbiz-qpic-cn.weituibao.com/mmbiz_png/1hReHaqafafJYoFH7OAhmUdTjo35vvJTy1lRVjG2CzFP3arfVRDqI7a8PSS6Sx5LialaFTE1HFu2N4OIhL8jP9g/640.png"></p>   <p>&nbsp;</p>   <p>&nbsp;</p>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V 语言强势登顶 GitHub TOP1，欲取 Go 而代之？</title>
    <link href="https://vlanguage.cn/2019/06/26/soledadzz_93813596.html"/>
    <id>https://vlanguage.cn/2019/06/26/soledadzz_93813596.html</id>
    <published>2019-06-26T00:00:00.000Z</published>
    <updated>2019-07-22T05:05:30.158Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/soledadzz/article/details/93813596&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/soledadzz/article/details/93813596&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <div class="rich_media_content" id="js_content">    <blockquote class="js_blockquote_wrap">    <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;">这个结合了 Go 和 Rust 特性的新语言 V，正式发布了首个可用版本。</span></p>   </blockquote>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><img class="rich_pages" style="letter-spacing:.544px;text-align:center;" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOb3Afa2VnVAxJZIHdMTqfJl9TlkiaAjeicg8NzgIYbm1kHfclXBgCuVQA/640?wx_fmt=jpeg" alt="640?wx_fmt=jpeg"></span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:1px;line-height:normal;text-align:right;"><br></p>   <p style="min-height:1em;letter-spacing:.544px;margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;color:rgb(77,78,78);"><span style="letter-spacing:1px;font-size:15px;">长久以来，编程语言在语法、语义和标准库等方面都存在着千差万别，使得程序员在选择时不得不面临着差异化等难题。自然选择下，就会有旧语言的淘汰（<span style="letter-spacing:1px;font-size:15px;">PHP 是个</span>意外，至今还存在）和新语言的诞生。</span><span style="letter-spacing:1px;font-size:15px;">在 JetBrains 最新发布的《2019 开发人员生态系统现状》报告中，Java、Python、C/C#、JavaScript 等主流的编程语言在历经实践考验后依然是开发者们的心头好。</span></span></p>   <p style="min-height:1em;letter-spacing:.544px;margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);"><br></span></p>   <p style="min-height:1em;letter-spacing:.544px;margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">而本文的主角 V 语言，在千呼万唤之后，终于于近日开源了，并正式发布了首个可用版本（预构建的二进制文件也即将推出）！<span style="color:rgb(77,78,78);font-size:15px;letter-spacing:1px;">其一经发布，便强势登顶 GitHub TOP1，引来开发者们的热议围观。</span></span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <p style="text-align:center;margin-left:8px;"><strong><img class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOO3Txr8XE1qohTtMKPod6eraORoTPTKbC6qDLvnGFM3bc9NECknSaLWg/640?wx_fmt=png" alt="640?wx_fmt=png"></strong></p>   <p style="min-height:1em;letter-spacing:.544px;line-height:1.75em;text-align:center;margin-left:8px;"><strong><span style="color:rgb(136,136,136);font-size:14px;">（https://github.com/vlang/v/releases/tag/v0.0.12）</span></strong><span style="font-size:15px;letter-spacing:1px;"></span><br></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <p style="min-height:1em;letter-spacing:.544px;line-height:1.75em;margin-left:8px;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">根据介绍，V 是一种新型的静态编译型语言，可以“快速编译、安全且和 C/C++ 转换”，其提供了方便、快捷、安全的编程语言和工具包，还能够很好地服务于区块链技术。</span></p>   <p style="text-align:center;"><img class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOSKm6GkWFHwKvFduiatDdH6Jibryib5cMGmexoibmAOXtpdhaM4L6Ol7ftQ/640?wx_fmt=gif" alt="640?wx_fmt=gif"></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"></span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="color:rgb(77,78,78);letter-spacing:1px;"><span style="color:rgb(77,78,78);font-size:15px;">V 语言作者 Reishi Saza 就表示，它是一种非常简单的语言，看官方文档 30 分钟就能完全掌握。而且，</span><span style="color:rgb(77,78,78);font-size:15px;">其编译器只有 400KB，无任何第三方依赖。</span></span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <p style="min-height:1em;letter-spacing:.544px;line-height:1.75em;text-align:center;margin-left:8px;"><span style="letter-spacing:1px;font-size:14px;color:rgb(136,136,136);"><img style="width:388px;" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOEe2tX3vJxCXlGuZibXNabKCNxic7pq6wWN5bXooAiaPy9phjoJicWIUreg/640?wx_fmt=jpeg" alt="640?wx_fmt=jpeg"></span></p>   <p style="min-height:1em;letter-spacing:.544px;line-height:1.75em;text-align:center;margin-left:8px;"><span style="font-size:14px;color:rgb(136,136,136);">（作者展示的应用示例：V 语言建立的 macOS Demo）</span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><br></p>   <p style="min-height:1em;letter-spacing:.544px;margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">V 的核心 CPU 每秒可以编译大约 120 万行代码，这种速度是通过生成的机器代码和强大的模块化来实现的，但是目前仅支持 x64/Mach-O，预计到今年年底才能足够稳定。而在性能表现上，V 可以做到和 C 一样快，且能够翻译整个 C 或 C++ 项目，实现高达 400x 的编译速度。</span></p>   <pre class="output_wrapper" style="font-size:16px;color:rgb(62,62,62);line-height:1.6;letter-spacing:0px;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"></pre>   <pre><code class="hljs go" style="margin-left:2px;line-height:18px;font-size:14px;letter-spacing:0px;font-family:Consolas, Inconsolata, Courier, monospace;color:rgb(169,183,198);background:rgb(40,43,46);">std::vector&lt;std::string&gt;&nbsp;s;s.push_back("V&nbsp;is&nbsp;");s.push_back("awesome");std::cout&nbsp;&lt;&lt;&nbsp;s.size();mut&nbsp;s&nbsp;:=&nbsp;[]s&nbsp;&lt;&lt;&nbsp;'V&nbsp;is&nbsp;'s&nbsp;&lt;&lt;&nbsp;'awesome'println(s.len)<br>s.push_back(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">"V&nbsp;is&nbsp;"</span>);<br>s.push_back(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">"awesome"</span>);<br>std::cout&nbsp;&lt;&lt;&nbsp;s.size();<br><br>mut&nbsp;s&nbsp;:=&nbsp;[]<br>s&nbsp;&lt;&lt;&nbsp;<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'V&nbsp;is&nbsp;'</span><br>s&nbsp;&lt;&lt;&nbsp;<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'awesome'</span><br><span class="hljs-built_in" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">println</span>(s.<span class="hljs-built_in" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">len</span>)<br></code></pre>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"></span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">目前，整个 V 语言及其标准库小于 400 KB，开发者在 0.4 秒内就可以构建它。并且到今年年底，这个数字还将下降到大约 0.15 秒。</span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><br></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">此外，开发者们还在官网上放出了部分示例代码。更多编译器函数介绍可参见官方网站：https://vlang.io/。</span><br></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);"><br></span></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">1、数据库访问：</span><span style="font-size:15px;letter-spacing:1px;"></span></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <pre class="output_wrapper" style="font-size:16px;color:rgb(62,62,62);line-height:1.6;letter-spacing:0px;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"></pre>   <pre><code class="hljs go" style="margin-left:2px;line-height:18px;font-size:14px;letter-spacing:0px;font-family:Consolas, Inconsolata, Courier, monospace;color:rgb(169,183,198);background:rgb(40,43,46);">struct&nbsp;User&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;Post&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;DB&nbsp;&nbsp;&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;Repo&nbsp;&lt;T&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;DB}fn&nbsp;new_repo&lt;T&gt;(db&nbsp;DB)&nbsp;Repo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Repo&lt;T&gt;{db:&nbsp;db}}fn&nbsp;(r&nbsp;Repo)&nbsp;find_by_id(id&nbsp;int)&nbsp;T?&nbsp;{&nbsp;//&nbsp;`?`&nbsp;means&nbsp;the&nbsp;function&nbsp;returns&nbsp;an&nbsp;optional&nbsp;&nbsp;&nbsp;&nbsp;table_name&nbsp;:=&nbsp;T.name&nbsp;//&nbsp;in&nbsp;this&nbsp;example&nbsp;getting&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;type&nbsp;gives&nbsp;us&nbsp;the&nbsp;table&nbsp;name&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;r.db.query_one&lt;T&gt;('select&nbsp;*&nbsp;from&nbsp;$table_name&nbsp;where&nbsp;id&nbsp;=&nbsp;?',&nbsp;id)}fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;:=&nbsp;new_db()&nbsp;&nbsp;&nbsp;&nbsp;users_repo&nbsp;:=&nbsp;new_repo&lt;User&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;posts_repo&nbsp;:=&nbsp;new_repo&lt;Post&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;:=&nbsp;users_repo.find_by_id(1)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln('User&nbsp;not&nbsp;found')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;:=&nbsp;posts_repo.find_by_id(1)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln('Post&nbsp;not&nbsp;found')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">/*&nbsp;...&nbsp;*/</span>&nbsp;}<br><span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">struct</span>&nbsp;Post&nbsp;{&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">/*&nbsp;...&nbsp;*/</span>&nbsp;}<br><span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">struct</span>&nbsp;DB&nbsp;&nbsp;&nbsp;{&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">/*&nbsp;...&nbsp;*/</span>&nbsp;}<br><br><span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">struct</span>&nbsp;Repo&nbsp;&lt;T&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;DB<br>}<br><br>fn&nbsp;new_repo&lt;T&gt;(db&nbsp;DB)&nbsp;Repo&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">return</span>&nbsp;Repo&lt;T&gt;{db:&nbsp;db}<br>}<br><br>fn&nbsp;(r&nbsp;Repo)&nbsp;find_by_id(id&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">int</span>)&nbsp;T?&nbsp;{&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">//&nbsp;`?`&nbsp;means&nbsp;the&nbsp;function&nbsp;returns&nbsp;an&nbsp;optional</span><br>&nbsp;&nbsp;&nbsp;&nbsp;table_name&nbsp;:=&nbsp;T.name&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">//&nbsp;in&nbsp;this&nbsp;example&nbsp;getting&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;type&nbsp;gives&nbsp;us&nbsp;the&nbsp;table&nbsp;name</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">return</span>&nbsp;r.db.query_one&lt;T&gt;(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'select&nbsp;*&nbsp;from&nbsp;$table_name&nbsp;where&nbsp;id&nbsp;=&nbsp;?'</span>,&nbsp;id)<br>}<br><br>fn&nbsp;main()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;:=&nbsp;new_db()<br>&nbsp;&nbsp;&nbsp;&nbsp;users_repo&nbsp;:=&nbsp;new_repo&lt;User&gt;(db)<br>&nbsp;&nbsp;&nbsp;&nbsp;posts_repo&nbsp;:=&nbsp;new_repo&lt;Post&gt;(db)<br>&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;:=&nbsp;users_repo.find_by_id(<span class="hljs-number" style="font-size:inherit;line-height:inherit;color:rgb(174,135,250);">1</span>)&nbsp;or&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'User&nbsp;not&nbsp;found'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">return</span><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;:=&nbsp;posts_repo.find_by_id(<span class="hljs-number" style="font-size:inherit;line-height:inherit;color:rgb(174,135,250);">1</span>)&nbsp;or&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'Post&nbsp;not&nbsp;found'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">return</span><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}&nbsp;<br></code></pre>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">2、网络开发：</span><span style="font-size:15px;letter-spacing:1px;"></span><br><span style="font-size:15px;letter-spacing:1px;"></span></p>   <p style="margin-left:8px;line-height:1.75em;"><br></p>   <pre class="output_wrapper" style="font-size:16px;color:rgb(62,62,62);line-height:1.6;letter-spacing:0px;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"></pre>   <pre><code class="hljs go" style="margin-left:2px;line-height:18px;font-size:14px;letter-spacing:0px;font-family:Consolas, Inconsolata, Courier, monospace;color:rgb(169,183,198);background:rgb(40,43,46);">struct&nbsp;Story&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;string}//&nbsp;Fetches&nbsp;top&nbsp;HN&nbsp;stories&nbsp;in&nbsp;8&nbsp;coroutines&nbsp;fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get('https://hacker-news.firebaseio.com/v0/topstories.json')?&nbsp;&nbsp;&nbsp;&nbsp;ids&nbsp;:=&nbsp;json.decode([]int,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cursor&nbsp;:=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;_&nbsp;in&nbsp;0..8&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;go&nbsp;fn()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock&nbsp;{&nbsp;//&nbsp;Without&nbsp;this&nbsp;lock&nbsp;the&nbsp;program&nbsp;will&nbsp;not&nbsp;compile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;cursor&nbsp;&gt;=&nbsp;ids.len&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;:=&nbsp;ids[cursor]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get('https://hacker-news.firebaseio.com/v0/item/$id.json')?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;story&nbsp;:=&nbsp;json.decode(Story,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(story.title)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}()&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;runtime.wait()&nbsp;//&nbsp;Waits&nbsp;for&nbsp;all&nbsp;coroutines&nbsp;to&nbsp;finish&nbsp;}&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">string</span><br>}<br><br><span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">//&nbsp;Fetches&nbsp;top&nbsp;HN&nbsp;stories&nbsp;in&nbsp;8&nbsp;coroutines&nbsp;</span><br>fn&nbsp;main()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'https://hacker-news.firebaseio.com/v0/topstories.json'</span>)?<br>&nbsp;&nbsp;&nbsp;&nbsp;ids&nbsp;:=&nbsp;json.decode([]<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">int</span>,&nbsp;resp.body)?<br>&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cursor&nbsp;:=&nbsp;<span class="hljs-number" style="font-size:inherit;line-height:inherit;color:rgb(174,135,250);">0</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">for</span>&nbsp;_&nbsp;in&nbsp;<span class="hljs-number" style="font-size:inherit;line-height:inherit;color:rgb(174,135,250);">0..8</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">go</span>&nbsp;fn()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">for</span>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock&nbsp;{&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">//&nbsp;Without&nbsp;this&nbsp;lock&nbsp;the&nbsp;program&nbsp;will&nbsp;not&nbsp;compile&nbsp;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">if</span>&nbsp;cursor&nbsp;&gt;=&nbsp;ids.<span class="hljs-built_in" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">len</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">break</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;:=&nbsp;ids[cursor]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor++<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'https://hacker-news.firebaseio.com/v0/item/$id.json'</span>)?&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;story&nbsp;:=&nbsp;json.decode(Story,&nbsp;resp.body)?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-built_in" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">println</span>(story.title)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}()<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;runtime.wait()&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">//&nbsp;Waits&nbsp;for&nbsp;all&nbsp;coroutines&nbsp;to&nbsp;finish&nbsp;</span><br>}&nbsp;<br></code></pre>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;color:rgb(77,78,78);letter-spacing:1px;">当然，目前V 语言的开发仍处于早期阶段，很多方面还不够完善，尤其是内存管理上还面临着与 Go 和 Rust 同样繁琐的生命期管理问题，但对比 C++ 等手动和半自动的管理方式还是更省心一些的。</span></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;color:rgb(77,78,78);letter-spacing:1px;">那么开发者们怎么看？</span></p>   <blockquote class="js_blockquote_wrap">    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;">@三川走刀口：还是要得到开发者认可，但是对于安卓开发好像没用？</span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;"><br></span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;">@淡定的龙哥：Go语言同父异母的弟弟？</span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;"><br></span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;">@Heisenber哥：语言特性只是一方面，生态也很重要。</span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;"><br></span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;">@王的凝视：这个新语言提出来是为了解决什么问题？每种语言都有适合场景，如果没有合适场景迟早也要被淘汰。</span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;"><br></span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;">@楚小欢：执行效率比C高应该不可能，C现在都被认为是汇编语言，本身语义也十分接近汇编。别的语言只要有高级点的特性，效率就不可能超过C。</span></p>   </blockquote>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;">总之，这个新生的 V 语言还是需要不断的发展，得到开发者的广泛应用才能焕发生机，也才能有望助力程序员做到真正的“人剑合一”。</span></p>   </div>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V语言（Vlang）初探</title>
    <link href="https://vlanguage.cn/2019/06/26/SchopenhauerZhang_93709649.html"/>
    <id>https://vlanguage.cn/2019/06/26/SchopenhauerZhang_93709649.html</id>
    <published>2019-06-26T00:00:00.000Z</published>
    <updated>2019-07-22T05:05:29.976Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/SchopenhauerZhang/article/details/93709649&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/SchopenhauerZhang/article/details/93709649&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div id="content_views" class="markdown_views prism-atom-one-dark">   <!-- flowchart 箭头图标 勿删 -->   <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">    <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"/>   </svg>   <p>Vlang文档：<br> <a href="https://vlang.io/docs" rel="noopener" data-token="a49fa7a14d55f68d0ab2f71fadec733b" target="_blank">https://vlang.io/docs</a><br> github资料地址：<br> <a href="https://github.com/vlang-zh/vlang-zh.github.io" rel="noopener" data-token="b03a9edb22d28f6e6e2a2a1058b6d20b" target="_blank">https://github.com/vlang-zh/vlang-zh.github.io</a></p>   <p>持续更新中</p>  </div>  <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e44c3c0e64.css" rel="stylesheet"> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V 语言强势登顶 GitHub TOP1，欲取 Go 而代之？</title>
    <link href="https://vlanguage.cn/2019/06/26/TG229dvt5I93mxaQ5A6U_93805436.html"/>
    <id>https://vlanguage.cn/2019/06/26/TG229dvt5I93mxaQ5A6U_93805436.html</id>
    <published>2019-06-26T00:00:00.000Z</published>
    <updated>2019-07-22T05:05:30.514Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/TG229dvt5I93mxaQ5A6U/article/details/93805436&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/TG229dvt5I93mxaQ5A6U/article/details/93805436&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <div class="rich_media_content" id="js_content">    <blockquote class="js_blockquote_wrap">    <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;">这个结合了 Go 和 Rust 特性的新语言 V，正式发布了首个可用版本。</span></p>   </blockquote>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><img class="rich_pages" style="letter-spacing:.544px;text-align:center;" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOb3Afa2VnVAxJZIHdMTqfJl9TlkiaAjeicg8NzgIYbm1kHfclXBgCuVQA/640?wx_fmt=jpeg" alt="640?wx_fmt=jpeg"></span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:1px;line-height:normal;text-align:right;"><br></p>   <p style="min-height:1em;letter-spacing:.544px;margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;color:rgb(77,78,78);"><span style="letter-spacing:1px;font-size:15px;">长久以来，编程语言在语法、语义和标准库等方面都存在着千差万别，使得程序员在选择时不得不面临着差异化等难题。自然选择下，就会有旧语言的淘汰（<span style="letter-spacing:1px;font-size:15px;">PHP 是个</span>意外，至今还存在）和新语言的诞生。</span><span style="letter-spacing:1px;font-size:15px;">在 JetBrains 最新发布的《2019 开发人员生态系统现状》报告中，Java、Python、C/C#、JavaScript 等主流的编程语言在历经实践考验后依然是开发者们的心头好。</span></span></p>   <p style="min-height:1em;letter-spacing:.544px;margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);"><br></span></p>   <p style="min-height:1em;letter-spacing:.544px;margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">而本文的主角 V 语言，在千呼万唤之后，终于于近日开源了，并正式发布了首个可用版本（预构建的二进制文件也即将推出）！<span style="color:rgb(77,78,78);font-size:15px;letter-spacing:1px;">其一经发布，便强势登顶 GitHub TOP1，引来开发者们的热议围观。</span></span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <p style="text-align:center;margin-left:8px;"><strong><img class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOO3Txr8XE1qohTtMKPod6eraORoTPTKbC6qDLvnGFM3bc9NECknSaLWg/640?wx_fmt=png" alt="640?wx_fmt=png"></strong></p>   <p style="min-height:1em;letter-spacing:.544px;line-height:1.75em;text-align:center;margin-left:8px;"><strong><span style="color:rgb(136,136,136);font-size:14px;">（https://github.com/vlang/v/releases/tag/v0.0.12）</span></strong><span style="font-size:15px;letter-spacing:1px;"></span><br></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <p style="min-height:1em;letter-spacing:.544px;line-height:1.75em;margin-left:8px;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">根据介绍，V 是一种新型的静态编译型语言，可以“快速编译、安全且和 C/C++ 转换”，其提供了方便、快捷、安全的编程语言和工具包，还能够很好地服务于区块链技术。</span></p>   <p style="text-align:center;"><img class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOSKm6GkWFHwKvFduiatDdH6Jibryib5cMGmexoibmAOXtpdhaM4L6Ol7ftQ/640?wx_fmt=gif" alt="640?wx_fmt=gif"></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"></span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="color:rgb(77,78,78);letter-spacing:1px;"><span style="color:rgb(77,78,78);font-size:15px;">V 语言作者 Reishi Saza 就表示，它是一种非常简单的语言，看官方文档 30 分钟就能完全掌握。而且，</span><span style="color:rgb(77,78,78);font-size:15px;">其编译器只有 400KB，无任何第三方依赖。</span></span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <p style="min-height:1em;letter-spacing:.544px;line-height:1.75em;text-align:center;margin-left:8px;"><span style="letter-spacing:1px;font-size:14px;color:rgb(136,136,136);"><img style="width:388px;" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOEe2tX3vJxCXlGuZibXNabKCNxic7pq6wWN5bXooAiaPy9phjoJicWIUreg/640?wx_fmt=jpeg" alt="640?wx_fmt=jpeg"></span></p>   <p style="min-height:1em;letter-spacing:.544px;line-height:1.75em;text-align:center;margin-left:8px;"><span style="font-size:14px;color:rgb(136,136,136);">（作者展示的应用示例：V 语言建立的 macOS Demo）</span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><br></p>   <p style="min-height:1em;letter-spacing:.544px;margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">V 的核心 CPU 每秒可以编译大约 120 万行代码，这种速度是通过生成的机器代码和强大的模块化来实现的，但是目前仅支持 x64/Mach-O，预计到今年年底才能足够稳定。而在性能表现上，V 可以做到和 C 一样快，且能够翻译整个 C 或 C++ 项目，实现高达 400x 的编译速度。</span></p>   <pre class="output_wrapper" style="font-size:16px;color:rgb(62,62,62);line-height:1.6;letter-spacing:0px;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"></pre>   <pre><code class="hljs go" style="margin-left:2px;line-height:18px;font-size:14px;letter-spacing:0px;font-family:Consolas, Inconsolata, Courier, monospace;color:rgb(169,183,198);background:rgb(40,43,46);">std::vector&lt;std::string&gt;&nbsp;s;s.push_back("V&nbsp;is&nbsp;");s.push_back("awesome");std::cout&nbsp;&lt;&lt;&nbsp;s.size();mut&nbsp;s&nbsp;:=&nbsp;[]s&nbsp;&lt;&lt;&nbsp;'V&nbsp;is&nbsp;'s&nbsp;&lt;&lt;&nbsp;'awesome'println(s.len)<br>s.push_back(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">"V&nbsp;is&nbsp;"</span>);<br>s.push_back(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">"awesome"</span>);<br>std::cout&nbsp;&lt;&lt;&nbsp;s.size();<br><br>mut&nbsp;s&nbsp;:=&nbsp;[]<br>s&nbsp;&lt;&lt;&nbsp;<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'V&nbsp;is&nbsp;'</span><br>s&nbsp;&lt;&lt;&nbsp;<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'awesome'</span><br><span class="hljs-built_in" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">println</span>(s.<span class="hljs-built_in" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">len</span>)<br></code></pre>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"></span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">目前，整个 V 语言及其标准库小于 400 KB，开发者在 0.4 秒内就可以构建它。并且到今年年底，这个数字还将下降到大约 0.15 秒。</span></p>   <p style="margin-left:8px;min-height:1em;letter-spacing:.544px;line-height:1.75em;"><br></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">此外，开发者们还在官网上放出了部分示例代码。更多编译器函数介绍可参见官方网站：https://vlang.io/。</span><br></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);"><br></span></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">1、数据库访问：</span><span style="font-size:15px;letter-spacing:1px;"></span></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <pre class="output_wrapper" style="font-size:16px;color:rgb(62,62,62);line-height:1.6;letter-spacing:0px;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"></pre>   <pre><code class="hljs go" style="margin-left:2px;line-height:18px;font-size:14px;letter-spacing:0px;font-family:Consolas, Inconsolata, Courier, monospace;color:rgb(169,183,198);background:rgb(40,43,46);">struct&nbsp;User&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;Post&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;DB&nbsp;&nbsp;&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;Repo&nbsp;&lt;T&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;DB}fn&nbsp;new_repo&lt;T&gt;(db&nbsp;DB)&nbsp;Repo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Repo&lt;T&gt;{db:&nbsp;db}}fn&nbsp;(r&nbsp;Repo)&nbsp;find_by_id(id&nbsp;int)&nbsp;T?&nbsp;{&nbsp;//&nbsp;`?`&nbsp;means&nbsp;the&nbsp;function&nbsp;returns&nbsp;an&nbsp;optional&nbsp;&nbsp;&nbsp;&nbsp;table_name&nbsp;:=&nbsp;T.name&nbsp;//&nbsp;in&nbsp;this&nbsp;example&nbsp;getting&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;type&nbsp;gives&nbsp;us&nbsp;the&nbsp;table&nbsp;name&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;r.db.query_one&lt;T&gt;('select&nbsp;*&nbsp;from&nbsp;$table_name&nbsp;where&nbsp;id&nbsp;=&nbsp;?',&nbsp;id)}fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;:=&nbsp;new_db()&nbsp;&nbsp;&nbsp;&nbsp;users_repo&nbsp;:=&nbsp;new_repo&lt;User&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;posts_repo&nbsp;:=&nbsp;new_repo&lt;Post&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;:=&nbsp;users_repo.find_by_id(1)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln('User&nbsp;not&nbsp;found')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;:=&nbsp;posts_repo.find_by_id(1)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln('Post&nbsp;not&nbsp;found')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">/*&nbsp;...&nbsp;*/</span>&nbsp;}<br><span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">struct</span>&nbsp;Post&nbsp;{&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">/*&nbsp;...&nbsp;*/</span>&nbsp;}<br><span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">struct</span>&nbsp;DB&nbsp;&nbsp;&nbsp;{&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">/*&nbsp;...&nbsp;*/</span>&nbsp;}<br><br><span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">struct</span>&nbsp;Repo&nbsp;&lt;T&gt;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;DB<br>}<br><br>fn&nbsp;new_repo&lt;T&gt;(db&nbsp;DB)&nbsp;Repo&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">return</span>&nbsp;Repo&lt;T&gt;{db:&nbsp;db}<br>}<br><br>fn&nbsp;(r&nbsp;Repo)&nbsp;find_by_id(id&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">int</span>)&nbsp;T?&nbsp;{&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">//&nbsp;`?`&nbsp;means&nbsp;the&nbsp;function&nbsp;returns&nbsp;an&nbsp;optional</span><br>&nbsp;&nbsp;&nbsp;&nbsp;table_name&nbsp;:=&nbsp;T.name&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">//&nbsp;in&nbsp;this&nbsp;example&nbsp;getting&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;type&nbsp;gives&nbsp;us&nbsp;the&nbsp;table&nbsp;name</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">return</span>&nbsp;r.db.query_one&lt;T&gt;(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'select&nbsp;*&nbsp;from&nbsp;$table_name&nbsp;where&nbsp;id&nbsp;=&nbsp;?'</span>,&nbsp;id)<br>}<br><br>fn&nbsp;main()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;:=&nbsp;new_db()<br>&nbsp;&nbsp;&nbsp;&nbsp;users_repo&nbsp;:=&nbsp;new_repo&lt;User&gt;(db)<br>&nbsp;&nbsp;&nbsp;&nbsp;posts_repo&nbsp;:=&nbsp;new_repo&lt;Post&gt;(db)<br>&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;:=&nbsp;users_repo.find_by_id(<span class="hljs-number" style="font-size:inherit;line-height:inherit;color:rgb(174,135,250);">1</span>)&nbsp;or&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'User&nbsp;not&nbsp;found'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">return</span><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;:=&nbsp;posts_repo.find_by_id(<span class="hljs-number" style="font-size:inherit;line-height:inherit;color:rgb(174,135,250);">1</span>)&nbsp;or&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'Post&nbsp;not&nbsp;found'</span>)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">return</span><br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>}&nbsp;<br></code></pre>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;color:rgb(77,78,78);">2、网络开发：</span><span style="font-size:15px;letter-spacing:1px;"></span><br><span style="font-size:15px;letter-spacing:1px;"></span></p>   <p style="margin-left:8px;line-height:1.75em;"><br></p>   <pre class="output_wrapper" style="font-size:16px;color:rgb(62,62,62);line-height:1.6;letter-spacing:0px;font-family:'Helvetica Neue', Helvetica, 'Hiragino Sans GB', 'Microsoft YaHei', Arial, sans-serif;"></pre>   <pre><code class="hljs go" style="margin-left:2px;line-height:18px;font-size:14px;letter-spacing:0px;font-family:Consolas, Inconsolata, Courier, monospace;color:rgb(169,183,198);background:rgb(40,43,46);">struct&nbsp;Story&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;string}//&nbsp;Fetches&nbsp;top&nbsp;HN&nbsp;stories&nbsp;in&nbsp;8&nbsp;coroutines&nbsp;fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get('https://hacker-news.firebaseio.com/v0/topstories.json')?&nbsp;&nbsp;&nbsp;&nbsp;ids&nbsp;:=&nbsp;json.decode([]int,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cursor&nbsp;:=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;_&nbsp;in&nbsp;0..8&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;go&nbsp;fn()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock&nbsp;{&nbsp;//&nbsp;Without&nbsp;this&nbsp;lock&nbsp;the&nbsp;program&nbsp;will&nbsp;not&nbsp;compile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;cursor&nbsp;&gt;=&nbsp;ids.len&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;:=&nbsp;ids[cursor]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get('https://hacker-news.firebaseio.com/v0/item/$id.json')?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;story&nbsp;:=&nbsp;json.decode(Story,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(story.title)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}()&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;runtime.wait()&nbsp;//&nbsp;Waits&nbsp;for&nbsp;all&nbsp;coroutines&nbsp;to&nbsp;finish&nbsp;}&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">string</span><br>}<br><br><span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">//&nbsp;Fetches&nbsp;top&nbsp;HN&nbsp;stories&nbsp;in&nbsp;8&nbsp;coroutines&nbsp;</span><br>fn&nbsp;main()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'https://hacker-news.firebaseio.com/v0/topstories.json'</span>)?<br>&nbsp;&nbsp;&nbsp;&nbsp;ids&nbsp;:=&nbsp;json.decode([]<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">int</span>,&nbsp;resp.body)?<br>&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cursor&nbsp;:=&nbsp;<span class="hljs-number" style="font-size:inherit;line-height:inherit;color:rgb(174,135,250);">0</span><br>&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">for</span>&nbsp;_&nbsp;in&nbsp;<span class="hljs-number" style="font-size:inherit;line-height:inherit;color:rgb(174,135,250);">0..8</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">go</span>&nbsp;fn()&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">for</span>&nbsp;&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock&nbsp;{&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">//&nbsp;Without&nbsp;this&nbsp;lock&nbsp;the&nbsp;program&nbsp;will&nbsp;not&nbsp;compile&nbsp;</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">if</span>&nbsp;cursor&nbsp;&gt;=&nbsp;ids.<span class="hljs-built_in" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">len</span>&nbsp;{<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-keyword" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">break</span><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;:=&nbsp;ids[cursor]<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor++<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get(<span class="hljs-string" style="font-size:inherit;line-height:inherit;color:rgb(238,220,112);">'https://hacker-news.firebaseio.com/v0/item/$id.json'</span>)?&nbsp;<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;story&nbsp;:=&nbsp;json.decode(Story,&nbsp;resp.body)?<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="hljs-built_in" style="font-size:inherit;line-height:inherit;color:rgb(248,35,117);">println</span>(story.title)<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}()<br>&nbsp;&nbsp;&nbsp;&nbsp;}<br>&nbsp;&nbsp;&nbsp;&nbsp;runtime.wait()&nbsp;<span class="hljs-comment" style="font-size:inherit;line-height:inherit;color:rgb(128,128,128);">//&nbsp;Waits&nbsp;for&nbsp;all&nbsp;coroutines&nbsp;to&nbsp;finish&nbsp;</span><br>}&nbsp;<br></code></pre>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;"><br></span></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;color:rgb(77,78,78);letter-spacing:1px;">当然，目前V 语言的开发仍处于早期阶段，很多方面还不够完善，尤其是内存管理上还面临着与 Go 和 Rust 同样繁琐的生命期管理问题，但对比 C++ 等手动和半自动的管理方式还是更省心一些的。</span></p>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;color:rgb(77,78,78);letter-spacing:1px;">那么开发者们怎么看？</span></p>   <blockquote class="js_blockquote_wrap">    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;">@三川走刀口：还是要得到开发者认可，但是对于安卓开发好像没用？</span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;"><br></span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;">@淡定的龙哥：Go语言同父异母的弟弟？</span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;"><br></span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;">@Heisenber哥：语言特性只是一方面，生态也很重要。</span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;"><br></span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;">@王的凝视：这个新语言提出来是为了解决什么问题？每种语言都有适合场景，如果没有合适场景迟早也要被淘汰。</span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;"><br></span></p>    <p style="margin-left:8px;line-height:1.75em;"><span style="letter-spacing:1px;font-size:14px;">@楚小欢：执行效率比C高应该不可能，C现在都被认为是汇编语言，本身语义也十分接近汇编。别的语言只要有高级点的特性，效率就不可能超过C。</span></p>   </blockquote>   <p style="margin-left:8px;line-height:1.75em;"><span style="font-size:15px;letter-spacing:1px;">总之，这个新生的 V 语言还是需要不断的发展，得到开发者的广泛应用才能焕发生机，也才能有望助力程序员做到真正的“人剑合一”。</span></p>   </div>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>年轻人的第一篇V语言笔记</title>
    <link href="https://vlanguage.cn/2019/06/25/zjbyough_93663256.html"/>
    <id>https://vlanguage.cn/2019/06/25/zjbyough_93663256.html</id>
    <published>2019-06-25T00:00:00.000Z</published>
    <updated>2019-07-22T04:55:19.894Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/zjbyough/article/details/93663256&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/zjbyough/article/details/93663256&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div id="content_views" class="markdown_views prism-tomorrow-night-eighties">   <!-- flowchart 箭头图标 勿删 -->   <svg xmlns="http://www.w3.org/2000/svg" style="display: none;">    <path stroke-linecap="round" d="M5,0 0,2.5 5,5z" id="raphael-marker-block" style="-webkit-tap-highlight-color: rgba(0, 0, 0, 0);"/>   </svg>   <h1><a id="V_0"></a>V语言极限学习</h1>   <p>我听说V语言看文档半小时就能完全掌握？？？？以我的智商一小时掌握不了我就给各位科普一下广告法？？？</p>   <h2><a id="hello_world_4"></a>宇宙惯例hello world</h2>   <pre><code class="prism language-v">// first v codefn main(){    printIn("hello world")}</code></pre>   <ul>    <li>不需要行结束符</li>    <li>v函数使用<code>fn</code>声明，和其他语言一样，main函数是程序入口</li>    <li>注释规则和c一样</li>    <li>输出使用内置函数 <code>printIn()</code></li>   </ul>   <h2><a id="2_11_18"></a>宇宙惯例2. 1+1</h2>   <pre><code class="prism language-v">fn main(){    a := 1    b := 2    mut name := "v langue"    name = "v"    printIn(add(a,b))}fn add(a int,b int) int {    return a+b}</code></pre>   <ul>    <li>变量名在类型名之前（反人类）</li>    <li>函数和变量都可以提前，也就是可以“先调用，再声明”</li>    <li>变量用<code>:=</code>声明并初始化，变量默认不允许修改，要修改必须加 <code>mut</code></li>    <li>修改变量用 <code>=</code></li>    <li>v没有全局变量，变量只能在函数中定义</li>    <li>定义的变量必须使用，不允许只定义，不使用，和go像</li>    <li>子代码块中不允许使用父代码块中已经定义的变量,如下面的代码会编译出错</li>   </ul>   <pre><code class="prism language-v">fn main(){    a := 20    if true{        a := 30    }}</code></pre>   <h2><a id="_50"></a>基本数据类型</h2>   <h3><a id="string_52"></a>string</h3>   <p>在V中，字符串是只读字节数组。 字符串数据使用UTF-8编码。</p>   <p>单引号和双引号都可用于表示字符串（TODO：尚不支持双引号）。 为保持一致性，vfmt将双引号转换为单引号，除非该字符串包含单引号字符。</p>   <p>字符串是不可变的。 这意味着子字符串函数非常有效：不执行复制，不需要额外的分配。</p>   <blockquote>    <p>All operators in V must have values of the same type on both sides. This code will not compile if age is an int:<br> println('age = ’ + age)<br> We have to either convert age to a string:<br> println('age = ’ + age.str())<br> or use string interpolation (preferred):<br> println(‘age = $age’)</p>    <p>翻译<br> V中的所有运算符必须在两边都具有相同类型的值。如果age是int: println(‘age = ’ + age’)，这段代码将无法编译。我们必须将age转换为一个字符串:println('age = ’ + age.str())或使用字符串插值(preferred): println(‘age = ’ $age’)</p>   </blockquote>   <h3><a id="_70"></a>数组</h3>   <pre><code class="prism language-v">fn main(){    a := [1,2,3]    printIn(a)}</code></pre>   <ul>    <li>数组类型由数组第一个元素决定</li>    <li>数组中元素类型必须相同</li>    <li>使用<code>&lt;&lt;</code>在数组末尾插入元素</li>    <li>使用<code>.len</code>返回数组长度</li>    <li><code>val in array</code>,如果数组array包含val，返回true</li>   </ul>   <h3><a id="_85"></a>字典</h3>   <pre><code class="prism language-v">mut m := map[string]int{} // Only maps with string keys are allowed for now  m['one'] = 1println(m['one']) // ==&gt; "1" </code></pre>   <p>这个字典人家似乎还没有写好，emmmm，一堆TODO，你先写着，咱不急，看下一个</p>   <h2><a id="_95"></a>流程控制</h2>   <h3><a id="if_97"></a>if</h3>   <pre><code class="prism language-v">a := 10 b := 20 if a &lt; b { println('$a &lt; $b') } else if a &gt; b { println('$a &gt; $b') } else { println('$a == $b') } </code></pre>   <ul>    <li>条件没有小括号</li>    <li>始终有大括号</li>    <li>if语句可以作为一个表达式</li>   </ul>   <pre><code class="prism language-v">num := 777s := if num % 2 == 0 {'even'}else {'odd'}println(s) // ==&gt; "odd"</code></pre>   <h3><a id="in_126"></a>in</h3>   <p>作用：</p>   <ol>    <li>检查数组中是否含有某个元素</li>    <li>布尔表达式，如：</li>   </ol>   <pre><code class="prism language-v">if parser.token == .plus || parser.token == .minus || parser.token == .div || parser.token == .mult {... } if parser.token in [.plus, .minus, .div, .mult] {... } </code></pre>   <p>上下两个是等价的，使用下面的语法时，v不会创建数组</p>   <h3><a id="for_145"></a>for</h3>   <p>for比较牛逼，因为我看他文档写的比之前的都多…(狗头)，知道为啥吗，应为v只有一种循环，就是for，哈哈哈哈</p>   <p>虽然只有一种循环，但人家for有好几种啊~~~</p>   <h4><a id="for_in_151"></a>for in</h4>   <pre><code class="prism language-v">fn main(){    list := ['a','b','c']    for value in list{        printIn(value)    }}</code></pre>   <p>value-in</p>   <p>如果需要数据的索引，可以用另一种方法</p>   <pre><code class="prism language-v">names := ['Sam', 'Peter']for i, name in names {    println('$i) $name')  // Output: 0) Sam}                         //         1) Peter</code></pre>   <h4><a id="forwhile_175"></a>第二种for(类似于while)</h4>   <pre><code class="prism language-v">mut sum := 0mut i := 0for i &lt;= 100 {sum += ii++}println(sum) // ==&gt; "5050"</code></pre>   <ul>    <li>不写条件将导致死循环</li>   </ul>   <h4><a id="forc_189"></a>第三种for(类似c)</h4>   <pre><code class="prism language-v">for i := 0; i &lt; 10; i++ {println(i)}</code></pre>   <ul>    <li>为啥这儿的i不用加mut而可以变化？？别问，文档这么写的！！！</li>   </ul>   <blockquote>    <p>Here i doesn’t need to be declared with mut since it’s always going to be mutable by definition.</p>   </blockquote>   <h3><a id="switch_201"></a>switch</h3>   <pre><code class="prism language-v">os := 'windows' print('V is running on ')switch os {case 'darwin':println('macOS.')case 'linux':println('Linux.')default:println(os) }</code></pre>   <p>这里的switch和c里的差不多，只不过v中不需要在每个case后面加break</p>   <h2><a id="_218"></a>结构体</h2>   <p>结构体？？？你可别告诉我你面向过程啊</p>   <pre><code class="prism language-v">struct Point {x inty int } p := Point{x: 10 y: 20 } println(p.x) // Struct fields are accessed using a dot </code></pre>   <ul>    <li>属性访问用.</li>    <li>结构是在堆栈上分配的。若要在堆上分配结构并获取指向它的指针，请使用&amp;,如</li>   </ul>   <pre><code class="prism language-v">pointer := &amp;Point{10, 10}  // 有三个或更少字段的结构体可使用这种替代写法println(pointer.x) // 用指针访问值和其他一样，都用.  </code></pre>   <ul>    <li>结构体嵌套，目前还不支持，不过快了</li>   </ul>   <pre><code class="prism language-v">// 就直接复制了，他支持了再说（到时候我也不一定看）V doesn't have subclassing, but it supports embedded structs:// TODO: this will be implemented later in Junestruct Button {Widgettitle string}button := new_button('Click me')button.set_pos(x, y)// Without embedding we'd have to dobutton.widget.set_pos(x,y)</code></pre>   <h2><a id="_263"></a>访问修饰符</h2>   <p>默认的结构体是私有的，不可变的，可以使用访问修饰符pub 和 mut 修改，pub和mut有五种组合（不明白了吧，还有一种pub mut mut）,先把文档复制过来再看是个什么妖魔</p>   <pre><code class="prism language-v">struct Foo {a int     // private immutable (default) mut: b int     // private mutable c int     // (you can list multiple fields with the same access modifier)   pub: d int     // public immmutable (readonly) pub mut: e int     // public, but mutable only in parent module  pub mut mut: f int   // public and mutable both inside and outside parent module  }                 // (not recommended to use, that's why it's so verbose) </code></pre>   <table>    <thead>     <tr>      <th>访问修饰符</th>      <th>作用</th>     </tr>    </thead>    <tbody>     <tr>      <td>不写（默认）</td>      <td>私有，不可变</td>     </tr>     <tr>      <td>mut</td>      <td>私有，可变</td>     </tr>     <tr>      <td>pub</td>      <td>公有，不可变</td>     </tr>     <tr>      <td>pub mut</td>      <td>公有，仅在父模块可变</td>     </tr>     <tr>      <td>pub mut mut</td>      <td>公有，父模块内部外部都可变</td>     </tr>    </tbody>   </table>  <p>一脸懵逼是吧，哈哈哈，依老衲看来，这和c++中的public，private啥的一样，只不过他的变量（不能叫变量吧，先这样叫）默认是常量（const）你定义时需要加一个mut才能变成其他语言的“变量”，加一个pub这个变量就变成公有变量，从结构体外部可以访问了，加一个pub mut他就在结构体内外可以访问，而只能在结构体内部能改变，如字符串结构体中的len，外部可以访问他，但不能改变它，内部才能改变，最后pub mut mut 就是内外都可以访问，都可以修改。</p>   <h2><a id="Methods_292"></a>Methods，方法</h2>   <p>v没有class 吓死我了，辛亏有方法</p>   <p>一个方法就是一个函数，它带一个特殊的参数（接收器）</p>   <pre><code class="prism language-v">// 继续粘贴文档代码，CV工程师，年薪百万，啊啊啊啊啊啊啊啊struct User {age int } fn (u User) can_register() bool {return u.age &gt; 16 } user := User{age: 10} println(user.can_register()) // ==&gt; "false"  user2 := User{age: 20} println(user2.can_register()) // ==&gt; "true"</code></pre>   <ul>    <li>这里的can_register就是一个方法，他的接收器是u，类型是User，官方说接收器名字最好用简短的，别用self，this啥的，一个字母最好（要不然没特色，开玩笑的）</li>   </ul>   <h2><a id="Pure_functions_by_default_317"></a>Pure functions by default</h2>   <p>英语捉急，无法翻译，大概就是默认的纯函数，应为V没有全局变量，加上变量默认不能改变，哪怕是传参时也一样，</p>   <p><strong>后面开始赋值粘贴了</strong></p>   <pre><code>struct User {mut:is_registered bool } fn (u mut User) register() {u.is_registered = true } mut user := User{} println(user.is_registered) // ==&gt; "false"  user.register() println(user.is_registered) // ==&gt; "true"  </code></pre>   <pre><code class="prism language-v">fn multiply_by_2(arr mut []int) {for i := 0; i &lt; arr.len; i++ {arr[i] *= 2}}mut nums := [1, 2, 3]multiply_by_2(mut nums)println(nums) // ==&gt; "[2, 4, 6]"</code></pre>   <ul>    <li>注意，在调用此函数时，必须在nums之前添加mut。 这清楚地表明被调用的函数将修改该值。</li>    <li>最好返回值而不是修改参数。修改参数应该只在应用程序的性能关键部分执行，以减少分配和复制。</li>    <li>使用user.register()或user = register(user)代替register(mut user)。</li>    <li>V可以很容易地返回对象的修改版本：</li>   </ul>   <pre><code class="prism language-v">fn register(u User) User { return { u | is_registered: true } }user = register(user) </code></pre>   <h2><a id="const_365"></a>常量const</h2>   <pre><code class="prism language-v">const (PI    = 3.14World = '世界') println(PI)println(World)</code></pre>   <ul>    <li>常量使用const声明。</li>    <li>它们只能在模块级别(函数之外)定义。</li>    <li>常量名称必须大写。这有助于将它们与变量区分开来。</li>    <li>常数永远不会改变。</li>    <li>V常量比大多数语言更灵活。您可以分配更复杂的值</li>   </ul>   <pre><code class="prism language-v">struct Color {        r int        g int        b int}fn (c Color) str() string { return '{$c.r, $c.g, $c.b}' }fn rgb(r, g, b int) Color { return Color{r: r, g: g, b: b} }const (        Numbers = [1, 2, 3]        Red  = Color{r: 255, g: 0, b: 0}        Blue = rgb(0, 0, 255))println(Numbers)println(Red)println(Blue)</code></pre>   <ul>    <li>不允许使用全局变量，因此这非常有用。</li>   </ul>   <h2><a id="_408"></a>模块化</h2>   <p>V是一种非常模块化的语言。鼓励创建可重用模块，而且非常简单。要创建一个新模块，请创建一个目录，其中包含模块的名称和.v文件</p>   <pre><code class="prism language-v">cd ~/code/modulesmkdir mymodulevim mymodule/mymodule.v// mymodule.vmodule mymodule// To export a function we have to use `pub`pub fn say_hi() {println('hello from mymodule!')}</code></pre>   <p>你可以在mymodule /中拥有尽可能多的.v文件。<br> 使用v -lib~ / code / modules / mymodule构建它。<br> 就是这样，您现在可以在代码中使用它</p>   <pre><code class="prism language-v">module mainimport mymodulefn main() {mymodule.say_hi()}</code></pre>   <ul>    <li>注意，每次调用外部函数时都必须指定模块。</li>    <li>模块名称应该简短，不超过10个字符。</li>    <li>不允许循环导入。</li>    <li>您可以在任何地方创建模块。</li>    <li>所有模块都被静态地编译成一个可执行文件。</li>   </ul>   <hr>   <p>看了两个小时了，还没看完，以我的智商，算是告别代码界了，再见各位，我自闭了</p>  </div>  <link href="https://csdnimg.cn/release/phoenix/mdeditor/markdown_views-e44c3c0e64.css" rel="stylesheet"> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V 语言强势登顶 GitHub TOP1，欲取 Go 而代之？</title>
    <link href="https://vlanguage.cn/2019/06/25/csdnsevenn_93679131.html"/>
    <id>https://vlanguage.cn/2019/06/25/csdnsevenn_93679131.html</id>
    <published>2019-06-25T00:00:00.000Z</published>
    <updated>2019-07-22T05:05:28.351Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/csdnsevenn/article/details/93679131&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/csdnsevenn/article/details/93679131&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <p><img alt="640?wx_fmt=gif" class="__bg_gif rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/1hReHaqafad4H57UlgDZZl7lILyDiaAWDsRcksUcCYeT76ibEllhuHJU9PxRtFgAQC7QPgW6qicToOuMjnSsmsErQ/640?wx_fmt=gif" width="653"></p>   <blockquote>    <p style="margin-left:8px;">这个结合了 Go 和 Rust 特性的新语言 V，正式发布了首个可用版本。</p>   </blockquote>   <p style="margin-left:8px;"><img alt="640?wx_fmt=jpeg" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOb3Afa2VnVAxJZIHdMTqfJl9TlkiaAjeicg8NzgIYbm1kHfclXBgCuVQA/640?wx_fmt=jpeg"></p>   <p style="margin-left:8px;"><span style="color:#888888;">整理 | 郭芮</span></p>   <p style="margin-left:8px;"><span style="color:#888888;">出品 | CSDN（ID：CSDNnews）</span></p>   <p style="margin-left:8px;">长久以来，编程语言在语法、语义和标准库等方面都存在着千差万别，使得程序员在选择时不得不面临着差异化等难题。自然选择下，就会有旧语言的淘汰（PHP 是个意外，至今还存在）和新语言的诞生。在&nbsp;JetBrains 最新发布的《<a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650722924&amp;idx=1&amp;sn=acef1cd23b7e44af032b0d70b885cc26&amp;chksm=bea6a3bf89d12aa9955588321edadc1a0157945be33a817a2637c76e530f7ce201d466a163a1&amp;scene=21#wechat_redirect" rel="noopener" data-token="44133e1c706f0d83f478daa47436b283" target="_blank">2019 开发人员生态系统现状</a>》报告中，Java、Python、C/C#、JavaScript 等主流的编程语言在历经实践考验后依然是开发者们的心头好。</p>   <blockquote>    <p style="margin-left:0cm;"><strong><span style="color:#f33b45;">太嚣张了会Python的人!找工作拿高薪这么简单？</span></strong></p>    <p style="margin-left:0cm;"><strong><a href="https://edu.csdn.net/topic/python115?utm_source=cxrs_bw%0D" rel="noopener" target="_blank"><span style="color:#f33b45;">https://edu.csdn.net/topic/python115?utm_source=cxrs_bw</span></a></strong></p>   </blockquote>   <p style="margin-left:8px;">而本文的主角 V 语言，在千呼万唤之后，终于于近日开源了，并正式发布了首个可用版本（预构建的二进制文件也即将推出）！其一经发布，便强势登顶&nbsp;GitHub TOP1，引来开发者们的热议围观。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;"><strong><img alt="640?wx_fmt=png" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOO3Txr8XE1qohTtMKPod6eraORoTPTKbC6qDLvnGFM3bc9NECknSaLWg/640?wx_fmt=png"></strong></p>   <p style="margin-left:8px;"><strong><span style="color:#888888;">（https://github.com/vlang/v/releases/tag/v0.0.12）</span></strong></p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">根据介绍，V 是一种新型的静态编译型语言，可以“快速编译、安全且和 C/C++ 转换”，其提供了方便、快捷、安全的编程语言和工具包，还能够很好地服务于区块链技术。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="text-align:center;"><img alt="640?wx_fmt=gif" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOSKm6GkWFHwKvFduiatDdH6Jibryib5cMGmexoibmAOXtpdhaM4L6Ol7ftQ/640?wx_fmt=gif"></p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">V 语言作者 Reishi Saza 就表示，它是一种非常简单的语言，看官方文档 30 分钟就能完全掌握。而且，其编译器只有 400KB，无任何第三方依赖。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;"><span style="color:#888888;"><img alt="640?wx_fmt=jpeg" class="has" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOEe2tX3vJxCXlGuZibXNabKCNxic7pq6wWN5bXooAiaPy9phjoJicWIUreg/640?wx_fmt=jpeg" width="388"></span></p>   <p style="margin-left:8px;"><span style="color:#888888;">（作者展示的应用示例：V 语言建立的 macOS Demo）</span></p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">V 的核心 CPU 每秒可以编译大约 120 万行代码，这种速度是通过生成的机器代码和强大的模块化来实现的，但是目前仅支持 x64/Mach-O，预计到今年年底才能足够稳定。而在性能表现上，V 可以做到和 C 一样快，且能够翻译整个 C 或 C++ 项目，实现高达 400x 的编译速度。</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">std::vector&lt;std::string&gt;&nbsp;s;s.push_back("V&nbsp;is&nbsp;");s.push_back("awesome");std::cout&nbsp;&lt;&lt;&nbsp;s.size();mut&nbsp;s&nbsp;:=&nbsp;[]s&nbsp;&lt;&lt;&nbsp;'V&nbsp;is&nbsp;'s&nbsp;&lt;&lt;&nbsp;'awesome'println(s.len)s.push_back(<span style="color:#eedc70;">"V&nbsp;is&nbsp;"</span>);s.push_back(<span style="color:#eedc70;">"awesome"</span>);std::cout&nbsp;&lt;&lt;&nbsp;s.size();mut&nbsp;s&nbsp;:=&nbsp;[]s&nbsp;&lt;&lt;&nbsp;<span style="color:#eedc70;">'V&nbsp;is&nbsp;'</span>s&nbsp;&lt;&lt;&nbsp;<span style="color:#eedc70;">'awesome'</span><span style="color:#f82375;">println</span>(s.<span style="color:#f82375;">len</span>)</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">目前，整个 V 语言及其标准库小于 400 KB，开发者在 0.4 秒内就可以构建它。并且到今年年底，这个数字还将下降到大约 0.15 秒。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">此外，开发者们还在官网上放出了部分示例代码。更多编译器函数介绍可参见官方网站：https://vlang.io/。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">1、数据库访问：</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">struct&nbsp;User&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;Post&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;DB&nbsp;&nbsp;&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;Repo&nbsp;&lt;T&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;DB}fn&nbsp;new_repo&lt;T&gt;(db&nbsp;DB)&nbsp;Repo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Repo&lt;T&gt;{db:&nbsp;db}}fn&nbsp;(r&nbsp;Repo)&nbsp;find_by_id(id&nbsp;int)&nbsp;T?&nbsp;{&nbsp;//&nbsp;`?`&nbsp;means&nbsp;the&nbsp;function&nbsp;returns&nbsp;an&nbsp;optional&nbsp;&nbsp;&nbsp;&nbsp;table_name&nbsp;:=&nbsp;T.name&nbsp;//&nbsp;in&nbsp;this&nbsp;example&nbsp;getting&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;type&nbsp;gives&nbsp;us&nbsp;the&nbsp;table&nbsp;name&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;r.db.query_one&lt;T&gt;('select&nbsp;*&nbsp;from&nbsp;$table_name&nbsp;where&nbsp;id&nbsp;=&nbsp;?',&nbsp;id)}fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;:=&nbsp;new_db()&nbsp;&nbsp;&nbsp;&nbsp;users_repo&nbsp;:=&nbsp;new_repo&lt;User&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;posts_repo&nbsp;:=&nbsp;new_repo&lt;Post&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;:=&nbsp;users_repo.find_by_id(1)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln('User&nbsp;not&nbsp;found')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;:=&nbsp;posts_repo.find_by_id(1)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln('Post&nbsp;not&nbsp;found')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;<span style="color:#808080;">/*&nbsp;...&nbsp;*/</span>&nbsp;}<span style="color:#f82375;">struct</span>&nbsp;Post&nbsp;{&nbsp;<span style="color:#808080;">/*&nbsp;...&nbsp;*/</span>&nbsp;}<span style="color:#f82375;">struct</span>&nbsp;DB&nbsp;&nbsp;&nbsp;{&nbsp;<span style="color:#808080;">/*&nbsp;...&nbsp;*/</span>&nbsp;}<span style="color:#f82375;">struct</span>&nbsp;Repo&nbsp;&lt;T&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;DB}fn&nbsp;new_repo&lt;T&gt;(db&nbsp;DB)&nbsp;Repo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;Repo&lt;T&gt;{db:&nbsp;db}}fn&nbsp;(r&nbsp;Repo)&nbsp;find_by_id(id&nbsp;<span style="color:#f82375;">int</span>)&nbsp;T?&nbsp;{&nbsp;<span style="color:#808080;">//&nbsp;`?`&nbsp;means&nbsp;the&nbsp;function&nbsp;returns&nbsp;an&nbsp;optional</span>&nbsp;&nbsp;&nbsp;&nbsp;table_name&nbsp;:=&nbsp;T.name&nbsp;<span style="color:#808080;">//&nbsp;in&nbsp;this&nbsp;example&nbsp;getting&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;type&nbsp;gives&nbsp;us&nbsp;the&nbsp;table&nbsp;name</span>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;r.db.query_one&lt;T&gt;(<span style="color:#eedc70;">'select&nbsp;*&nbsp;from&nbsp;$table_name&nbsp;where&nbsp;id&nbsp;=&nbsp;?'</span>,&nbsp;id)}fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;:=&nbsp;new_db()&nbsp;&nbsp;&nbsp;&nbsp;users_repo&nbsp;:=&nbsp;new_repo&lt;User&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;posts_repo&nbsp;:=&nbsp;new_repo&lt;Post&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;:=&nbsp;users_repo.find_by_id(<span style="color:#ae87fa;">1</span>)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln(<span style="color:#eedc70;">'User&nbsp;not&nbsp;found'</span>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;:=&nbsp;posts_repo.find_by_id(<span style="color:#ae87fa;">1</span>)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln(<span style="color:#eedc70;">'Post&nbsp;not&nbsp;found'</span>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">2、网络开发：</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">struct&nbsp;Story&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;string}//&nbsp;Fetches&nbsp;top&nbsp;HN&nbsp;stories&nbsp;in&nbsp;8&nbsp;coroutines&nbsp;fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get('https://hacker-news.firebaseio.com/v0/topstories.json')?&nbsp;&nbsp;&nbsp;&nbsp;ids&nbsp;:=&nbsp;json.decode([]int,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cursor&nbsp;:=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;_&nbsp;in&nbsp;0..8&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;go&nbsp;fn()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock&nbsp;{&nbsp;//&nbsp;Without&nbsp;this&nbsp;lock&nbsp;the&nbsp;program&nbsp;will&nbsp;not&nbsp;compile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;cursor&nbsp;&gt;=&nbsp;ids.len&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;:=&nbsp;ids[cursor]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get('https://hacker-news.firebaseio.com/v0/item/$id.json')?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;story&nbsp;:=&nbsp;json.decode(Story,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(story.title)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}()&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;runtime.wait()&nbsp;//&nbsp;Waits&nbsp;for&nbsp;all&nbsp;coroutines&nbsp;to&nbsp;finish&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;<span style="color:#f82375;">string</span>}<span style="color:#808080;">//&nbsp;Fetches&nbsp;top&nbsp;HN&nbsp;stories&nbsp;in&nbsp;8&nbsp;coroutines&nbsp;</span>fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get(<span style="color:#eedc70;">'https://hacker-news.firebaseio.com/v0/topstories.json'</span>)?&nbsp;&nbsp;&nbsp;&nbsp;ids&nbsp;:=&nbsp;json.decode([]<span style="color:#f82375;">int</span>,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cursor&nbsp;:=&nbsp;<span style="color:#ae87fa;">0</span>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;_&nbsp;in&nbsp;<span style="color:#ae87fa;">0..8</span>&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">go</span>&nbsp;fn()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock&nbsp;{&nbsp;<span style="color:#808080;">//&nbsp;Without&nbsp;this&nbsp;lock&nbsp;the&nbsp;program&nbsp;will&nbsp;not&nbsp;compile&nbsp;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">if</span>&nbsp;cursor&nbsp;&gt;=&nbsp;ids.<span style="color:#f82375;">len</span>&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">break</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;:=&nbsp;ids[cursor]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get(<span style="color:#eedc70;">'https://hacker-news.firebaseio.com/v0/item/$id.json'</span>)?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;story&nbsp;:=&nbsp;json.decode(Story,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">println</span>(story.title)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}()&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;runtime.wait()&nbsp;<span style="color:#808080;">//&nbsp;Waits&nbsp;for&nbsp;all&nbsp;coroutines&nbsp;to&nbsp;finish&nbsp;</span>}&nbsp;</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">当然，目前V 语言的开发仍处于早期阶段，很多方面还不够完善，尤其是内存管理上还面临着与 Go 和 Rust 同样繁琐的生命期管理问题，但对比 C++ 等手动和半自动的管理方式还是更省心一些的。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">那么开发者们怎么看？</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">&nbsp;</p>   <blockquote>    <p style="margin-left:8px;">@三川走刀口：还是要得到开发者认可，但是对于安卓开发好像没用？</p>    <p style="margin-left:8px;">&nbsp;</p>    <p style="margin-left:8px;">@淡定的龙哥：Go语言同父异母的弟弟？</p>    <p style="margin-left:8px;">&nbsp;</p>    <p style="margin-left:8px;">@Heisenber哥：语言特性只是一方面，生态也很重要。</p>    <p style="margin-left:8px;">&nbsp;</p>    <p style="margin-left:8px;">@王的凝视：这个新语言提出来是为了解决什么问题？每种语言都有适合场景，如果没有合适场景迟早也要被淘汰。</p>    <p style="margin-left:8px;">&nbsp;</p>    <p style="margin-left:8px;">@楚小欢：执行效率比C高应该不可能，C现在都被认为是汇编语言，本身语义也十分接近汇编。别的语言只要有高级点的特性，效率就不可能超过C。</p>   </blockquote>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">总之，这个新生的 V 语言还是需要不断的发展，得到开发者的广泛应用才能焕发生机，也才能有望助力程序员做到真正的“人剑合一”。</p>   <p style="margin-left:8px;text-align:center;"><img alt="640?wx_fmt=png" class="has" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/1hReHaqafafJYoFH7OAhmUdTjo35vvJTy1lRVjG2CzFP3arfVRDqI7a8PSS6Sx5LialaFTE1HFu2N4OIhL8jP9g/640?wx_fmt=png"></p>   <p style="margin-left:8px;"><strong>CSDN 5G 沙龙来啦！</strong></p>   <p style="margin-left:8px;"><strong>6 月 29 日，微软（中国）首席技术官韦青、北京邮电大学信息与通信工程学院多媒体技术教研中心主任/博士生导师孙松林、金山云 AIoT 事业部高级研发总监肖江、爱立信中国研发部多天线高级专家朱怀松、爱立信中国研发部主任系统工程师刘阳等行业内顶尖的领军者、资深的技术专家们共聚一堂，共同探讨 5G 在物联网中的巨大潜能。</strong></p>   <p style="margin-left:8px;"><span style="color:#ff4c00;"><strong>扫描下方二维码，马上预约直播！</strong></span></p>   <p style="text-align:center;"><img alt="640?wx_fmt=jpeg" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/1hReHaqafaflCfcYQ5kDS29ELU256lRjuVmTiaWMd3PVP6JAIibgNBIzrZNL7Yw4F8vRSeV0QicBIHIGGfUB3RSag/640?wx_fmt=jpeg"></p>   <p style="margin-left:8px;"><strong><strong>&nbsp;热 文</strong>&nbsp;推 荐&nbsp;</strong></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="https://blog.csdn.net/csdnnews/article/details/93550667" rel="noopener" data-token="0da9a9545b0dd40fc77db77536e8355b" target="_blank">写代码不严谨，我就不配当程序员？</a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="https://blog.csdn.net/csdnnews/article/details/93429083" rel="noopener" data-token="5c783aa24bfecb648c0fb069cd4c4e5b" target="_blank">北邮通信博士万字长文，带你秒懂 4G/5G 区别！</a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="https://blog.csdn.net/csdnsevenn/article/details/93547997" rel="noopener" data-token="43412e02004180f45e3f9b2a36bb94a0" target="_blank">程序员是如何脱单的？| 程序员有话说</a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="https://blog.csdn.net/csdnnews/article/details/93550560" rel="noopener" data-token="4c17610171aad656fe5b764032c49eb1" target="_blank">5G 时代，微软又走对了一步棋！</a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="http://mp.weixin.qq.com/s?__biz=MzU2MTE1NDk2Mg==&amp;mid=2247496120&amp;idx=1&amp;sn=ebf0dc65de49be204f51de906b573510&amp;chksm=fc7faf45cb082653bfb0d145c9d12f3144021888efa2d76af85dc1dc7c962fcb048e58e7f90f&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">LinkedIn最新报告: 区块链成职位需求增长最快领域, 这些地区对区块链人才渴求度最高……</span></a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="https://blog.csdn.net/dQCFKyQDXYm3F8rB0/article/details/93546347" rel="noopener" data-token="a5fabd26837a4ce3fff0364bee9d5453" target="_blank">碾压Bert？“屠榜”的XLnet对NLP任务意味着什么</a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="http://mp.weixin.qq.com/s?__biz=MzU5MjEwMTE2OQ==&amp;mid=2247486911&amp;idx=1&amp;sn=20ddd44dd1994d5f9a35a53e23401d68&amp;chksm=fe25a7e1c9522ef7dbfc1f74f1edbef724a8a44a7f8bf8d5deeba4c10df5d6e1ca8fb2533a30&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">吐血总结！100个Python面试问题集锦（上）</span></a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="http://mp.weixin.qq.com/s?__biz=MzA3MjY1MTQwNQ==&amp;mid=2649828560&amp;idx=1&amp;sn=4462ec9081b35fe315c79f4b86265dff&amp;chksm=871e8b32b06902240ffbaca6a45ce35750d33856b60f313da1202a4278a3413abbef5557aad9&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">2019年技术盘点容器篇（一）：听UCloud谈风生水起的K8S | 程序员硬核评测</span></a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="https://blog.csdn.net/csdnnews/article/details/91075818" rel="noopener" data-token="df7517157b164f580fe3de495b5c05a7" target="_blank">17 岁的程序员告诉你关于编程的 7 个重要教训！</a></p>   <p style="margin-left:8px;"><a href="http://mp.weixin.qq.com/s?__biz=MzA5MjcxNjc2Ng==&amp;mid=2650560116&amp;idx=1&amp;sn=f9e86fa3e7b15624177b29ef1a785be4&amp;chksm=88601dc5bf1794d30fd595d413491da189584b44fd2b2e5e40c665e58760e162616585811647&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">☞“是！互联网从此没有 BAT！”</span></a></p>   <p style="margin-left:8px;"><img alt="640?wx_fmt=gif" class="__bg_gif" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAujr9dOtwUGfl03zJzLBRXbZs8g1RcNcLr7qm5qEy419tofZ8dq1sIW75xZwq2K4zIzcTtaDOy4OTg/640?wx_fmt=gif" width="45">点击阅读原文，预约直播。</p>   <p><img alt="640?wx_fmt=png" class="has" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpplm16ibb8iaib7RoGQ5iaHEdvAd0o9e1LlUGA2k0Yib222agOxzweXhahA9GuzJcGBg0dA4DzlibxRqw/640?wx_fmt=png">你点的每个“在看”，我都认真当成了喜欢</p>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>最详细的v语言(vlang)的编译器的安装与运行！</title>
    <link href="https://vlanguage.cn/2019/06/25/qq_40815295_93662653.html"/>
    <id>https://vlanguage.cn/2019/06/25/qq_40815295_93662653.html</id>
    <published>2019-06-25T00:00:00.000Z</published>
    <updated>2019-07-22T05:05:29.689Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_40815295/article/details/93662653&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/qq_40815295/article/details/93662653&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <p>​在这里给有兴趣的人提供最详细的安装过程。</p>   <p>其间过程是艰难的，体验是痛苦的。</p>   <p><img alt class="has" src="https://mmbiz.qpic.cn/mmbiz_jpg/3zUEdTCiaTKpwcICzpWKibvj7cyor4T3V1O5A0ZDnmq3KWcFfbhzGc26MsFQAWcB2Ym8zKkmicOODwPG0km9QkLag/640?wx_fmt=jpeg"></p>   <p>&nbsp;</p>   <p>相信大多数人在安装新语言的ide和环境配置的过程中都会遇到的各种各样的坑，一踩就拔不出来了。如下我们开始安装过程。</p>   <p>&nbsp;</p>   <p>再提一句目前window下暂时无法进行v语言的编译，我也没有mac进行编译。所以这里我使用的是虚拟机+Linux进行的编译。等window下能编译后通知各位。</p>   <p>&nbsp;</p>   <p>虚拟机使用的是VMware15 ，Linux使用的Ubuntu。</p>   <p>详细的虚拟机安装教程：</p>   <p>https://mp.weixin.qq.com/s/28fb8SQgUz2lcHSCCk_UBg</p>   <p>详细的Ubuntu安装教程：</p>   <p>https://mp.weixin.qq.com/s/ti_E6lAiljmVYM4_9TUKwg</p>   <p>其间还需要进行联网，我这网络环境和你们有些不同，联网问题就自行百度吧。</p>   <p>相信很多朋友早就有了以上环境。下面开始我们的正题。</p>   <p><img alt class="has" src="https://mmbiz.qpic.cn/mmbiz_jpg/3zUEdTCiaTKpwcICzpWKibvj7cyor4T3V1lp6yZBj8lXichFUAnQk2qN8v2Tp8nTiaz19WkouQjutg72N6IlRQvO5Q/640?wx_fmt=jpeg"></p>   <p>首先进入终端，</p>   <p><img alt class="has" src="https://mmbiz.qpic.cn/mmbiz_png/3zUEdTCiaTKpwcICzpWKibvj7cyor4T3V1emDvavZ5dO9sC6DfiaBT9icicbqOxj8fdUmSvYlTblPeUdGtOiaMqKGdWQ/640?wx_fmt=png"></p>   <pre># You can clone V anywheregit clone https://github.com/vlang/vcd v/compilermake# Or build without make:wget https://vlang.io/v.c   # Download the V compiler's source translated to Ccc -std=gnu11 -w -o vc v.c  # Build it with Clang or GCC./vc -o v . &amp;&amp; rm vc        # Use the resulting V binary to build V from V source, delete the old compiler./v -o v .                  # Bootstrap the compiler to make sure it works</pre>   <p>然后按命令一行一行的输入，如果是新入Linux的话第一行就出现了问题。</p>   <p>需要安装git！</p>   <p>输入 sudo apt install git</p>   <p>好了接下来继续，其间会需要你安装各种包，按上面的提示进行安装，然后再进行以上命令，全部命令结束后&nbsp;。</p>   <p>创建环境，</p>   <pre class="has"><code>sudo ln -s ~/code/v/compiler/v /usr/local/bin/v</code></pre>   <p>开始进行测试，命令行打入，v</p>   <p>如果能进入编译器，那么恭喜你，成功了。</p>   <p>这里有个大坑，不懂什么原因我的ubuntu并没有code这个路径，这里环境变量就需要改下</p>   <pre class="has"><code>sudo ln -sf ~/v/compiler/v&nbsp; /usr/local/bin/v</code></pre>   <p>使用以上命令。</p>   <p><img alt class="has" src="https://mmbiz.qpic.cn/mmbiz_png/3zUEdTCiaTKpwcICzpWKibvj7cyor4T3V1xxLAhoibJg36OftxJQRibPFZxt16wzr1yxVXPP4El4lic5ApR9Uz1WIsw/640?wx_fmt=png"></p>   <pre class="has"><code>$ vV 0.0.12Use Ctrl-D to exit&gt;&gt;&gt; println('hello world')hello world&gt;&gt;&gt;</code></pre>   <p><img alt class="has" src="https://mmbiz.qpic.cn/mmbiz_png/3zUEdTCiaTKpwcICzpWKibvj7cyor4T3V1ia3vQoh7jziaWDchWiap7TKWk3Xjj4PBGL1SB1dwRsIiampictWBYkD5emA/640?wx_fmt=png"></p>   <p>如果你也是这样，那么恭喜你。如果还有什么问题可以留言和我探讨下。如果能帮助到你，我很荣幸。</p>   <p>让苍天知道我不认输.jpg(脑补哈哈）</p>   <p>欢迎关注本公众号，持续更新分享vlang知识！谢谢。</p>   <p>欢迎加我好友进行交流。</p>   <p><img alt class="has" src="https://mmbiz.qpic.cn/mmbiz_png/3zUEdTCiaTKpwcICzpWKibvj7cyor4T3V1mlicMcW72g43vRxIts7YfUo6EYQCkG3UJkCMcHricEtNmfl547XzbicIA/640?wx_fmt=png"></p>   <p>&nbsp;</p>   <p><img alt class="has" src="https://uzshare.com/_p?https://img-blog.csdnimg.cn/20190625123547785.png"></p>   <p>官方教程：https://github.com/vlang/v</p>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>V 语言强势登顶 GitHub TOP1，欲取 Go 而代之？</title>
    <link href="https://vlanguage.cn/2019/06/24/csdnnews_93550448.html"/>
    <id>https://vlanguage.cn/2019/06/24/csdnnews_93550448.html</id>
    <published>2019-06-24T00:00:00.000Z</published>
    <updated>2019-07-22T05:05:27.980Z</updated>
    
    <content type="html"><![CDATA[<div id="article_content" class="article_content clearfix" data-report-view="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/csdnnews/article/details/93550448&quot;}" data-report-click="{&quot;mod&quot;:&quot;popu_307&quot;,&quot;dest&quot;:&quot;https://blog.csdn.net/csdnnews/article/details/93550448&quot;}">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-3019150162.css">  <div class="htmledit_views" id="content_views">   <p style="text-align:center;"><img alt="640?wx_fmt=gif" class="__bg_gif rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAujHRSdcX3IznHduusnhVrSgibxlHEaKkBO8A7UcDdDzAnMIA2ZLfuoUKKJrwSA8HPTejcSLotzprZw/640?wx_fmt=gif"></p>   <blockquote>    <p style="margin-left:8px;">这个结合了 Go 和 Rust 特性的新语言 V，正式发布了首个可用版本。</p>   </blockquote>   <p style="margin-left:8px;"><img alt="640?wx_fmt=jpeg" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOb3Afa2VnVAxJZIHdMTqfJl9TlkiaAjeicg8NzgIYbm1kHfclXBgCuVQA/640?wx_fmt=jpeg"></p>   <p style="margin-left:8px;"><span style="color:#888888;">整理 | 郭芮</span></p>   <p style="margin-left:8px;"><span style="color:#888888;">出品 | CSDN（ID：CSDNnews）</span></p>   <p style="margin-left:8px;">长久以来，编程语言在语法、语义和标准库等方面都存在着千差万别，使得程序员在选择时不得不面临着差异化等难题。自然选择下，就会有旧语言的淘汰（PHP 是个意外，至今还存在）和新语言的诞生。在&nbsp;JetBrains 最新发布的《<a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650722924&amp;idx=1&amp;sn=acef1cd23b7e44af032b0d70b885cc26&amp;chksm=bea6a3bf89d12aa9955588321edadc1a0157945be33a817a2637c76e530f7ce201d466a163a1&amp;scene=21#wechat_redirect" rel="noopener" data-token="389cdf18315b66b9f8243359832ad704" target="_blank">2019 开发人员生态系统现状</a>》报告中，Java、Python、C/C#、JavaScript 等主流的编程语言在历经实践考验后依然是开发者们的心头好。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">而本文的主角 V 语言，在千呼万唤之后，终于于近日开源了，并正式发布了首个可用版本（预构建的二进制文件也即将推出）！其一经发布，便强势登顶&nbsp;GitHub TOP1，引来开发者们的热议围观。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;"><strong><img alt="640?wx_fmt=png" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOO3Txr8XE1qohTtMKPod6eraORoTPTKbC6qDLvnGFM3bc9NECknSaLWg/640?wx_fmt=png"></strong></p>   <p style="margin-left:8px;"><strong><span style="color:#888888;">（https://github.com/vlang/v/releases/tag/v0.0.12）</span></strong></p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">根据介绍，V 是一种新型的静态编译型语言，可以“快速编译、安全且和 C/C++ 转换”，其提供了方便、快捷、安全的编程语言和工具包，还能够很好地服务于区块链技术。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="text-align:center;"><img alt="640?wx_fmt=gif" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOSKm6GkWFHwKvFduiatDdH6Jibryib5cMGmexoibmAOXtpdhaM4L6Ol7ftQ/640?wx_fmt=gif"></p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">V 语言作者 Reishi Saza 就表示，它是一种非常简单的语言，看官方文档 30 分钟就能完全掌握。而且，其编译器只有 400KB，无任何第三方依赖。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;"><span style="color:#888888;"><img alt="640?wx_fmt=jpeg" class="has" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOEe2tX3vJxCXlGuZibXNabKCNxic7pq6wWN5bXooAiaPy9phjoJicWIUreg/640?wx_fmt=jpeg" width="388"></span></p>   <p style="margin-left:8px;"><span style="color:#888888;">（作者展示的应用示例：V 语言建立的 macOS Demo）</span></p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">V 的核心 CPU 每秒可以编译大约 120 万行代码，这种速度是通过生成的机器代码和强大的模块化来实现的，但是目前仅支持 x64/Mach-O，预计到今年年底才能足够稳定。而在性能表现上，V 可以做到和 C 一样快，且能够翻译整个 C 或 C++ 项目，实现高达 400x 的编译速度。</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">std::vector&lt;std::string&gt;&nbsp;s;s.push_back("V&nbsp;is&nbsp;");s.push_back("awesome");std::cout&nbsp;&lt;&lt;&nbsp;s.size();mut&nbsp;s&nbsp;:=&nbsp;[]s&nbsp;&lt;&lt;&nbsp;'V&nbsp;is&nbsp;'s&nbsp;&lt;&lt;&nbsp;'awesome'println(s.len)s.push_back(<span style="color:#eedc70;">"V&nbsp;is&nbsp;"</span>);s.push_back(<span style="color:#eedc70;">"awesome"</span>);std::cout&nbsp;&lt;&lt;&nbsp;s.size();mut&nbsp;s&nbsp;:=&nbsp;[]s&nbsp;&lt;&lt;&nbsp;<span style="color:#eedc70;">'V&nbsp;is&nbsp;'</span>s&nbsp;&lt;&lt;&nbsp;<span style="color:#eedc70;">'awesome'</span><span style="color:#f82375;">println</span>(s.<span style="color:#f82375;">len</span>)</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">目前，整个 V 语言及其标准库小于 400 KB，开发者在 0.4 秒内就可以构建它。并且到今年年底，这个数字还将下降到大约 0.15 秒。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">此外，开发者们还在官网上放出了部分示例代码。更多编译器函数介绍可参见官方网站：https://vlang.io/。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">1、数据库访问：</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">struct&nbsp;User&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;Post&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;DB&nbsp;&nbsp;&nbsp;{&nbsp;/*&nbsp;...&nbsp;*/&nbsp;}struct&nbsp;Repo&nbsp;&lt;T&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;DB}fn&nbsp;new_repo&lt;T&gt;(db&nbsp;DB)&nbsp;Repo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;Repo&lt;T&gt;{db:&nbsp;db}}fn&nbsp;(r&nbsp;Repo)&nbsp;find_by_id(id&nbsp;int)&nbsp;T?&nbsp;{&nbsp;//&nbsp;`?`&nbsp;means&nbsp;the&nbsp;function&nbsp;returns&nbsp;an&nbsp;optional&nbsp;&nbsp;&nbsp;&nbsp;table_name&nbsp;:=&nbsp;T.name&nbsp;//&nbsp;in&nbsp;this&nbsp;example&nbsp;getting&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;type&nbsp;gives&nbsp;us&nbsp;the&nbsp;table&nbsp;name&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;r.db.query_one&lt;T&gt;('select&nbsp;*&nbsp;from&nbsp;$table_name&nbsp;where&nbsp;id&nbsp;=&nbsp;?',&nbsp;id)}fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;:=&nbsp;new_db()&nbsp;&nbsp;&nbsp;&nbsp;users_repo&nbsp;:=&nbsp;new_repo&lt;User&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;posts_repo&nbsp;:=&nbsp;new_repo&lt;Post&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;:=&nbsp;users_repo.find_by_id(1)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln('User&nbsp;not&nbsp;found')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;:=&nbsp;posts_repo.find_by_id(1)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln('Post&nbsp;not&nbsp;found')&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;<span style="color:#808080;">/*&nbsp;...&nbsp;*/</span>&nbsp;}<span style="color:#f82375;">struct</span>&nbsp;Post&nbsp;{&nbsp;<span style="color:#808080;">/*&nbsp;...&nbsp;*/</span>&nbsp;}<span style="color:#f82375;">struct</span>&nbsp;DB&nbsp;&nbsp;&nbsp;{&nbsp;<span style="color:#808080;">/*&nbsp;...&nbsp;*/</span>&nbsp;}<span style="color:#f82375;">struct</span>&nbsp;Repo&nbsp;&lt;T&gt;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;DB}fn&nbsp;new_repo&lt;T&gt;(db&nbsp;DB)&nbsp;Repo&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;Repo&lt;T&gt;{db:&nbsp;db}}fn&nbsp;(r&nbsp;Repo)&nbsp;find_by_id(id&nbsp;<span style="color:#f82375;">int</span>)&nbsp;T?&nbsp;{&nbsp;<span style="color:#808080;">//&nbsp;`?`&nbsp;means&nbsp;the&nbsp;function&nbsp;returns&nbsp;an&nbsp;optional</span>&nbsp;&nbsp;&nbsp;&nbsp;table_name&nbsp;:=&nbsp;T.name&nbsp;<span style="color:#808080;">//&nbsp;in&nbsp;this&nbsp;example&nbsp;getting&nbsp;the&nbsp;name&nbsp;of&nbsp;the&nbsp;type&nbsp;gives&nbsp;us&nbsp;the&nbsp;table&nbsp;name</span>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;r.db.query_one&lt;T&gt;(<span style="color:#eedc70;">'select&nbsp;*&nbsp;from&nbsp;$table_name&nbsp;where&nbsp;id&nbsp;=&nbsp;?'</span>,&nbsp;id)}fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;db&nbsp;:=&nbsp;new_db()&nbsp;&nbsp;&nbsp;&nbsp;users_repo&nbsp;:=&nbsp;new_repo&lt;User&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;posts_repo&nbsp;:=&nbsp;new_repo&lt;Post&gt;(db)&nbsp;&nbsp;&nbsp;&nbsp;user&nbsp;:=&nbsp;users_repo.find_by_id(<span style="color:#ae87fa;">1</span>)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln(<span style="color:#eedc70;">'User&nbsp;not&nbsp;found'</span>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;post&nbsp;:=&nbsp;posts_repo.find_by_id(<span style="color:#ae87fa;">1</span>)&nbsp;or&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;eprintln(<span style="color:#eedc70;">'Post&nbsp;not&nbsp;found'</span>)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">return</span>&nbsp;&nbsp;&nbsp;&nbsp;}}&nbsp;</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">2、网络开发：</p>   <p style="margin-left:8px;">&nbsp;</p>   <pre>&nbsp;</pre>   <pre><code style="margin-left:2px;">struct&nbsp;Story&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;string}//&nbsp;Fetches&nbsp;top&nbsp;HN&nbsp;stories&nbsp;in&nbsp;8&nbsp;coroutines&nbsp;fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get('https://hacker-news.firebaseio.com/v0/topstories.json')?&nbsp;&nbsp;&nbsp;&nbsp;ids&nbsp;:=&nbsp;json.decode([]int,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cursor&nbsp;:=&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;_&nbsp;in&nbsp;0..8&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;go&nbsp;fn()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock&nbsp;{&nbsp;//&nbsp;Without&nbsp;this&nbsp;lock&nbsp;the&nbsp;program&nbsp;will&nbsp;not&nbsp;compile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;cursor&nbsp;&gt;=&nbsp;ids.len&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;:=&nbsp;ids[cursor]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get('https://hacker-news.firebaseio.com/v0/item/$id.json')?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;story&nbsp;:=&nbsp;json.decode(Story,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;println(story.title)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}()&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;runtime.wait()&nbsp;//&nbsp;Waits&nbsp;for&nbsp;all&nbsp;coroutines&nbsp;to&nbsp;finish&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;title&nbsp;<span style="color:#f82375;">string</span>}<span style="color:#808080;">//&nbsp;Fetches&nbsp;top&nbsp;HN&nbsp;stories&nbsp;in&nbsp;8&nbsp;coroutines&nbsp;</span>fn&nbsp;main()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get(<span style="color:#eedc70;">'https://hacker-news.firebaseio.com/v0/topstories.json'</span>)?&nbsp;&nbsp;&nbsp;&nbsp;ids&nbsp;:=&nbsp;json.decode([]<span style="color:#f82375;">int</span>,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;mut&nbsp;cursor&nbsp;:=&nbsp;<span style="color:#ae87fa;">0</span>&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;_&nbsp;in&nbsp;<span style="color:#ae87fa;">0..8</span>&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">go</span>&nbsp;fn()&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">for</span>&nbsp;&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lock&nbsp;{&nbsp;<span style="color:#808080;">//&nbsp;Without&nbsp;this&nbsp;lock&nbsp;the&nbsp;program&nbsp;will&nbsp;not&nbsp;compile&nbsp;</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">if</span>&nbsp;cursor&nbsp;&gt;=&nbsp;ids.<span style="color:#f82375;">len</span>&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">break</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;id&nbsp;:=&nbsp;ids[cursor]&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cursor++&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resp&nbsp;:=&nbsp;http.get(<span style="color:#eedc70;">'https://hacker-news.firebaseio.com/v0/item/$id.json'</span>)?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;story&nbsp;:=&nbsp;json.decode(Story,&nbsp;resp.body)?&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span style="color:#f82375;">println</span>(story.title)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}()&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;runtime.wait()&nbsp;<span style="color:#808080;">//&nbsp;Waits&nbsp;for&nbsp;all&nbsp;coroutines&nbsp;to&nbsp;finish&nbsp;</span>}&nbsp;</code></pre>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">当然，目前V 语言的开发仍处于早期阶段，很多方面还不够完善，尤其是内存管理上还面临着与 Go 和 Rust 同样繁琐的生命期管理问题，但对比 C++ 等手动和半自动的管理方式还是更省心一些的。</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">那么开发者们怎么看？</p>   <p style="margin-left:8px;">&nbsp;</p>   <p style="margin-left:8px;">&nbsp;</p>   <blockquote>    <p style="margin-left:8px;">@三川走刀口：还是要得到开发者认可，但是对于安卓开发好像没用？</p>    <p style="margin-left:8px;">&nbsp;</p>    <p style="margin-left:8px;">@淡定的龙哥：Go语言同父异母的弟弟？</p>    <p style="margin-left:8px;">&nbsp;</p>    <p style="margin-left:8px;">@Heisenber哥：语言特性只是一方面，生态也很重要。</p>    <p style="margin-left:8px;">&nbsp;</p>    <p style="margin-left:8px;">@王的凝视：这个新语言提出来是为了解决什么问题？每种语言都有适合场景，如果没有合适场景迟早也要被淘汰。</p>    <p style="margin-left:8px;">&nbsp;</p>    <p style="margin-left:8px;">@楚小欢：执行效率比C高应该不可能，C现在都被认为是汇编语言，本身语义也十分接近汇编。别的语言只要有高级点的特性，效率就不可能超过C。</p>   </blockquote>   <blockquote>    <p style="margin-left:0pt;"><span style="color:#f33b45;"><strong>25岁转行人工智能靠谱吗？</strong></span></p>    <p style="margin-left:0pt;"><strong><a href="https://edu.csdn.net/topic/ai30?utm_source=csdn_bw" rel="noopener" target="_blank"><span style="color:#f33b45;"><u><u>https://edu.csdn.net/topic/ai30?utm_source=csdn_bw</u></u></span></a></strong></p>   </blockquote>   <p style="margin-left:8px;">总之，这个新生的 V 语言还是需要不断的发展，得到开发者的广泛应用才能焕发生机，也才能有望助力程序员做到真正的“人剑合一”。</p>   <p style="margin-left:8px;"><span style="color:#888888;">【END】</span></p>   <p style="margin-left:8px;"><span style="color:#888888;"><img alt="640?wx_fmt=jpeg" class="rich_pages" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_jpg/Pn4Sm0RsAuhqhqCxysMmyTDGpiaXuGJOOOV5WicXBWed8oGdSIaORibAKIT9jLnZIUdnib4FedE8v9tUOT0xLAUt8w/640?wx_fmt=jpeg" width="639"></span></p>   <p><strong><strong>&nbsp;热 文</strong>&nbsp;推 荐&nbsp;</strong></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650723170&amp;idx=1&amp;sn=877682527e063906e1c1755d1018ca23&amp;chksm=bea6a2b189d12ba756cc18425eb9085ed28ecf717f8b53a4e35a8fb4e0b6f04c0dac5b57a921&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">小程序技术演进史</span></a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="http://mp.weixin.qq.com/s?__biz=MjM5MjAwODM4MA==&amp;mid=2650723129&amp;idx=2&amp;sn=3fda6e76f04a31c9d9a960048b82f2c7&amp;chksm=bea6a2ea89d12bfc95609f7e11fff6f73008ad5e5d974a02be7c774b5902e3f2e73692589488&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">5G 兴起，物联网安全危机四伏</span></a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="https://blog.csdn.net/csdnsevenn/article/details/93547946" rel="noopener" data-token="0a2c4daeda241ee581e8100e0d609cea" target="_blank">写代码不严谨，我就不配当程序员？</a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="http://mp.weixin.qq.com/s?__biz=MzA5MzY4NTQwMA==&amp;mid=2651011772&amp;idx=1&amp;sn=39343f9be2694f7e83805cdb1bb4596e&amp;chksm=8bad894bbcda005d63c970cd43ebea96137ebc3281e91dd4d08962e3380d1e365283ae582a43&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">华为最强自研 NPU 问世，麒麟 810 “抛弃”寒武纪</span></a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="http://mp.weixin.qq.com/s?__biz=MzU2MTE1NDk2Mg==&amp;mid=2247496120&amp;idx=1&amp;sn=ebf0dc65de49be204f51de906b573510&amp;chksm=fc7faf45cb082653bfb0d145c9d12f3144021888efa2d76af85dc1dc7c962fcb048e58e7f90f&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">LinkedIn最新报告: 区块链成职位需求增长最快领域, 这些地区对区块链人才渴求度最高……</span></a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="http://mp.weixin.qq.com/s?__biz=MzI0ODcxODk5OA==&amp;mid=2247505993&amp;idx=1&amp;sn=12c5430cb2e50bbec9fb75d090af468b&amp;chksm=e99eebb0dee962a6d9e952abf1057ef61d1a0906e099d0f2fec4c2e45e667479bbf1668d469c&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">中文NLP的分词真有必要吗？李纪为团队四项任务评测一探究竟 | ACL 2019</span></a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="http://mp.weixin.qq.com/s?__biz=MzU5MjEwMTE2OQ==&amp;mid=2247486911&amp;idx=4&amp;sn=37db214a64bf45c0f5229bf2f5521140&amp;chksm=fe25a7e1c9522ef775c50f5ecf4e32509dbe29108cfe230b735f7aa9144768de003e5634eaec&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">6月技术福利限时免费领</span></a></p>   <p style="margin-left:8px;"><span style="color:#0052ff;">☞</span><a href="http://mp.weixin.qq.com/s?__biz=MzA3MjY1MTQwNQ==&amp;mid=2649828536&amp;idx=1&amp;sn=b52fe51a2473b730c3758dfde62c4e44&amp;chksm=871e8b5ab069024c60763f8fa47961e9774fd434f3fd25ff614d38c247e5a7d031d4a6708cfb&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">搞不懂SDN？那是因为你没看这个小故事…</span></a></p>   <p style="margin-left:8px;"><a href="http://mp.weixin.qq.com/s?__biz=MzA5MjcxNjc2Ng==&amp;mid=2650560278&amp;idx=1&amp;sn=8eed8639198456b0ce714af4be2fc172&amp;chksm=88601ca7bf1795b1614553701c5962054843ebfb56c940fb0bb3f5dcdf1ab010d1abd2ee4c0a&amp;scene=21#wechat_redirect" rel="noopener" target="_blank"><span style="color:#0052ff;">☞她说：程序员离开电脑就是 “废物” ！</span></a></p>   <p style="margin-left:8px;"><img alt="640?wx_fmt=gif" class="__bg_gif" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_gif/Pn4Sm0RsAujr9dOtwUGfl03zJzLBRXbZs8g1RcNcLr7qm5qEy419tofZ8dq1sIW75xZwq2K4zIzcTtaDOy4OTg/640?wx_fmt=gif" width="45">点击阅读原文，输入关键词，搜索CSDN文章。</p>   <p><img alt="640?wx_fmt=png" class="has" src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/Pn4Sm0RsAuhpplm16ibb8iaib7RoGQ5iaHEdvAd0o9e1LlUGA2k0Yib222agOxzweXhahA9GuzJcGBg0dA4DzlibxRqw/640?wx_fmt=png" width="20">你点的每个“在看”，我都认真当成了喜欢</p>  </div> </div>]]></content>
    
    <summary type="html">
    
      
      
        
&lt;div id=&quot;article_content&quot; class=&quot;article_content clearfix&quot; data-report-view=&quot;{&amp;quot;mod&amp;quot;:&amp;quot;popu_307&amp;quot;,&amp;quot;dest&amp;quot;:&amp;quot;h
      
    
    </summary>
    
      <category term="博文" scheme="https://vlanguage.cn/categories/%E5%8D%9A%E6%96%87/"/>
    
    
      <category term="V语言" scheme="https://vlanguage.cn/tags/v%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
</feed>
